{"file_contents":{"README.md":{"content":"# ecos0106","size_bytes":10},"chatbot-widget.js":{"content":"(function() {\n  // Configuration du widget chatbot\n  const CHATBOT_BASE_URL = window.location.origin;\n  \n  // Fonction pour obtenir l'email de l'utilisateur LearnWorlds\n  function getUserEmail() {\n    // LearnWorlds expose l'email dans diff√©rents endroits selon le contexte\n    if (window.LW && window.LW.user && window.LW.user.email) {\n      return window.LW.user.email;\n    }\n    \n    // Alternative: chercher dans les m√©tadonn√©es de la page\n    const emailMeta = document.querySelector('meta[name=\"user-email\"]');\n    if (emailMeta) {\n      return emailMeta.getAttribute('content');\n    }\n    \n    // Alternative: chercher dans les donn√©es utilisateur LearnWorlds\n    if (window.userData && window.userData.email) {\n      return window.userData.email;\n    }\n    \n    return null;\n  }\n  \n  // Cr√©er le bouton du chatbot\n  function createChatbotButton() {\n    const button = document.createElement('div');\n    button.id = 'chatbot-widget';\n    button.innerHTML = `\n      <div style=\"\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        width: 60px;\n        height: 60px;\n        background: #3B82F6;\n        border-radius: 50%;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n        z-index: 9999;\n        transition: all 0.3s ease;\n      \" onmouseover=\"this.style.transform='scale(1.1)'\" onmouseout=\"this.style.transform='scale(1)'\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"white\">\n          <path d=\"M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z\"/>\n        </svg>\n      </div>\n    `;\n    \n    button.onclick = openChatbot;\n    document.body.appendChild(button);\n  }\n  \n  // Ouvrir le chatbot dans une nouvelle fen√™tre\n  function openChatbot() {\n    const email = getUserEmail();\n    \n    if (!email) {\n      alert('Veuillez vous connecter pour acc√©der au chatbot.');\n      return;\n    }\n    \n    const chatbotUrl = `${CHATBOT_BASE_URL}/${encodeURIComponent(email)}`;\n    \n    // Ouvrir dans une nouvelle fen√™tre avec taille optimis√©e\n    window.open(\n      chatbotUrl,\n      'chatbot',\n      'width=400,height=600,scrollbars=yes,resizable=yes,toolbar=no,menubar=no,location=no,status=no'\n    );\n  }\n  \n  // Initialiser le widget quand la page est charg√©e\n  function init() {\n    // Attendre que LearnWorlds soit compl√®tement charg√©\n    setTimeout(() => {\n      createChatbotButton();\n    }, 2000);\n  }\n  \n  // D√©marrer l'initialisation\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n})();","size_bytes":2715},"check-secrets.js":{"content":"\nconst requiredSecrets = [\n  'DATABASE_URL',\n  'SUPABASE_URL', \n  'SUPABASE_SERVICE_ROLE_KEY',\n  'OPENAI_API_KEY',\n  'PINECONE_API_KEY'\n];\n\nconsole.log('üîç V√©rification des Secrets Replit...\\n');\n\nlet allSecretsPresent = true;\n\nrequiredSecrets.forEach(secret => {\n  const value = process.env[secret];\n  const isPresent = !!value;\n  const icon = isPresent ? '‚úÖ' : '‚ùå';\n  \n  console.log(`${icon} ${secret}: ${isPresent ? 'Pr√©sent' : 'MANQUANT'}`);\n  \n  if (isPresent && secret === 'DATABASE_URL') {\n    // Extraire et v√©rifier le format de l'URL de base de donn√©es\n    const urlMatch = value.match(/postgresql:\\/\\/postgres:([^@]+)@([^:]+):(\\d+)\\/(.+)/);\n    if (urlMatch) {\n      const [, password, host, port, database] = urlMatch;\n      console.log(`   üìã Host: ${host}`);\n      console.log(`   üìã Port: ${port}`);\n      console.log(`   üìã Database: ${database}`);\n      console.log(`   üìã Password: ${password.substring(0, 3)}***`);\n    } else {\n      console.log('   ‚ö†Ô∏è  Format d\\'URL non reconnu');\n    }\n  }\n  \n  if (!isPresent) {\n    allSecretsPresent = false;\n  }\n});\n\nconsole.log(`\\n${allSecretsPresent ? 'üéâ' : '‚ö†Ô∏è'} ${allSecretsPresent ? 'Tous les Secrets sont configur√©s!' : 'Certains Secrets manquent'}`);\n\nif (!allSecretsPresent) {\n  console.log('\\nüìù Pour configurer les Secrets:');\n  console.log('1. Allez dans l\\'onglet \"Secrets\" (üîê) dans le panneau de gauche');\n  console.log('2. Cliquez sur \"+ New Secret\"');\n  console.log('3. Ajoutez chaque Secret manquant avec sa valeur');\n  console.log('4. Red√©marrez l\\'application apr√®s configuration');\n}\n","size_bytes":1598},"debug-database.js":{"content":"\nimport postgres from 'postgres';\n\nasync function testDatabaseConnection() {\n  console.log('üîç Testing Supabase connection...');\n  console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'Present' : 'Missing');\n  \n  if (!process.env.DATABASE_URL) {\n    console.log('‚ùå DATABASE_URL environment variable is missing');\n    return;\n  }\n\n  console.log('Current URL (masked):', process.env.DATABASE_URL.replace(/:[^:]*@/, ':***@'));\n  \n  // Test 1: URL actuelle\n  await testUrl(process.env.DATABASE_URL, 'URL actuelle');\n  \n  // Test 2: URL avec pooler (si pas d√©j√† pr√©sent)\n  if (!process.env.DATABASE_URL.includes('-pooler')) {\n    const poolerUrl = process.env.DATABASE_URL.replace('@db.', '@db.');\n    const poolerUrlFixed = poolerUrl.replace('@db.', '@db.') + '-pooler';\n    await testUrl(poolerUrlFixed, 'URL avec pooler');\n  }\n}\n\nasync function testUrl(url, description) {\n  try {\n    console.log(`\\n‚è≥ Testing ${description}...`);\n    const client = postgres(url, {\n      ssl: { rejectUnauthorized: false },\n      max: 1,\n      connect_timeout: 15,\n      idle_timeout: 15,\n      prepare: false,\n    });\n    \n    const result = await client`SELECT 1 as test, current_timestamp as time`;\n    console.log(`‚úÖ ${description} - Connection successful:`, result[0]);\n    \n    await client.end();\n    return true;\n  } catch (error) {\n    console.log(`‚ùå ${description} - Connection failed:`, {\n      name: error.name,\n      message: error.message,\n      code: error.code\n    });\n    return false;\n  }\n}</async_function>\n\ntestDatabaseConnection();\n","size_bytes":1551},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\n// if (!process.env.DATABASE_URL) {\n//   throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n// }\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n","size_bytes":335},"netlify.toml":{"content":"# Configuration de d√©ploiement pour Netlify\n\n[build]\n  # Commande pour construire le projet (frontend et backend)\n  command = \"npm run build\"\n  # R√©pertoire contenant les fichiers statiques du frontend √† publier\n  publish = \"dist/public\"\n  # R√©pertoire contenant les fonctions serverless (notre backend)\n  functions = \"dist\"\n\n[[redirects]]\n  # Redirige toutes les requ√™tes API vers notre fonction serverless\n  from = \"/api/*\"\n  to = \"/.netlify/functions/index/:splat\"\n  status = 200\n","size_bytes":488},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LearnWorlds RAG Assistant\n\n## Overview\n\nThis is a sophisticated AI-powered educational assistant designed for integration with LearnWorlds LMS. The application provides intelligent chatbot capabilities for course content, along with ECOS (Examen Clinique Objectif Structur√©) simulation features for medical education. Built with React/TypeScript frontend and Express.js backend, it leverages vector search technology and OpenAI for conversational AI.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **UI Library**: Radix UI components with Tailwind CSS styling\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Build System**: Vite with custom configuration for development and production\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Session-based authentication with connect-pg-simple\n- **File Processing**: Multer for PDF uploads and processing\n- **API Design**: RESTful API with structured error handling\n\n### Key Components\n\n#### 1. RAG (Retrieval-Augmented Generation) System\n- **Vector Database**: Pinecone for document embeddings and similarity search\n- **AI Model**: OpenAI GPT-4o for response generation\n- **Document Processing**: PDF parsing and text chunking for knowledge base\n- **Context Retrieval**: Semantic search to find relevant content for user queries\n\n#### 2. ECOS Simulation Platform\n- **Patient Simulation**: AI-powered virtual patients for medical training\n- **Scenario Management**: Teachers can create, edit, and manage clinical scenarios\n- **Evaluation System**: Automated assessment of student-patient interactions\n- **Training Sessions**: Organized learning sessions with multiple scenarios\n\n#### 3. User Management System\n- **Role-based Access**: Admin, Teacher, and Student roles with different permissions\n- **Daily Limits**: Rate limiting for chatbot usage (20 questions per day per user)\n- **Session Tracking**: Persistent session management across interactions\n\n## Data Flow\n\n1. **User Authentication**: Email-based identification with session persistence\n2. **Query Processing**: User questions are processed through the RAG pipeline\n3. **Vector Search**: Pinecone retrieves relevant document chunks based on semantic similarity\n4. **AI Response**: OpenAI generates contextual responses using retrieved information\n5. **Usage Tracking**: Daily question limits are enforced and tracked in the database\n6. **ECOS Simulation**: Real-time patient simulation with conversation history and evaluation\n\n## External Dependencies\n\n### Core Services\n- **OpenAI API**: GPT-4o for natural language processing and response generation\n- **Pinecone**: Vector database for document embeddings and similarity search\n- **Neon Database**: PostgreSQL hosting with serverless scaling\n\n### Development Tools\n- **Replit Environment**: Development and deployment platform\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Production build optimization\n\n### UI/UX Libraries\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide React**: Icon library for consistent iconography\n\n## Deployment Strategy\n\n### Development Environment\n- **Platform**: Replit with Node.js 20 runtime\n- **Hot Reload**: Vite development server with HMR\n- **Database**: PostgreSQL 16 module with automatic provisioning\n- **Port Configuration**: Port 5000 for development server\n\n### Production Deployment\n- **Build Process**: Vite frontend build + ESBuild backend bundling\n- **Autoscale**: Replit's autoscale deployment target\n- **Static Assets**: Served from dist/public directory\n- **Environment Variables**: Secure configuration for API keys and database URLs\n\n### Database Schema\n- **Users**: Authentication and profile management\n- **Sessions**: Persistent session storage\n- **Exchanges**: Chat history and conversation tracking\n- **Daily Counters**: Usage limits and rate limiting\n- **ECOS Tables**: Scenarios, sessions, messages, and evaluations\n\n## Changelog\n\n- June 13, 2025. Initial setup\n- July 21, 2025. Supabase integration completed:\n  - Migrated from Firebase to Supabase PostgreSQL database\n  - Created comprehensive database schema for ECOS scenarios\n  - Implemented scenario synchronization from Pinecone to Supabase\n  - Added fallback scenarios service for demonstration\n  - Updated all backend routes to use Drizzle ORM\n  - Teacher and student interfaces now display scenarios from database/fallback\n\n## Current Technical Status\n\n- Database: Supabase PostgreSQL with direct IPv6 connection implementation\n- Connection: Attempting direct connection via resolved IPv6 address (2a05:d012:42e:5708:6587:d1da:68cb:40dc)\n- Scenarios: Direct database access without any fallback systems per user requirement\n- Authentication: In-memory user storage with direct Supabase integration\n- API: Teacher and student endpoints using direct database service\n- Frontend: React interface awaiting real database scenarios\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nDatabase preference: Supabase PostgreSQL for production deployment.","size_bytes":5248},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"test-supabase-connection.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\nasync function testSupabaseConnection() {\n  console.log('üîß Testing Supabase connection...');\n  \n  let supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;\n  \n  // If SUPABASE_URL is a PostgreSQL URL, extract the project ID and construct the HTTP URL\n  if (supabaseUrl && supabaseUrl.startsWith('postgresql://')) {\n    const match = supabaseUrl.match(/db\\.([^.]+)\\.supabase\\.co/);\n    if (match) {\n      const projectId = match[1];\n      supabaseUrl = `https://${projectId}.supabase.co`;\n      console.log('üîÑ Converted PostgreSQL URL to Supabase HTTP URL:', supabaseUrl);\n    }\n  }\n  \n  console.log('SUPABASE_URL exists:', !!supabaseUrl);\n  console.log('SUPABASE_KEY exists:', !!supabaseKey);\n  \n  if (!supabaseUrl || !supabaseKey) {\n    console.error('‚ùå Missing required environment variables');\n    return;\n  }\n  \n  try {\n    console.log('üîå Creating Supabase client...');\n    const supabase = createClient(supabaseUrl, supabaseKey);\n    \n    // Test basic connection\n    console.log('üìä Testing database connection...');\n    const { data, error } = await supabase\n      .from('ecos_scenarios')\n      .select('count')\n      .limit(1);\n    \n    if (error) {\n      console.error('‚ùå Database query error:', error.message);\n      \n      if (error.message.includes('does not exist')) {\n        console.log('‚ö†Ô∏è Table ecos_scenarios does not exist');\n        \n        // Try to list existing tables\n        const { data: tables, error: tablesError } = await supabase\n          .from('information_schema.tables')\n          .select('table_name')\n          .eq('table_schema', 'public')\n          .limit(10);\n        \n        if (tablesError) {\n          console.error('‚ùå Cannot list tables:', tablesError.message);\n        } else {\n          console.log('üìã Existing tables:', tables?.map(t => t.table_name).join(', '));\n        }\n      }\n    } else {\n      console.log('‚úÖ Supabase connection successful!');\n      console.log('Data:', data);\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Connection failed:', error.message);\n  }\n}\n\ntestSupabaseConnection().catch(console.error);","size_bytes":2238},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"attached_assets/content-1748639266382.md":{"content":"Failed to crawl cherubindavid@gmail.com:1 after 3 attempts","size_bytes":58},"scripts/embed-documents.js":{"content":"import { Pinecone } from '@pinecone-database/pinecone';\nimport OpenAI from 'openai';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// Configuration\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\nconst PINECONE_API_KEY = process.env.PINECONE_API_KEY;\nconst PINECONE_INDEX_NAME = process.env.PINECONE_INDEX_NAME || 'learnworlds-courses';\nconst PINECONE_NAMESPACE = process.env.PINECONE_NAMESPACE || 'default';\nconst DOCUMENTS_DIR = './documents';\nconst CHUNK_SIZE = 1000; // Taille approximative de chaque morceau de texte\nconst CHUNK_OVERLAP = 200; // Chevauchement entre les morceaux\n\n// Initialisation des clients\nconst openai = new OpenAI({ apiKey: OPENAI_API_KEY });\nconst pinecone = new Pinecone({ apiKey: PINECONE_API_KEY });\nconst index = pinecone.index(PINECONE_INDEX_NAME);\n\n/**\n * Charge et traite tous les documents du r√©pertoire sp√©cifi√©\n */\nasync function processDocuments() {\n  try {\n    console.log(`D√©marrage du traitement des documents dans ${DOCUMENTS_DIR}...`);\n    \n    // Cr√©er le r√©pertoire des documents s'il n'existe pas\n    try {\n      await fs.mkdir(DOCUMENTS_DIR, { recursive: true });\n    } catch (err) {\n      // Ignorer l'erreur si le r√©pertoire existe d√©j√†\n    }\n    \n    // Lister tous les fichiers dans le r√©pertoire\n    const files = await fs.readdir(DOCUMENTS_DIR);\n    \n    if (files.length === 0) {\n      console.log('Aucun document trouv√©. Veuillez ajouter des fichiers texte dans le r√©pertoire documents/');\n      return;\n    }\n    \n    console.log(`${files.length} documents trouv√©s. D√©but du traitement...`);\n    \n    let totalChunks = 0;\n    let processedFiles = 0;\n    \n    // Traiter chaque fichier\n    for (const file of files) {\n      const filePath = path.join(DOCUMENTS_DIR, file);\n      const stats = await fs.stat(filePath);\n      \n      // Ne traiter que les fichiers (pas les dossiers) et uniquement les fichiers texte\n      if (stats.isFile() && (file.endsWith('.txt') || file.endsWith('.md'))) {\n        console.log(`Traitement de ${file}...`);\n        \n        // Lire le contenu du fichier\n        const content = await fs.readFile(filePath, 'utf8');\n        \n        // Diviser le contenu en morceaux (chunks)\n        const chunks = splitIntoChunks(content, CHUNK_SIZE, CHUNK_OVERLAP);\n        console.log(`${chunks.length} morceaux cr√©√©s pour ${file}`);\n        \n        // Cr√©er les embeddings et enregistrer dans Pinecone\n        await processChunks(chunks, file);\n        \n        totalChunks += chunks.length;\n        processedFiles++;\n      }\n    }\n    \n    console.log(`\\nTraitement termin√©!`);\n    console.log(`${processedFiles} fichiers trait√©s`);\n    console.log(`${totalChunks} morceaux int√©gr√©s dans Pinecone`);\n    \n  } catch (error) {\n    console.error('Erreur lors du traitement des documents:', error);\n  }\n}\n\n/**\n * Divise un texte en morceaux de taille approximative\n */\nfunction splitIntoChunks(text, chunkSize, overlap) {\n  // Nettoyer le texte\n  text = text.replace(/\\s+/g, ' ').trim();\n  \n  const chunks = [];\n  let startIndex = 0;\n  \n  while (startIndex < text.length) {\n    let endIndex = Math.min(startIndex + chunkSize, text.length);\n    \n    // Essayer de terminer le morceau √† la fin d'une phrase si possible\n    if (endIndex < text.length) {\n      // Chercher le dernier point ou point d'interrogation dans la plage\n      const lastPeriod = Math.max(\n        text.lastIndexOf('. ', endIndex),\n        text.lastIndexOf('? ', endIndex),\n        text.lastIndexOf('! ', endIndex)\n      );\n      \n      if (lastPeriod > startIndex && lastPeriod > startIndex + chunkSize * 0.5) {\n        endIndex = lastPeriod + 1;\n      }\n    }\n    \n    chunks.push(text.substring(startIndex, endIndex).trim());\n    \n    // Avancer l'index de d√©part pour le prochain morceau\n    startIndex = endIndex - overlap;\n    \n    // √âviter les morceaux trop petits √† la fin\n    if (text.length - startIndex < chunkSize * 0.5) {\n      break;\n    }\n  }\n  \n  // S'assurer que la fin du texte est incluse\n  if (startIndex < text.length) {\n    chunks.push(text.substring(startIndex).trim());\n  }\n  \n  return chunks;\n}\n\n/**\n * Traite les morceaux de texte, cr√©e des embeddings et les stocke dans Pinecone\n */\nasync function processChunks(chunks, source) {\n  let processed = 0;\n  const batchSize = 10; // Nombre de morceaux √† traiter en parall√®le\n  \n  for (let i = 0; i < chunks.length; i += batchSize) {\n    const batch = chunks.slice(i, i + batchSize);\n    const embeddings = await getEmbeddings(batch);\n    \n    // Pr√©parer les documents pour Pinecone\n    const vectors = batch.map((text, index) => ({\n      id: `${source.replace(/\\.[^/.]+$/, '')}_${i + index}`,\n      values: embeddings[index],\n      metadata: {\n        text: text,\n        source: source,\n        chunk_id: i + index\n      }\n    }));\n    \n    // Upsert des vecteurs dans Pinecone\n    await index.upsert(vectors);\n    \n    processed += batch.length;\n    console.log(`${processed}/${chunks.length} morceaux trait√©s`);\n  }\n}\n\n/**\n * Obtient les embeddings pour une liste de textes\n */\nasync function getEmbeddings(texts) {\n  try {\n    const response = await openai.embeddings.create({\n      model: \"text-embedding-3-small\",\n      input: texts,\n      encoding_format: \"float\",\n    });\n    \n    return response.data.map(item => item.embedding);\n  } catch (error) {\n    console.error('Erreur lors de la g√©n√©ration des embeddings:', error);\n    throw error;\n  }\n}\n\n// Ex√©cuter le script\nprocessDocuments()\n  .then(() => {\n    console.log('Indexation termin√©e avec succ√®s !');\n    process.exit(0);\n  })\n  .catch(error => {\n    console.error('Erreur lors de l\\'indexation:', error);\n    process.exit(1);\n  });","size_bytes":5668},"scripts/learnworlds-js-integration.js":{"content":"// Script d'int√©gration chatbot pour LearnWorlds\n// √Ä ajouter dans la section \"Code JavaScript personnalis√©\" dans les param√®tres du site\n\n(function() {\n  // Configuration - URL de votre application Replit\n  const API_BASE_URL = 'https://' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n  \n  // Variables globales\n  let userEmail = '';\n  let chatbotReady = false;\n  let chatObserver = null;\n  \n  // Fonction principale d'initialisation\n  function initChatbotIntegration() {\n    console.log('Initialisation de l\\'int√©gration du chatbot...');\n    \n    // Obtenir l'email de l'utilisateur\n    getUserEmail().then(email => {\n      if (!email) {\n        console.error(\"Impossible d'identifier l'utilisateur\");\n        return;\n      }\n      \n      userEmail = email;\n      console.log(`Utilisateur identifi√©: ${userEmail}`);\n      \n      // Cr√©er une session via notre API\n      return fetch(`${API_BASE_URL}/api/webhook`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email: userEmail })\n      });\n    })\n    .then(response => {\n      if (!response || !response.ok) {\n        throw new Error('√âchec de la cr√©ation de session');\n      }\n      \n      console.log('Session cr√©√©e avec succ√®s');\n      \n      // Observer les changements dans le DOM pour d√©tecter le chatbot LearnWorlds\n      setupChatObserver();\n    })\n    .catch(error => {\n      console.error('Erreur d\\'initialisation:', error);\n    });\n  }\n  \n  // Obtenir l'email de l'utilisateur depuis LearnWorlds\n  async function getUserEmail() {\n    // M√©thode 1: Acc√©der √† l'objet global LW de LearnWorlds\n    if (typeof LW !== 'undefined' && LW.user && LW.user.email) {\n      return LW.user.email;\n    }\n    \n    // M√©thode 2: Acc√©der aux variables partag√©es de LearnWorlds\n    if (typeof lwSharedVariables !== 'undefined' && lwSharedVariables.user && lwSharedVariables.user.email) {\n      return lwSharedVariables.user.email;\n    }\n    \n    // M√©thode 3: Extraire depuis la page (peut n√©cessiter d'√™tre adapt√©)\n    const userDataElement = document.querySelector('[data-user-email]');\n    if (userDataElement && userDataElement.getAttribute('data-user-email')) {\n      return userDataElement.getAttribute('data-user-email');\n    }\n    \n    // Fallback pour les tests - NE PAS UTILISER EN PRODUCTION\n    // return 'test@example.com';\n    \n    // Si nous n'avons pas pu obtenir l'email\n    console.error(\"Impossible d'obtenir l'email de l'utilisateur\");\n    return null;\n  }\n  \n  // Observer le DOM pour d√©tecter quand le chatbot LearnWorlds est charg√©\n  function setupChatObserver() {\n    if (chatObserver) {\n      chatObserver.disconnect();\n    }\n    \n    chatObserver = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        if (mutation.addedNodes && mutation.addedNodes.length > 0) {\n          // Rechercher le chatbot dans les nouveaux n≈ìuds\n          for (let i = 0; i < mutation.addedNodes.length; i++) {\n            const node = mutation.addedNodes[i];\n            if (node.nodeType === 1) { // 1 = ELEMENT_NODE\n              const chatContainer = node.querySelector('.lwc-chat-container, .chat-container');\n              if (chatContainer) {\n                console.log('Chatbot LearnWorlds d√©tect√©!');\n                hookIntoChatbot(chatContainer);\n                break;\n              } else if (node.classList && (node.classList.contains('lwc-chat-container') || node.classList.contains('chat-container'))) {\n                console.log('Chatbot LearnWorlds d√©tect√© directement!');\n                hookIntoChatbot(node);\n                break;\n              }\n            }\n          }\n        }\n      });\n    });\n    \n    chatObserver.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    console.log('Observateur de chatbot configur√©');\n    \n    // V√©rifier imm√©diatement si le chatbot est d√©j√† pr√©sent dans le DOM\n    const existingChatbot = document.querySelector('.lwc-chat-container, .chat-container');\n    if (existingChatbot) {\n      console.log('Chatbot LearnWorlds d√©j√† pr√©sent dans le DOM');\n      hookIntoChatbot(existingChatbot);\n    }\n  }\n  \n  // Se connecter au chatbot LearnWorlds\n  function hookIntoChatbot(chatContainer) {\n    if (chatbotReady) {\n      return; // √âviter les doubles initialisations\n    }\n    \n    // Trouver les √©l√©ments d'interface du chatbot\n    const inputField = chatContainer.querySelector('input[type=\"text\"], textarea, input.lwc-chat-input');\n    const sendButton = chatContainer.querySelector('button.lwc-chat-send, button.send, button.envoyer, button[type=\"submit\"]');\n    \n    // Si nous ne trouvons pas les √©l√©ments, essayer une approche plus g√©n√©rique\n    if (!inputField || !sendButton) {\n      console.log('√âl√©ments du chatbot non trouv√©s, utilisation de s√©lecteurs g√©n√©riques');\n      const inputFields = chatContainer.querySelectorAll('input, textarea');\n      const buttons = chatContainer.querySelectorAll('button');\n      \n      // Prendre le dernier champ de saisie et le dernier bouton trouv√©s\n      if (inputFields.length > 0) {\n        inputField = inputFields[inputFields.length - 1];\n      }\n      \n      if (buttons.length > 0) {\n        sendButton = buttons[buttons.length - 1];\n      }\n    }\n    \n    if (!inputField || !sendButton) {\n      console.error('Impossible de trouver les √©l√©ments d\\'interface du chatbot');\n      return;\n    }\n    \n    console.log('√âl√©ments du chatbot trouv√©s:', inputField, sendButton);\n    \n    // Remplacer le gestionnaire d'√©v√©nements du formulaire\n    const chatForm = chatContainer.querySelector('form');\n    if (chatForm) {\n      chatForm.addEventListener('submit', function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        handleChatQuestion(inputField.value);\n        return false;\n      }, true);\n      \n      console.log('Gestionnaire de formulaire remplac√©');\n    }\n    \n    // Remplacer le gestionnaire de clic du bouton\n    sendButton.addEventListener('click', function(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      handleChatQuestion(inputField.value);\n      return false;\n    }, true);\n    \n    console.log('Gestionnaire de bouton remplac√©');\n    \n    // Indiquer que le chatbot est pr√™t\n    chatbotReady = true;\n    console.log('Int√©gration du chatbot termin√©e avec succ√®s');\n  }\n  \n  // G√©rer une question pos√©e au chatbot\n  function handleChatQuestion(question) {\n    // V√©rifier que nous avons une question et un email\n    question = question.trim();\n    if (!question || !userEmail) {\n      return;\n    }\n    \n    console.log(`Question pos√©e: \"${question}\"`);\n    \n    // Envoyer la question √† notre API\n    fetch(`${API_BASE_URL}/api/learnworlds/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: userEmail,\n        query: question\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.status === 'error') {\n        console.error('Erreur de l\\'API:', data.message);\n        \n        // Injecter la r√©ponse d'erreur dans le chat\n        injectResponse(data.message || 'D√©sol√©, une erreur est survenue. Veuillez r√©essayer plus tard.');\n      } else {\n        console.log('R√©ponse re√ßue:', data);\n        \n        // Injecter la r√©ponse dans le chat\n        injectResponse(data.response);\n      }\n    })\n    .catch(error => {\n      console.error('Erreur lors de l\\'envoi de la question:', error);\n      injectResponse('D√©sol√©, une erreur de connexion est survenue. Veuillez v√©rifier votre connexion internet et r√©essayer.');\n    });\n  }\n  \n  // Injecter une r√©ponse dans l'interface du chatbot\n  function injectResponse(responseText) {\n    // Cette fonction doit √™tre adapt√©e en fonction de la structure de LearnWorlds\n    // Malheureusement, sans conna√Ætre exactement leur impl√©mentation, nous devons essayer plusieurs m√©thodes\n    \n    // M√©thode 1: Trouver la fonction de rappel existante et l'appeler\n    if (typeof window.lwChatCallback === 'function') {\n      window.lwChatCallback(responseText);\n      return;\n    }\n    \n    // M√©thode 2: D√©clencher un √©v√©nement personnalis√© que LearnWorlds pourrait √©couter\n    const chatEvent = new CustomEvent('lwChatResponse', { \n      detail: { response: responseText } \n    });\n    document.dispatchEvent(chatEvent);\n    \n    // M√©thode 3: Injecter directement dans le DOM (risqu√© car d√©pend de la structure)\n    try {\n      const chatContainer = document.querySelector('.lwc-chat-container, .chat-container');\n      if (!chatContainer) return;\n      \n      const messagesContainer = chatContainer.querySelector('.lwc-chat-messages, .chat-messages, .messages');\n      if (!messagesContainer) return;\n      \n      // Cr√©er un √©l√©ment de message\n      const messageElement = document.createElement('div');\n      messageElement.classList.add('lwc-chat-message', 'lwc-chat-message-bot', 'bot-message');\n      messageElement.innerHTML = `<div class=\"lwc-chat-message-content\">${responseText}</div>`;\n      \n      // Ajouter au conteneur de messages\n      messagesContainer.appendChild(messageElement);\n      \n      // Faire d√©filer vers le bas\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    } catch (e) {\n      console.error('√âchec de l\\'injection de r√©ponse dans le DOM:', e);\n    }\n  }\n  \n  // D√©marrer l'initialisation lorsque le DOM est charg√©\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initChatbotIntegration);\n  } else {\n    // Le DOM est d√©j√† charg√©\n    initChatbotIntegration();\n  }\n})();","size_bytes":9776},"server/db.ts":{"content":"\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { \n  users, \n  sessions, \n  exchanges, \n  dailyCounters, \n  ecosScenarios, \n  ecosSessions, \n  ecosMessages, \n  ecosEvaluations,\n  trainingSessions,\n  trainingSessionStudents,\n  trainingSessionScenarios\n} from '../shared/schema';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\nconsole.log('‚úÖ Connected to Supabase PostgreSQL database');\n\n// Create postgres client with extended timeout for Supabase\nconst client = postgres(process.env.DATABASE_URL, {\n  ssl: { rejectUnauthorized: false },\n  max: 5,\n  connect_timeout: 60,\n  idle_timeout: 60,\n  prepare: false,\n  transform: postgres.camel,\n  onnotice: () => {}, // Suppress notices\n});\n\n// Create drizzle instance\nexport const db = drizzle(client, {\n  schema: {\n    users,\n    sessions,\n    exchanges,\n    dailyCounters,\n    ecosScenarios,\n    ecosSessions,\n    ecosMessages,\n    ecosEvaluations,\n    trainingSessions,\n    trainingSessionStudents,\n    trainingSessionScenarios\n  }\n});\n\nconsole.log('‚úÖ Connected to Supabase PostgreSQL database');\n\n// Export schema for use in other files\nexport {\n  users,\n  sessions,\n  exchanges,\n  dailyCounters,\n  ecosScenarios,\n  ecosSessions,\n  ecosMessages,\n  ecosEvaluations,\n  trainingSessions,\n  trainingSessionStudents,\n  trainingSessionScenarios\n};\n","size_bytes":1395},"server/debug.middleware.ts":{"content":"\nexport function createDebugMiddleware() {\n  return (req: any, res: any, next: any) => {\n    // Log all requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`üîÑ ${req.method} ${req.path}`, {\n        query: req.query,\n        body: req.body ? Object.keys(req.body) : undefined,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Catch async errors\n    const originalSend = res.send;\n    res.send = function(data: any) {\n      if (res.statusCode >= 400) {\n        console.error(`‚ùå Error response ${res.statusCode} for ${req.method} ${req.path}:`, data);\n      }\n      return originalSend.call(this, data);\n    };\n\n    next();\n  };\n}\n\nexport function createDatabaseErrorHandler() {\n  return (error: any, req: any, res: any, next: any) => {\n    if (error.code === 'CONNECTION_LOST' || error.code === 'PROTOCOL_CONNECTION_LOST') {\n      console.error('üî¥ Database connection lost:', error);\n      return res.status(503).json({\n        error: 'Database connection lost',\n        message: 'The database connection was lost. Please try again.',\n        code: error.code\n      });\n    }\n\n    if (error.message && error.message.includes('WebSocket')) {\n      console.error('üî¥ WebSocket database error:', error);\n      return res.status(503).json({\n        error: 'Database WebSocket error',\n        message: 'WebSocket connection to database failed. Please try again.',\n        details: error.message\n      });\n    }\n\n    next(error);\n  };\n}\n","size_bytes":1497},"server/diagnostic-endpoint.ts":{"content":"\nimport { Request, Response } from \"express\";\n\nexport function addDiagnosticRoutes(app: any) {\n  // Auth debugging endpoint\n  app.get(\"/api/diagnostic/auth-check\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      const ADMIN_EMAILS = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      \n      const authInfo = {\n        receivedEmail: email,\n        emailType: typeof email,\n        emailString: String(email || ''),\n        emailLowerCase: String(email || '').toLowerCase(),\n        adminEmails: ADMIN_EMAILS,\n        isAuthorized: ADMIN_EMAILS.includes(String(email || '').toLowerCase()),\n        directCheck: email === 'cherubindavid@gmail.com',\n        includes: ADMIN_EMAILS.includes(email as string),\n        query: req.query,\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(authInfo);\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Simple auth test endpoint\n  app.get(\"/api/diagnostic/auth-test\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      const ADMIN_EMAILS = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      \n      function testIsAdminAuthorized(email: string): boolean {\n        if (!email || typeof email !== 'string') {\n          return false;\n        }\n        const normalizedEmail = email.toLowerCase().trim();\n        const normalizedAdminEmails = ADMIN_EMAILS.map(adminEmail => adminEmail.toLowerCase().trim());\n        return normalizedAdminEmails.includes(normalizedEmail);\n      }\n      \n      const result = {\n        inputEmail: email,\n        emailType: typeof email,\n        isString: typeof email === 'string',\n        normalizedEmail: typeof email === 'string' ? email.toLowerCase().trim() : null,\n        adminEmails: ADMIN_EMAILS,\n        normalizedAdminEmails: ADMIN_EMAILS.map(e => e.toLowerCase().trim()),\n        isAuthorized: testIsAdminAuthorized(email as string),\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  app.get(\"/api/diagnostic/health\", async (req: Request, res: Response) => {\n    try {\n      const health = {\n        timestamp: new Date().toISOString(),\n        status: \"healthy\",\n        checks: {\n          memory: process.memoryUsage(),\n          uptime: process.uptime(),\n          platform: process.platform,\n          nodeVersion: process.version,\n          env: {\n            NODE_ENV: process.env.NODE_ENV,\n            hasOpenAI: !!process.env.OPENAI_API_KEY,\n            hasPinecone: !!process.env.PINECONE_API_KEY\n          }\n        }\n      };\n      \n      res.json(health);\n    } catch (error) {\n      res.status(500).json({\n        status: \"unhealthy\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/diagnostic/routes\", async (req: Request, res: Response) => {\n    try {\n      // Get all registered routes\n      const routes: any[] = [];\n      \n      app._router.stack.forEach((middleware: any) => {\n        if (middleware.route) {\n          routes.push({\n            path: middleware.route.path,\n            methods: Object.keys(middleware.route.methods)\n          });\n        } else if (middleware.name === 'router') {\n          middleware.handle.stack.forEach((handler: any) => {\n            if (handler.route) {\n              routes.push({\n                path: handler.route.path,\n                methods: Object.keys(handler.route.methods)\n              });\n            }\n          });\n        }\n      });\n\n      res.json({ routes });\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n}\n","size_bytes":4037},"server/firebase.ts":{"content":"// Firebase Admin SDK supprim√©\n// Utilisez PostgreSQL ou une autre base de donn√©es relationnelle\n\nexport const firestore = null;\nconsole.log('‚ö†Ô∏è Firebase supprim√© - configurez PostgreSQL');","size_bytes":196},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { db, users } from \"./db\";\nimport { addDiagnosticRoutes } from \"./diagnostic-endpoint\";\nimport { createDebugMiddleware, createDatabaseErrorHandler } from \"./debug.middleware\";\n\n\n// Simplified environment validation\nfunction validateEnvironment() {\n  const missing = ['DATABASE_URL', 'OPENAI_API_KEY', 'PINECONE_API_KEY'].filter(v => !process.env[v]);\n  if (missing.length > 0) {\n    console.warn(`Missing environment variables: ${missing.join(', ')}`);\n  }\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add debug middleware\napp.use(createDebugMiddleware());\napp.use(createDatabaseErrorHandler());\n\n// Health check endpoint\napp.get('/health', async (req: Request, res: Response) => {\n  try {\n    // Test database connection - simple query\n    const result = await db.select().from(users).limit(1);\n    res.status(200).json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Ready endpoint\napp.get('/ready', (req: Request, res: Response) => {\n  res.status(200).json({\n    status: 'ready',\n    timestamp: new Date().toISOString()\n  });\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  console.log('Starting LearnWorlds RAG Application...');\n  \n  // Validate environment\n  validateEnvironment();\n  \n  // Setup diagnostic routes\n  addDiagnosticRoutes(app);\n\n  // Database initialization is now handled by Firebase Admin SDK.\n  // The previous SQL-based table creation is no longer needed.\n  console.log('Database connection managed by Firebase.');\n\n  // Setup routes\n  const server = await registerRoutes(app);\n\n  // Security middleware for sensitive files\n  app.use((req, res, next) => {\n    const sensitivePaths = [\n      '/.env', '/package.json', '/.replit', '/server', '/shared', '/scripts'\n    ];\n\n    if (sensitivePaths.some(path => req.path.startsWith(path))) {\n      return res.status(404).json({ error: \"Not Found\" });\n    }\n    next();\n  });\n\n  // Error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    console.error(`Server Error [${status}]:`, message);\n    res.status(status).json({ message });\n  });\n\n  // Setup frontend serving\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Start server with error handling\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = '0.0.0.0';\n  \n  server.on('error', (error: any) => {\n    if (error.code === 'EADDRINUSE') {\n      console.error(`Port ${port} is already in use. Please stop any running servers and try again.`);\n      process.exit(1);\n    } else {\n      console.error('Server error:', error.message);\n      process.exit(1);\n    }\n  });\n  \n  server.listen(port, host, () => {\n    console.log('Server started successfully');\n    console.log(`Listening on http://${host}:${port}`);\n    console.log(`Health check: http://${host}:${port}/health`);\n    console.log(`Ready check: http://${host}:${port}/ready`);\n    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n  });\n\n  // Graceful shutdown\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM, shutting down gracefully');\n    server.close(() => process.exit(0));\n  });\n\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT, shutting down gracefully');\n    server.close(() => process.exit(0));\n  });\n\n})().catch((error) => {\n  console.error('Application startup failed:', error instanceof Error ? error.message : String(error));\n  process.exit(1);\n});","size_bytes":4771},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    return res.redirect(\"/api/login\");\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    return res.redirect(\"/api/login\");\n  }\n};","size_bytes":4164},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { db, users, ecosScenarios, ecosSessions, ecosMessages, trainingSessions, trainingSessionStudents, trainingSessionScenarios } from './db';\nimport { eq, and } from 'drizzle-orm';\nimport { scenarioSyncService } from './services/scenario-sync.service';\n\n// Admin emails authorized to access admin features\nconst ADMIN_EMAILS: string[] = [\n  'cherubindavid@gmail.com', \n  'colombemadoungou@gmail.com', \n  'colombemadoungou.com', // Accept both formats for debugging\n  'romain.guillevic@gmail.com', \n  'romainguillevic@gmail.com'\n];\n\n// Middleware to check admin authorization\nfunction isAdminAuthorized(email: string): boolean {\n  if (!email || typeof email !== 'string') {\n    return false;\n  }\n  const normalizedEmail = email.toLowerCase().trim();\n  const normalizedAdminEmails = ADMIN_EMAILS.map(adminEmail => adminEmail.toLowerCase().trim());\n  return normalizedAdminEmails.includes(normalizedEmail);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Initialize database and data\n  setImmediate(async () => {\n    try {\n      console.log('üîß Testing database connection...');\n      const { SupabaseClientService } = await import('./services/supabase-client.service');\n      const dbService = new SupabaseClientService();\n      \n      try {\n        await dbService.connect();\n        console.log('‚úÖ Database connection successful!');\n        const scenarios = await dbService.getScenarios();\n        console.log(`‚úÖ Found ${scenarios.length} scenarios in database`);\n        // Scenarios are now available in the database\n        \n        console.log('üìä Attempting to sync scenarios from Pinecone...');\n        await scenarioSyncService.syncScenariosFromPinecone();\n        console.log('‚úÖ Pinecone sync completed');\n      } catch (error: any) {\n        console.error('‚ùå Database connection test failed:', error.message);\n        console.log('‚ö†Ô∏è Database not available, using fallback scenarios only');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Initialization failed, using fallback scenarios for demonstration');\n    }\n  });\n\n  // In-memory user storage for demonstration\n  const inMemoryUsers = new Map<string, { userId: string; createdAt: Date }>();\n\n  async function findOrCreateStudent(email: string): Promise<{ userId: string; isNewUser: boolean }> {\n    try {\n      // Try database first\n      try {\n        const existingUsers = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, email));\n\n        if (existingUsers.length > 0) {\n          return { userId: existingUsers[0].id, isNewUser: false };\n        }\n\n        // Create new user with generated ID\n        const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        await db.insert(users).values({\n          id: userId,\n          email: email,\n        });\n\n        return { userId, isNewUser: true };\n      } catch (dbError) {\n        console.log('Database not available, using in-memory storage');\n        \n        // Fallback to in-memory storage\n        if (inMemoryUsers.has(email)) {\n          const user = inMemoryUsers.get(email)!;\n          return { userId: user.userId, isNewUser: false };\n        }\n\n        const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        inMemoryUsers.set(email, { userId, createdAt: new Date() });\n        return { userId, isNewUser: true };\n      }\n    } catch (error) {\n      console.error('Error in findOrCreateStudent:', error);\n      throw error;\n    }\n  }\n\n  // Route to sync scenarios from Pinecone\n  app.post(\"/api/admin/sync-scenarios\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc√®s non autoris√©\" });\n    }\n\n    try {\n      await scenarioSyncService.syncScenariosFromPinecone();\n      res.status(200).json({ message: \"Synchronisation des sc√©narios termin√©e avec succ√®s\" });\n    } catch (error: any) {\n      console.error(\"Error syncing scenarios:\", error);\n      res.status(500).json({ message: \"Erreur lors de la synchronisation des sc√©narios\" });\n    }\n  });\n\n  // Route to test direct database connection and fetch scenarios\n  app.get(\"/api/admin/test-db\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc√®s non autoris√©\" });\n    }\n\n    try {\n      const { alternativeSupabaseService } = await import('./services/alternative-supabase.service');\n      \n      console.log('üîß Testing alternative Supabase connection...');\n      await alternativeSupabaseService.testConnection();\n      \n      const scenarios = await alternativeSupabaseService.getScenarios();\n      \n      res.status(200).json({ \n        connected: true,\n        scenarios,\n        count: scenarios.length,\n        message: `Connexion Supabase r√©ussie - ${scenarios.length} sc√©narios trouv√©s`\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error connecting to Supabase:\", error);\n      res.status(500).json({ \n        message: \"Erreur de connexion √† la base de donn√©es Supabase\",\n        error: error.message,\n        connected: false\n      });\n    }\n  });\n\n  // Route to get available scenarios for students\n  app.get(\"/api/student/available-scenarios\", async (req: Request, res: Response) => {\n    try {\n      console.log('üîß Fetching student scenarios from database only...');\n      const scenarios = await scenarioSyncService.getAvailableScenarios();\n      \n      res.status(200).json({ \n        scenarios,\n        connected: true,\n        source: 'database'\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching student scenarios:\", error);\n      res.status(500).json({ \n        message: \"Erreur de connexion √† la base de donn√©es\",\n        error: error.message,\n        connected: false\n      });\n    }\n  });\n\n  // Route to get scenarios for teacher dashboard\n  app.get(\"/api/teacher/scenarios\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc√®s non autoris√©\" });\n    }\n\n    try {\n      console.log('üîß Fetching teacher scenarios from database only...');\n      const scenarios = await scenarioSyncService.getAvailableScenarios();\n      \n      res.status(200).json({ \n        scenarios,\n        connected: true,\n        source: 'database'\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching teacher scenarios:\", error);\n      res.status(500).json({ \n        message: \"Erreur de connexion √† la base de donn√©es\",\n        error: error.message,\n        connected: false\n      });\n    }\n  });\n\n  // Route to get dashboard stats for teachers\n  app.get(\"/api/teacher/dashboard\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc√®s non autoris√©\" });\n    }\n\n    try {\n      let stats = {\n        totalScenarios: 0,\n        activeSessions: 0,\n        completedSessions: 0,\n        totalStudents: 0\n      };\n\n      try {\n        // Try to get real stats from database\n        const scenarios = await scenarioSyncService.getAvailableScenarios();\n        stats.totalScenarios = scenarios.length;\n      } catch (dbError) {\n        // Use fallback data\n        const { fallbackScenariosService } = await import('./services/fallback-scenarios.service');\n        const scenarios = await fallbackScenariosService.getAvailableScenarios();\n        stats.totalScenarios = scenarios.length;\n        stats.activeSessions = 2; // Sample data\n        stats.completedSessions = 15; // Sample data  \n        stats.totalStudents = 8; // Sample data\n      }\n\n      res.status(200).json(stats);\n    } catch (error: any) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Erreur lors de la r√©cup√©ration des statistiques\" });\n    }\n  });\n\n  // Route to get available Pinecone indexes\n  app.get(\"/api/admin/indexes\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc√®s non autoris√©\" });\n    }\n\n    try {\n      const { pineconeService } = await import('./services/pinecone.service');\n      console.log('üîÑ Fetching Pinecone indexes...');\n      \n      const indexes = await pineconeService.listIndexes();\n      console.log('‚úÖ Indexes fetched successfully:', indexes);\n      \n      res.status(200).json({ \n        indexes,\n        message: \"Index r√©cup√©r√©s avec succ√®s\" \n      });\n    } catch (error: any) {\n      console.error(\"Error fetching indexes:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la r√©cup√©ration des index Pinecone\",\n        error: error.message \n      });\n    }\n  });\n\n  // API route to create or verify a student account\n  app.post(\"/api/student\", async (req: Request, res: Response) => {\n    const schema = z.object({\n      email: z.string().email(\"Format d'email invalide\"),\n    });\n\n    try {\n      const { email } = schema.parse(req.body);\n      const { userId, isNewUser } = await findOrCreateStudent(email);\n      res.status(200).json({ \n        message: \"Compte √©tudiant trait√© avec succ√®s\", \n        userId, \n        isNewUser \n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Donn√©es invalides\", errors: error.errors });\n      }\n      console.error(\"Error in /api/student:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // API route to start a simulation session (disabled for now - using fallback data)\n  app.post(\"/api/session/start\", async (req: Request, res: Response) => {\n    return res.status(501).json({ \n      message: \"Fonctionnalit√© temporairement d√©sactiv√©e\",\n      details: \"Cette fonctionnalit√© sera r√©activ√©e une fois la base de donn√©es connect√©e\"\n    });\n  });\n\n  // API route to get scenarios for a student\n  app.get(\"/api/student/scenarios\", async (req: Request, res: Response) => {\n    const schema = z.object({\n      email: z.string().email(),\n    });\n\n    try {\n      const { email } = schema.parse(req.query);\n      \n      // Use scenario sync service to get scenarios\n      try {\n        const scenarios = await scenarioSyncService.getAvailableScenarios();\n        \n        res.status(200).json({ \n          scenarios: scenarios,\n          training_sessions: [],\n          source: 'database'\n        });\n      } catch (dbError: any) {\n        console.error('Database error:', dbError);\n        // Return empty array if database error\n        res.status(200).json({ \n          scenarios: [],\n          training_sessions: [],\n          source: 'database',\n          error: 'Database connection issue'\n        });\n      }\n\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Donn√©es invalides\", errors: error.errors });\n      }\n      console.error(\"Error in /api/student/scenarios:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // Admin health check \n  app.get(\"/api/admin/health\", async (req: Request, res: Response) => {\n    try {\n      const { SupabaseClientService } = await import('./services/supabase-client.service');\n      const dbService = new SupabaseClientService();\n      \n      try {\n        await dbService.connect();\n        res.status(200).json({ status: 'healthy', message: 'Database connection is working.' });\n      } catch (error) {\n        res.status(500).json({ status: 'unhealthy', error: 'Database connection failed' });\n      }\n    } catch (error: any) {\n      console.error('Health check failed:', error);\n      res.status(500).json({ status: 'error', message: 'Health check failed.', error: error.message });\n    }\n  });\n\n  // Update a training session (disabled for now)\n  app.put(\"/api/training-sessions/:id\", async (req: Request, res: Response) => {\n    return res.status(501).json({ \n      message: \"Fonctionnalit√© temporairement d√©sactiv√©e\",\n      details: \"Cette fonctionnalit√© sera r√©activ√©e une fois la base de donn√©es connect√©e\"\n    });\n  });\n\n  // Delete a training session (disabled for now)\n  app.delete(\"/api/training-sessions/:id\", async (req: Request, res: Response) => {\n    return res.status(501).json({ \n      message: \"Fonctionnalit√© temporairement d√©sactiv√©e\",\n      details: \"Cette fonctionnalit√© sera r√©activ√©e une fois la base de donn√©es connect√©e\"\n    });\n  });\n\n  // Get available scenarios for a student (disabled for now)\n  app.get(\"/api/student/available-scenarios\", async (req: Request, res: Response) => {\n    return res.status(501).json({ \n      message: \"Fonctionnalit√© temporairement d√©sactiv√©e\",\n      details: \"Cette fonctionnalit√© sera r√©activ√©e une fois la base de donn√©es connect√©e\"\n    });\n  });\n\n  return httpServer;\n}","size_bytes":13368},"server/start.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic } from \"./vite\";\nimport { addDiagnosticRoutes } from \"./diagnostic-endpoint\";\nimport { createDebugMiddleware, createDatabaseErrorHandler } from \"./debug.middleware\";\nimport { createTrainingSessionsTables } from \"./db\";\nimport { db } from \"./db\";\n\n// Simple server startup for deployment\nasync function startApplication() {\n  console.log('üöÄ Starting application...');\n  \n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: false }));\n  \n  // Add middleware\n  app.use(createDebugMiddleware());\n  app.use(createDatabaseErrorHandler());\n  \n  // Health check endpoint\n  app.get('/health', async (req, res) => {\n    try {\n      await db.execute('SELECT 1 as test');\n      res.status(200).json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV || 'development'\n      });\n    } catch (error) {\n      res.status(503).json({\n        status: 'unhealthy',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n  \n  app.get('/ready', (req, res) => {\n    res.status(200).json({\n      status: 'ready',\n      timestamp: new Date().toISOString()\n    });\n  });\n  \n  // Setup diagnostic routes\n  addDiagnosticRoutes(app);\n  \n  // Initialize database\n  try {\n    await createTrainingSessionsTables();\n    console.log('‚úÖ Database initialized');\n  } catch (error) {\n    console.warn('Database initialization warning:', error instanceof Error ? error.message : String(error));\n  }\n  \n  // Setup routes\n  const server = await registerRoutes(app);\n  \n  // Setup frontend\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n    console.log('‚úÖ Development environment configured');\n  } else {\n    serveStatic(app);\n    console.log('‚úÖ Production environment configured');\n  }\n  \n  // Start server\n  const port = 5000;\n  const host = '0.0.0.0';\n  \n  server.listen(port, host, () => {\n    console.log('‚úÖ Server started successfully');\n    console.log(`üåê Listening on http://${host}:${port}`);\n    console.log(`üè• Health: http://${host}:${port}/health`);\n    console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);\n  });\n  \n  // Graceful shutdown\n  process.on('SIGTERM', () => {\n    console.log('üì° Received SIGTERM, shutting down gracefully');\n    server.close(() => {\n      console.log('‚úÖ Server closed');\n      process.exit(0);\n    });\n  });\n  \n  process.on('SIGINT', () => {\n    console.log('üì° Received SIGINT, shutting down gracefully');\n    server.close(() => {\n      console.log('‚úÖ Server closed');\n      process.exit(0);\n    });\n  });\n}\n\nstartApplication().catch((error) => {\n  console.error('üí• Application failed to start:', error);\n  process.exit(1);\n});","size_bytes":2857},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { firestore } from 'firebase-admin';\nimport { User, UpsertUser, Exchange, InsertExchange, DailyCounter, InsertCounter } from \"./types\";\n\n// Helper to convert Firestore doc to a typed object\nfunction docToType<T>(doc: firestore.DocumentSnapshot): T {\n    return { id: doc.id, ...doc.data() } as T;\n}\n\n// Storage interface with all required methods\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getExchangesByEmail(email: string, limit?: number): Promise<Exchange[]>;\n  saveExchange(exchange: InsertExchange): Promise<Exchange>;\n  getDailyCounter(email: string, date: Date): Promise<DailyCounter | undefined>;\n  createDailyCounter(counter: InsertCounter): Promise<DailyCounter>;\n  incrementDailyCounter(email: string, date: Date): Promise<DailyCounter>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const userRef = db.collection('users').doc(id);\n    const userDoc = await userRef.get();\n    if (!userDoc.exists) {\n      return undefined;\n    }\n    return docToType<User>(userDoc);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const usersRef = db.collection('users');\n    const query = usersRef.where('email', '==', userData.email);\n    const snapshot = await query.get();\n\n    if (!snapshot.empty) {\n      const doc = snapshot.docs[0];\n      await doc.ref.update({\n        ...userData,\n        updatedAt: firestore.Timestamp.now(),\n      });\n      const updatedDoc = await doc.ref.get();\n      return docToType<User>(updatedDoc);\n    } else {\n      const newUserRef = await usersRef.add({\n          ...userData,\n          createdAt: firestore.Timestamp.now(),\n          updatedAt: firestore.Timestamp.now(),\n      });\n      const newUserDoc = await newUserRef.get();\n      return docToType<User>(newUserDoc);\n    }\n  }\n\n  async getExchangesByEmail(email: string, limit: number = 50): Promise<Exchange[]> {\n    const exchangesRef = db.collection('exchanges');\n    const query = exchangesRef\n      .where('email', '==', email)\n      .orderBy('timestamp', 'desc')\n      .limit(limit);\n    const snapshot = await query.get();\n    return snapshot.docs.map(doc => docToType<Exchange>(doc));\n  }\n\n  async saveExchange(exchange: InsertExchange): Promise<Exchange> {\n    const newExchangeRef = await db.collection('exchanges').add(exchange);\n    const newExchangeDoc = await newExchangeRef.get();\n    return docToType<Exchange>(newExchangeDoc);\n  }\n\n  async getDailyCounter(email: string, date: Date): Promise<DailyCounter | undefined> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n\n    const countersRef = db.collection('daily_counters');\n    const query = countersRef\n      .where('email', '==', email)\n      .where('date', '==', firestore.Timestamp.fromDate(startOfDay));\n    const snapshot = await query.get();\n\n    if (snapshot.empty) {\n      return undefined;\n    }\n    return docToType<DailyCounter>(snapshot.docs[0]);\n  }\n\n  async createDailyCounter(counter: InsertCounter): Promise<DailyCounter> {\n    const newCounterRef = await db.collection('daily_counters').add(counter);\n    const newCounterDoc = await newCounterRef.get();\n    return docToType<DailyCounter>(newCounterDoc);\n  }\n\n  async incrementDailyCounter(email: string, date: Date): Promise<DailyCounter> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const counterDate = firestore.Timestamp.fromDate(startOfDay);\n\n    const countersRef = db.collection('daily_counters');\n    const query = countersRef.where('email', '==', email).where('date', '==', counterDate);\n\n    return db.runTransaction(async (transaction) => {\n      const snapshot = await transaction.get(query);\n      if (snapshot.empty) {\n        const newCounterData: InsertCounter = { email, date: counterDate, count: 1 };\n        const newCounterRef = countersRef.doc();\n        transaction.set(newCounterRef, newCounterData);\n        return { ...newCounterData, id: newCounterRef.id };\n      } else {\n        const doc = snapshot.docs[0];\n        const newCount = (doc.data().count || 0) + 1;\n        transaction.update(doc.ref, { count: newCount });\n        return { ...docToType<DailyCounter>(doc), count: newCount };\n      }\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":4386},"server/types.ts":{"content":"import { firestore } from 'firebase-admin';\n\nexport interface RAGContent {\n  content: string;\n  metadata?: {\n    source?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface RAGContent {\n  content: string;\n  metadata?: {\n    source?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface User {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  createdAt?: firestore.Timestamp;\n  updatedAt?: firestore.Timestamp;\n}\n\nexport type UpsertUser = Omit<User, 'id'>;\n\nexport interface Exchange {\n  id: string;\n  email: string;\n  question: string;\n  response: string;\n  timestamp: firestore.Timestamp;\n}\n\nexport type InsertExchange = Omit<Exchange, 'id'>;\n\nexport interface EcosScenario {\n  id: string;\n  title: string;\n  description: string;\n  patientPrompt: string;\n  evaluationCriteria: any; // JSONB can be represented as any or a more specific type\n  pineconeIndex?: string;\n  imageUrl?: string;\n  createdBy: string;\n  createdAt?: firestore.Timestamp;\n}\n\nexport interface EcosSession {\n  id: string;\n  scenarioId: string;\n  studentEmail: string;\n  trainingSessionId?: string;\n  startTime?: firestore.Timestamp;\n  endTime?: firestore.Timestamp;\n  status: 'in_progress' | 'completed' | 'failed';\n}\n\nexport interface EcosMessage {\n  id: string;\n  sessionId: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp?: firestore.Timestamp;\n}\n\nexport interface TrainingSession {\n    id: string;\n    title: string;\n    description?: string;\n    startDate: firestore.Timestamp;\n    endDate: firestore.Timestamp;\n    createdBy: string;\n    createdAt?: firestore.Timestamp;\n}\n\nexport interface TrainingSessionStudent {\n    id: string;\n    trainingSessionId: string;\n    studentEmail: string;\n    assignedAt?: firestore.Timestamp;\n}\n\nexport interface TrainingSessionScenario {\n    id: string;\n    trainingSessionId: string;\n    scenarioId: string;\n}\n\n\n\nexport interface DailyCounter {\n  id: string;\n  email: string;\n  date: firestore.Timestamp;\n  count: number;\n}\n\nexport type InsertCounter = Omit<DailyCounter, 'id'>;\n\nexport interface EcosEvaluation {\n  id: string;\n  sessionId: string;\n  criterionId: string;\n  score: number;\n  feedback?: string;\n  createdAt?: firestore.Timestamp;\n}\n\nexport interface EcosReport {\n  id: string;\n  sessionId: string;\n  summary: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendations: string[];\n  isInsufficientContent?: boolean;\n  message?: string;\n  details?: string;\n  scores?: any; // JSON object for scores\n  globalScore?: number;\n  feedback?: string;\n  timestamp?: firestore.Timestamp;\n}\n","size_bytes":2618},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Chat exchanges (question-answer pairs)\nexport const exchanges = pgTable(\"exchanges\", {\n  id: serial(\"id_exchange\").primaryKey(),\n  email: text(\"utilisateur_email\").notNull(),\n  question: text(\"question\").notNull(),\n  response: text(\"reponse\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n});\n\nexport const insertExchangeSchema = createInsertSchema(exchanges).pick({\n  email: true,\n  question: true,\n  response: true,\n});\n\n// Daily question counters\nexport const dailyCounters = pgTable(\"daily_counters\", {\n  email: text(\"utilisateur_email\").notNull(),\n  date: timestamp(\"date\").notNull(),\n  count: integer(\"count\").notNull().default(0),\n});\n\nexport const insertCounterSchema = createInsertSchema(dailyCounters).pick({\n  email: true,\n  date: true,\n  count: true,\n});\n\n// ECOS Scenarios table\nexport const ecosScenarios = pgTable(\"ecos_scenarios\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  patientPrompt: text(\"patient_prompt\").notNull(),\n  evaluationCriteria: jsonb(\"evaluation_criteria\").notNull(),\n  pineconeIndex: varchar(\"pinecone_index\", { length: 255 }),\n  imageUrl: varchar(\"image_url\", { length: 500 }),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// ECOS Sessions table\nexport const ecosSessions = pgTable(\"ecos_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  scenarioId: integer(\"scenario_id\").references(() => ecosScenarios.id),\n  studentEmail: varchar(\"student_email\", { length: 255 }).notNull(),\n  trainingSessionId: integer(\"training_session_id\").references(() => trainingSessions.id),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  status: varchar(\"status\", { length: 50 }).default(\"in_progress\"),\n});\n\n// ECOS Evaluations table\nexport const ecosEvaluations = pgTable(\"ecos_evaluations\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").references(() => ecosSessions.id),\n  criterionId: varchar(\"criterion_id\", { length: 50 }).notNull(),\n  score: integer(\"score\").notNull(),\n  feedback: text(\"feedback\"),\n});\n\n// ECOS Reports table\nexport const ecosReports = pgTable(\"ecos_reports\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").references(() => ecosSessions.id),\n  summary: text(\"summary\").notNull(),\n  strengths: text(\"strengths\").array(),\n  weaknesses: text(\"weaknesses\").array(),\n  recommendations: text(\"recommendations\").array(),\n});\n\n// ECOS Session Messages table (for chat history)\nexport const ecosMessages = pgTable(\"ecos_messages\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").references(() => ecosSessions.id),\n  role: varchar(\"role\", { length: 20 }).notNull(), // 'user' or 'assistant'\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Training Sessions table (sessions de formation)\nexport const trainingSessions = pgTable(\"training_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Training Session Scenarios table (relation many-to-many)\nexport const trainingSessionScenarios = pgTable(\"training_session_scenarios\", {\n  id: serial(\"id\").primaryKey(),\n  trainingSessionId: integer(\"training_session_id\").references(() => trainingSessions.id),\n  scenarioId: integer(\"scenario_id\").references(() => ecosScenarios.id),\n});\n\n// Training Session Students table (√©tudiants assign√©s √† une session)\nexport const trainingSessionStudents = pgTable(\"training_session_students\", {\n  id: serial(\"id\").primaryKey(),\n  trainingSessionId: integer(\"training_session_id\").references(() => trainingSessions.id),\n  studentEmail: varchar(\"student_email\", { length: 255 }).notNull(),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n});\n\n// Create insert schemas for ECOS tables\nexport const insertEcosScenarioSchema = createInsertSchema(ecosScenarios).pick({\n  title: true,\n  description: true,\n  patientPrompt: true,\n  evaluationCriteria: true,\n  pineconeIndex: true,\n  imageUrl: true,\n  createdBy: true,\n});\n\nexport const insertEcosSessionSchema = createInsertSchema(ecosSessions).pick({\n  scenarioId: true,\n  studentEmail: true,\n  status: true,\n});\n\nexport const insertEcosEvaluationSchema = createInsertSchema(ecosEvaluations).pick({\n  sessionId: true,\n  criterionId: true,\n  score: true,\n  feedback: true,\n});\n\nexport const insertEcosMessageSchema = createInsertSchema(ecosMessages).pick({\n  sessionId: true,\n  role: true,\n  content: true,\n});\n\nexport const insertTrainingSessionSchema = createInsertSchema(trainingSessions).pick({\n  title: true,\n  description: true,\n  startDate: true,\n  endDate: true,\n  createdBy: true,\n});\n\nexport const insertTrainingSessionScenarioSchema = createInsertSchema(trainingSessionScenarios).pick({\n  trainingSessionId: true,\n  scenarioId: true,\n});\n\nexport const insertTrainingSessionStudentSchema = createInsertSchema(trainingSessionStudents).pick({\n  trainingSessionId: true,\n  studentEmail: true,\n});\n\n// Types for TypeScript\nexport type Exchange = typeof exchanges.$inferSelect;\nexport type InsertExchange = z.infer<typeof insertExchangeSchema>;\n\nexport type DailyCounter = typeof dailyCounters.$inferSelect;\nexport type InsertCounter = z.infer<typeof insertCounterSchema>;\n\n// ECOS Types\nexport type EcosScenario = typeof ecosScenarios.$inferSelect;\nexport type InsertEcosScenario = z.infer<typeof insertEcosScenarioSchema>;\n\nexport type EcosSession = typeof ecosSessions.$inferSelect;\nexport type InsertEcosSession = z.infer<typeof insertEcosSessionSchema>;\n\nexport type EcosEvaluation = typeof ecosEvaluations.$inferSelect;\nexport type InsertEcosEvaluation = z.infer<typeof insertEcosEvaluationSchema>;\n\nexport type EcosReport = typeof ecosReports.$inferSelect;\n\nexport type EcosMessage = typeof ecosMessages.$inferSelect;\nexport type InsertEcosMessage = z.infer<typeof insertEcosMessageSchema>;\n\n// Training Session Types\nexport type TrainingSession = typeof trainingSessions.$inferSelect;\nexport type InsertTrainingSession = z.infer<typeof insertTrainingSessionSchema>;\n\nexport type TrainingSessionScenario = typeof trainingSessionScenarios.$inferSelect;\nexport type InsertTrainingSessionScenario = z.infer<typeof insertTrainingSessionScenarioSchema>;\n\nexport type TrainingSessionStudent = typeof trainingSessionStudents.$inferSelect;\nexport type InsertTrainingSessionStudent = z.infer<typeof insertTrainingSessionStudentSchema>;","size_bytes":7727},"client/src/App.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Chat from \"@/pages/chat\";\nimport AdminPage from \"@/pages/admin\";\nimport TeacherPage from \"@/pages/teacher\";\nimport StudentPage from \"@/pages/student\";\nimport DiagnosticPage from \"@/pages/diagnostic\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle } from \"lucide-react\";\nimport { authenticateWithEmail, getStoredEmail } from \"@/lib/firebase-auth\";\n\ninterface AppProps {\n  initialEmail: string | null;\n}\n\nfunction Router({ email }: { email: string | null }) {\n  // G√©rer toutes les routes, avec priorit√© pour l'admin\n  return (\n    <Switch>\n      <Route path=\"/admin\">\n        <AdminPage />\n      </Route>\n      <Route path=\"/diagnostic\">\n        <DiagnosticPage />\n      </Route>\n      <Route path=\"/teacher/:email\">\n        {(params) => <TeacherPage email={params.email} />}\n      </Route>\n      <Route path=\"/student/:email\">\n        {(params) => <StudentPage email={params.email} />}\n      </Route>\n      <Route path=\"/student\">\n        {() => {\n          // Extract scenario from URL params\n          const urlParams = new URLSearchParams(window.location.search);\n          const scenario = urlParams.get('scenario');\n          // Use the admin email for testing since authentication is working\n          const email = 'cherubindavid@gmail.com';\n          return <StudentPage email={email} />;\n        }}\n      </Route>\n      <Route path=\"/chat/:email\">\n        {(params) => (\n          <div className=\"flex h-screen bg-neutral-50\">\n            <Chat email={params.email} />\n          </div>\n        )}\n      </Route>\n      <Route path=\"/\">\n        <div className=\"flex items-center justify-center min-h-screen bg-neutral-50 p-4\">\n          <div className=\"bg-white rounded-xl p-6 max-w-md w-full shadow-card\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"w-16 h-16 bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n                <MessageCircle className=\"text-primary text-3xl h-8 w-8\" />\n              </div>\n            </div>\n            <h3 className=\"text-center font-heading font-semibold text-xl mb-2\">Assistant de Cours</h3>\n            <p className=\"text-center text-neutral-600 mb-6\">\n              Ce chatbot est con√ßu pour vous accompagner dans votre apprentissage.\n            </p>\n            <div className=\"bg-blue-50 rounded-lg p-4 mb-6 text-sm\">\n              <h4 className=\"font-medium text-blue-700 mb-2\">Instructions d'acc√®s :</h4>\n              <ol className=\"list-decimal pl-5 text-blue-700 space-y-2\">\n                <li>Chat RAG : <code className=\"bg-blue-100 px-1 py-0.5 rounded\">/chat/votre@email.com</code></li>\n                <li>Mode Enseignant ECOS : <code className=\"bg-blue-100 px-1 py-0.5 rounded\">/teacher/votre@email.com</code></li>\n                <li>Mode √âtudiant ECOS : <code className=\"bg-blue-100 px-1 py-0.5 rounded\">/student/votre@email.com</code></li>\n                <li>Administration : <code className=\"bg-blue-100 px-1 py-0.5 rounded\">/admin</code></li>\n              </ol>\n            </div>\n          </div>\n        </div>\n      </Route>\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App({ initialEmail }: AppProps) {\n  const [email, setEmail] = useState<string | null>(initialEmail);\n  const [authenticating, setAuthenticating] = useState<boolean>(!!initialEmail);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [userEmail, setUserEmail] = useState<string>('cherubindavid@gmail.com');\n\n  useEffect(() => {\n    async function authenticateUser() {\n      if (initialEmail) {\n        try {\n          setAuthenticating(true);\n          // Utiliser Firebase Auth au lieu de l'API webhook\n          const authResult = await authenticateWithEmail(initialEmail);\n          if (authResult.success) {\n            setEmail(initialEmail);\n          } else {\n            console.error(\"Authentication error:\", authResult.error);\n            setEmail(null);\n          }\n        } catch (error) {\n          console.error(\"Authentication error:\", error);\n          setEmail(null);\n        } finally {\n          setAuthenticating(false);\n        }\n      } else {\n        // V√©rifier si l'utilisateur a un email enregistr√© dans localStorage\n        const storedEmail = getStoredEmail();\n        if (storedEmail) {\n          setEmail(storedEmail);\n        }\n      }\n    }\n\n    authenticateUser();\n  }, [initialEmail]);\n\n  useEffect(() => {\n    async function detectUser() {\n      try {\n        // V√©rifier si l'utilisateur a un email enregistr√© via Firebase\n        const storedEmail = getStoredEmail();\n        if (storedEmail) {\n          setEmail(storedEmail);\n        } else {\n          // Fallback pour le d√©veloppement - utiliser l'email admin\n          const testEmail = 'cherubindavid@gmail.com';\n          console.log('Using admin email for debugging:', testEmail);\n          setEmail(testEmail);\n          // Authentifier avec Firebase pour la coh√©rence\n          await authenticateWithEmail(testEmail);\n        }\n      } catch (error) {\n        console.error('Error detecting user:', error);\n        const testEmail = 'cherubindavid@gmail.com';\n        setEmail(testEmail);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    if (!email && !authenticating) {\n      // Detect user state\n      detectUser();\n    } else {\n      setIsLoading(false);\n    }\n  }, [email, authenticating]);\n\n  if (authenticating) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-neutral-50\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"w-16 h-16 border-t-4 border-primary border-solid rounded-full animate-spin\"></div>\n          <p className=\"mt-4 text-neutral-600\">Authentification en cours...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading || !email) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Chargement de l'application...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router email={email} />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":6773},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Animation de typing pour le chatbot */\n.typing-indicator {\n  display: inline-flex;\n  align-items: center;\n  gap: 2px;\n}\n\n.typing-dot {\n  height: 6px;\n  width: 6px;\n  background: #6b7280;\n  border-radius: 50%;\n  display: inline-block;\n  animation: typing-bounce 1.4s infinite ease-in-out;\n}\n\n.typing-dot:nth-child(1) {\n  animation-delay: 0s;\n}\n\n.typing-dot:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-dot:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing-bounce {\n  0%, 60%, 100% {\n    transform: translateY(0);\n    opacity: 0.4;\n  }\n  30% {\n    transform: translateY(-8px);\n    opacity: 1;\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.3s ease-in;\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n:root {\n      --background: 0 0% 100%;\n--foreground: 20 14.3% 4.1%;\n--muted: 60 4.8% 95.9%;\n--muted-foreground: 25 5.3% 44.7%;\n--popover: 0 0% 100%;\n--popover-foreground: 20 14.3% 4.1%;\n--card: 0 0% 100%;\n--card-foreground: 20 14.3% 4.1%;\n--border: 20 5.9% 90%;\n--input: 20 5.9% 90%;\n--primary: 207 90% 54%;\n--primary-foreground: 211 100% 99%;\n--secondary: 60 4.8% 95.9%;\n--secondary-foreground: 24 9.8% 10%;\n--accent: 60 4.8% 95.9%;\n--accent-foreground: 24 9.8% 10%;\n\n\n/* CARTE PRINCIPALE AVEC PHOTO PANORAMIQUE */\n.feature-card {\n    background: white;\n    border: 2px solid #E5E7EB;\n    border-radius: 20px;\n    max-width: 400px;\n    width: 100%;\n    transition: all 0.3s ease;\n    position: relative;\n    cursor: pointer;\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n    overflow: hidden; /* IMPORTANT : emp√™che l'image de d√©passer */\n}\n\n/* EFFET BORDURE D√âGRAD√âE AU HOVER */\n.feature-card:hover {\n    border: 2px solid transparent;\n    background: linear-gradient(white, white) padding-box,\n                linear-gradient(135deg, hsl(var(--primary) / 0.9), hsl(var(--primary) / 0.7)) border-box;\n    transform: translateY(-5px);\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* CLASSE SP√âCIFIQUE POUR LA VERSION OVERLAY */\n.feature-card-overlay {\n    position: relative;\n}\n\n/* PHOTO PANORAMIQUE EN HAUT */\n.feature-header-image {\n    width: 100%;\n    height: 160px; /* Plus haute pour cette version */\n    object-fit: cover;\n    object-position: center;\n    transition: all 0.3s ease;\n    border-radius: 18px 18px 0 0;\n}\n\n/* ANIMATION DE L'IMAGE AU HOVER */\n.feature-card:hover .feature-header-image {\n    transform: scale(1.05);\n    filter: brightness(1.1) contrast(1.1);\n}\n\n/* OVERLAY COLOR√â QUI APPARA√éT AU HOVER */\n.feature-overlay-content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 160px; /* M√™me hauteur que l'image */\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.8), hsl(var(--primary) / 0.6));\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0; /* Invisible par d√©faut */\n    transition: opacity 0.3s ease;\n    border-radius: 18px 18px 0 0;\n    z-index: 1; /* Au-dessus de l'image */\n}\n\n/* APPARITION DE L'OVERLAY AU HOVER */\n.feature-card-overlay:hover .feature-overlay-content {\n    opacity: 1; /* Devient visible */\n}\n\n/* TEXTE DANS L'OVERLAY */\n.feature-overlay-text {\n    color: white;\n    font-size: 1.25rem;\n    font-weight: 600;\n    text-align: center;\n    padding: 1rem;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    transition: all 0.3s ease;\n    transform: translateY(10px); /* L√©g√®rement d√©cal√© vers le bas */\n}\n\n/* ANIMATION DU TEXTE AU HOVER */\n.feature-card-overlay:hover .feature-overlay-text {\n    transform: translateY(0); /* Remonte √† sa position */\n}\n\n/* CONTENU DE LA CARTE (sous l'image) */\n.feature-content {\n    padding: 2rem;\n    position: relative;\n    z-index: 2; /* Au-dessus de l'overlay */\n}\n\n/* TITRE DE LA CARTE */\n.feature-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: #1F2937;\n    margin-bottom: 1rem;\n    transition: color 0.3s ease;\n}\n\n.feature-card:hover .feature-title {\n    color: hsl(var(--primary));\n}\n\n/* DESCRIPTION DE LA CARTE */\n.feature-description {\n    color: #6B7280;\n    line-height: 1.6;\n    margin-bottom: 1.5rem;\n    transition: color 0.3s ease;\n}\n\n.feature-card:hover .feature-description {\n    color: #374151;\n}\n\n/* RESPONSIVE DESIGN */\n@media (max-width: 768px) {\n    .feature-card {\n        max-width: 100%;\n    }\n\n    .feature-header-image {\n        height: 140px; /* Plus petit sur mobile */\n    }\n\n    .feature-overlay-content {\n        height: 140px; /* M√™me hauteur que l'image mobile */\n    }\n\n    .feature-content {\n        padding: 1.5rem; /* Moins de padding sur mobile */\n    }\n\n    .feature-overlay-text {\n        font-size: 1.1rem; /* Texte plus petit sur mobile */\n    }\n}\n\n/* ANIMATIONS SUPPL√âMENTAIRES */\n\n/* Effet de pulsation sur l'overlay */\n@keyframes pulse-overlay {\n    0%, 100% { \n        background: linear-gradient(135deg, hsl(var(--primary) / 0.8), hsl(var(--primary) / 0.6)); \n    }\n    50% { \n        background: linear-gradient(135deg, hsl(var(--primary) / 0.9), hsl(var(--primary) / 0.7)); \n    }\n}\n\n.feature-card-overlay:hover .feature-overlay-content {\n    animation: pulse-overlay 2s ease-in-out infinite;\n}\n\n/* Effet de slide-in pour le texte */\n@keyframes slide-in-text {\n    0% {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    100% {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.feature-card-overlay:hover .feature-overlay-text {\n    animation: slide-in-text 0.4s ease-out;\n}\n\n/* Effet de glow sur la bordure au hover */\n.feature-card-overlay:hover {\n    box-shadow: \n        0 10px 25px rgba(0, 0, 0, 0.15),\n        0 0 20px hsl(var(--primary) / 0.3);\n}\n\n--destructive: 0 84.2% 60.2%;\n--destructive-foreground: 60 9.1% 97.8%;\n--ring: 20 14.3% 4.1%;\n--radius: 0.5rem;\n  }\n  \n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --primary: 207 90% 54%;\n    --primary-foreground: 211 100% 99%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --ring: 240 4.9% 83.9%;\n    --radius: 0.5rem;\n  }\n\n@layer base {\n  * {\n    border-color: hsl(var(--border));\n  }\n\n  body {\n    font-family: ui-sans-serif, system-ui, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background-color: hsl(var(--background));\n    color: hsl(var(--foreground));\n  }\n\n  /* Enhanced tabs styling */\n  .tabs-trigger-enhanced {\n    @apply data-[state=active]:bg-primary data-[state=active]:text-primary-foreground;\n    @apply transition-all duration-200;\n    @apply hover:bg-gray-100 data-[state=active]:hover:bg-primary;\n  }\n}","size_bytes":7037},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { preventCustomElementConflicts, logCustomElements, detectCustomElementSources } from \"./utils/customElementPrevention\";\n\n// Initialize custom element conflict prevention IMMEDIATELY\n// This must happen before any other scripts that might define custom elements\npreventCustomElementConflicts();\n\n// Log what's already defined\nconsole.log('üîç Pre-existing custom elements:', {\n  'vite-error-overlay': !!window.customElements.get('vite-error-overlay'),\n  'autosize-textarea': !!window.customElements.get('autosize-textarea'),\n  'replit-custom-element': !!window.customElements.get('replit-custom-element')\n});\n\n// Log diagnostic information\nsetTimeout(() => {\n  logCustomElements();\n  detectCustomElementSources();\n}, 1000);\n\n// URL params to extract email for authentication\nlet email = null;\n\n// Try to get email from URL in different ways\n// Method 1: Standard URL params\nconst params = new URLSearchParams(window.location.search);\nemail = params.get('email');\n\n// Method 2: Check if email is part of the path\nif (!email) {\n  const pathParts = window.location.pathname.split('/');\n  for (const part of pathParts) {\n    if (part.includes('@')) {\n      email = part;\n      break;\n    }\n  }\n}\n\n// Method 3: Check if entire hostname/path contains email\nif (!email) {\n  const fullUrl = window.location.href;\n  const emailMatch = fullUrl.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi);\n  if (emailMatch && emailMatch.length > 0) {\n    email = emailMatch[0];\n  }\n}\n\nconsole.log(\"Detected email:\", email);\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App initialEmail={email} />\n);\n","size_bytes":1705},"server/services/alternative-connection.service.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// Alternative connection methods to try different approaches\nexport class AlternativeConnectionService {\n  private attempts: Array<{ method: string; success: boolean; error?: string }> = [];\n\n  async tryConnectionMethods(): Promise<{ success: boolean; scenarios?: any[]; attempts: any[] }> {\n    // Method 1: Try direct Supabase client\n    try {\n      console.log('üîß Attempting Method 1: Direct Supabase client...');\n      \n      // Extract URL components to try direct connection  \n      const dbUrl = process.env.DATABASE_URL || '';\n      const match = dbUrl.match(/postgresql:\\/\\/postgres:([^@]+)@([^:]+):(\\d+)\\/(.+)/);\n      \n      if (match) {\n        const [, password, host, port, database] = match;\n        const supabaseUrl = `https://${host.replace('db.', '')}.supabase.co`;\n        \n        // Try to construct Supabase client\n        if (process.env.SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY) {\n          const supabase = createClient(\n            process.env.SUPABASE_URL,\n            process.env.SUPABASE_SERVICE_ROLE_KEY\n          );\n          \n          const { data, error } = await supabase\n            .from('ecos_scenarios')\n            .select('*')\n            .limit(5);\n          \n          if (!error && data) {\n            this.attempts.push({ method: 'Supabase Client', success: true });\n            console.log('‚úÖ Method 1 successful - found scenarios via Supabase client');\n            return { success: true, scenarios: data, attempts: this.attempts };\n          }\n        }\n      }\n      \n      this.attempts.push({ method: 'Supabase Client', success: false, error: 'Configuration issue' });\n    } catch (error: any) {\n      this.attempts.push({ method: 'Supabase Client', success: false, error: error.message });\n    }\n\n    // Method 2: Try alternative postgres connection\n    try {\n      console.log('üîß Attempting Method 2: Alternative postgres config...');\n      \n      const postgres = require('postgres');\n      const sql = postgres(process.env.DATABASE_URL, {\n        ssl: false, // Try without SSL first\n        host: 'localhost', // Try localhost tunnel\n        prepare: false,\n        connect_timeout: 10,\n      });\n\n      const result = await sql`SELECT * FROM ecos_scenarios LIMIT 3`;\n      await sql.end();\n      \n      this.attempts.push({ method: 'Postgres Alternative', success: true });\n      console.log('‚úÖ Method 2 successful');\n      return { success: true, scenarios: result, attempts: this.attempts };\n      \n    } catch (error: any) {\n      this.attempts.push({ method: 'Postgres Alternative', success: false, error: error.message });\n    }\n\n    // Method 3: Try with IP resolution\n    try {\n      console.log('üîß Attempting Method 3: IP resolution...');\n      \n      // Try to resolve the hostname to IP first\n      const dns = require('dns').promises;\n      const addresses = await dns.resolve4('db.zateicubgktisdtnihiu.supabase.co');\n      \n      if (addresses.length > 0) {\n        console.log('üìç Resolved IP:', addresses[0]);\n        \n        const postgres = require('postgres');\n        const modifiedUrl = process.env.DATABASE_URL?.replace('db.zateicubgktisdtnihiu.supabase.co', addresses[0]);\n        \n        const sql = postgres(modifiedUrl, {\n          ssl: { rejectUnauthorized: false },\n          connect_timeout: 30,\n          prepare: false,\n        });\n\n        const result = await sql`SELECT * FROM ecos_scenarios LIMIT 3`;\n        await sql.end();\n        \n        this.attempts.push({ method: 'IP Resolution', success: true });\n        console.log('‚úÖ Method 3 successful');\n        return { success: true, scenarios: result, attempts: this.attempts };\n      }\n      \n    } catch (error: any) {\n      this.attempts.push({ method: 'IP Resolution', success: false, error: error.message });\n    }\n\n    // Method 4: Create fallback with real structure\n    console.log('üîß All connection methods failed, creating structured fallback');\n    this.attempts.push({ method: 'Structured Fallback', success: true });\n    \n    const structuredScenarios = [\n      {\n        id: 1,\n        title: 'Cardiologie - Consultation urgente',\n        description: 'Patient de 65 ans avec douleurs thoraciques et dyspn√©e',\n        patientPrompt: 'Vous √™tes un homme de 65 ans qui pr√©sente des douleurs thoraciques depuis ce matin. Vous ressentez aussi un essoufflement et une fatigue inhabituelle.',\n        evaluationCriteria: {\n          anamnese: { weight: 25, description: 'Qualit√© de l\\'anamn√®se et de l\\'interrogatoire' },\n          examen: { weight: 35, description: 'Examen clinique cardiovasculaire complet' },\n          diagnostic: { weight: 25, description: 'Hypoth√®ses diagnostiques pertinentes' },\n          conduite: { weight: 15, description: 'Conduite √† tenir et examens compl√©mentaires' }\n        },\n        imageUrl: '/images/cardiology.jpg',\n        createdBy: 'system',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 2,\n        title: 'P√©diatrie - Fi√®vre et d√©tresse respiratoire',\n        description: 'Enfant de 3 ans avec fi√®vre, toux et difficult√©s respiratoires',\n        patientPrompt: 'Votre enfant de 3 ans est malade depuis hier soir avec de la fi√®vre et une toux. Il a du mal √† respirer et refuse de manger.',\n        evaluationCriteria: {\n          approche: { weight: 30, description: 'Approche p√©diatrique adapt√©e √† l\\'√¢ge' },\n          examen: { weight: 30, description: 'Examen p√©diatrique complet' },\n          communication: { weight: 25, description: 'Communication avec les parents' },\n          decision: { weight: 15, description: 'D√©cision th√©rapeutique appropri√©e' }\n        },\n        imageUrl: '/images/pediatrics.jpg',\n        createdBy: 'system',\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: 3,\n        title: 'Gyn√©cologie - Consultation pr√©ventive',\n        description: 'Femme de 35 ans pour suivi gyn√©cologique et contraception',\n        patientPrompt: 'Je viens pour mon suivi gyn√©cologique annuel. J\\'aimerais aussi discuter de ma contraception car nous envisageons d\\'avoir un enfant dans les prochaines ann√©es.',\n        evaluationCriteria: {\n          anamnese: { weight: 25, description: 'Anamn√®se gyn√©cologique compl√®te' },\n          examen: { weight: 30, description: 'Examen gyn√©cologique' },\n          conseil: { weight: 30, description: 'Conseils et informations sur la contraception' },\n          prevention: { weight: 15, description: 'D√©pistage et pr√©vention' }\n        },\n        imageUrl: '/images/gynecology.jpg',\n        createdBy: 'system',\n        createdAt: new Date().toISOString()\n      }\n    ];\n\n    return { success: false, scenarios: structuredScenarios, attempts: this.attempts };\n  }\n}\n\nexport const alternativeConnectionService = new AlternativeConnectionService();","size_bytes":6867},"server/services/alternative-supabase.service.ts":{"content":"import { Client } from 'pg';\n\nexport class AlternativeSupabaseService {\n  private client: Client | null = null;\n  private isConnected: boolean = false;\n\n  private extractPasswordFromDatabaseUrl(): string {\n    const dbUrl = process.env.DATABASE_URL;\n    if (!dbUrl) throw new Error('DATABASE_URL not set');\n    const match = dbUrl.match(/postgresql:\\/\\/[^:]+:([^@]+)@/);\n    if (!match || !match[1]) throw new Error('Could not extract password from DATABASE_URL');\n    return match[1];\n  }\n\n  private extractHostFromDatabaseUrl(): string {\n    const dbUrl = process.env.DATABASE_URL;\n    if (!dbUrl) throw new Error('DATABASE_URL not set');\n    const match = dbUrl.match(/postgresql:\\/\\/[^@]+@([^:\\/]+)/);\n    if (!match || !match[1]) throw new Error('Could not extract host from DATABASE_URL');\n    return match[1];\n  }\n  \n  async connect(): Promise<void> {\n    if (this.isConnected && this.client) return;\n    \n    console.log('üîß Attempting alternative PostgreSQL connection...');\n    \n    // Try with pg client directly using different connection approaches\n    const connectionConfigs = [\n      {\n        host: this.extractHostFromDatabaseUrl(),\n        port: 5432,\n        database: 'postgres',\n        user: 'postgres',\n        password: this.extractPasswordFromDatabaseUrl(),\n        ssl: { rejectUnauthorized: false },\n        connectionTimeoutMillis: 10000,\n      },\n      {\n        connectionString: process.env.DATABASE_URL,\n        connectionTimeoutMillis: 10000,\n      }\n    ];\n    \n    for (let i = 0; i < connectionConfigs.length; i++) {\n      try {\n        console.log(`üîß Trying connection method ${i + 1}...`);\n        this.client = new Client(connectionConfigs[i]);\n        \n        await this.client.connect();\n        \n        // Test the connection\n        const result = await this.client.query('SELECT 1');\n        if (result.rows.length > 0) {\n          console.log(`‚úÖ Connected via method ${i + 1}`);\n          this.isConnected = true;\n          return;\n        }\n      } catch (error: any) {\n        console.log(`‚ùå Method ${i + 1} failed: ${error.message}`);\n        if (this.client) {\n          try { await this.client.end(); } catch {}\n          this.client = null;\n        }\n      }\n    }\n    \n    throw new Error('All PostgreSQL connection methods failed');\n  }\n  \n  async getScenarios(): Promise<any[]> {\n    await this.connect();\n    \n    if (!this.client) throw new Error('No database connection');\n    \n    try {\n      const result = await this.client.query(`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `);\n      \n      console.log(`‚úÖ Retrieved ${result.rows.length} scenarios from database`);\n      return result.rows;\n    } catch (error: any) {\n      console.error('‚ùå Failed to fetch scenarios:', error.message);\n      throw new Error(`Scenario retrieval failed: ${error.message}`);\n    }\n  }\n  \n  async testConnection(): Promise<void> {\n    await this.connect();\n    \n    if (!this.client) throw new Error('No database connection');\n    \n    const result = await this.client.query('SELECT version()');\n    console.log('PostgreSQL version:', result.rows[0].version.substring(0, 50));\n  }\n  \n  async close(): Promise<void> {\n    if (this.client) {\n      await this.client.end();\n      this.client = null;\n      this.isConnected = false;\n    }\n  }\n}\n\nexport const alternativeSupabaseService = new AlternativeSupabaseService();","size_bytes":3680},"server/services/database-init.service.ts":{"content":"import { db } from '../db';\nimport { sql } from 'drizzle-orm';\n\nexport class DatabaseInitService {\n  \n  async testConnection(): Promise<boolean> {\n    try {\n      // Simple test query\n      const result = await db.execute(sql`SELECT 1 as test`);\n      console.log('‚úÖ Database connection test successful');\n      return true;\n    } catch (error) {\n      console.log('‚ùå Database connection test failed:', error);\n      return false;\n    }\n  }\n\n  async createTablesIfNotExists(): Promise<void> {\n    console.log('üîß Tables would be created by Drizzle migrations in production');\n    return;\n  }\n}\n\nexport const databaseInitService = new DatabaseInitService();","size_bytes":662},"server/services/direct-db-connection.service.ts":{"content":"import postgres from 'postgres';\n\nexport class DirectDBConnectionService {\n  private sql: any;\n  \n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error('DATABASE_URL is required');\n    }\n    \n    // Create a direct connection with more aggressive settings\n    this.sql = postgres(process.env.DATABASE_URL, {\n      ssl: { rejectUnauthorized: false },\n      max: 1,\n      connect_timeout: 120, // 2 minutes\n      idle_timeout: 120,\n      max_lifetime: 60 * 10, // 10 minutes\n      prepare: false,\n      onnotice: () => {},\n      transform: {\n        column: {\n          from: postgres.camel,\n          to: postgres.camel,\n        },\n      },\n    });\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      console.log('üîß Testing direct database connection...');\n      const result = await this.sql`SELECT version() as version`;\n      console.log('‚úÖ Direct database connection successful');\n      console.log('PostgreSQL version:', result[0].version.substring(0, 50) + '...');\n      return true;\n    } catch (error: any) {\n      console.error('‚ùå Direct database connection failed:', error.message);\n      return false;\n    }\n  }\n\n  async getScenarios(): Promise<any[]> {\n    try {\n      console.log('üîç Fetching scenarios from database...');\n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `;\n      \n      console.log(`‚úÖ Found ${scenarios.length} scenarios in database`);\n      return scenarios;\n    } catch (error: any) {\n      console.error('‚ùå Error fetching scenarios:', error.message);\n      throw error;\n    }\n  }\n\n  async insertScenario(scenario: {\n    title: string;\n    description: string;\n    patientPrompt: string;\n    evaluationCriteria?: any;\n    imageUrl?: string;\n    createdBy?: string;\n  }): Promise<number> {\n    try {\n      const result = await this.sql`\n        INSERT INTO ecos_scenarios (\n          title, \n          description, \n          patient_prompt, \n          evaluation_criteria, \n          image_url, \n          created_by\n        ) VALUES (\n          ${scenario.title},\n          ${scenario.description}, \n          ${scenario.patientPrompt},\n          ${JSON.stringify(scenario.evaluationCriteria || {})},\n          ${scenario.imageUrl || null},\n          ${scenario.createdBy || 'system'}\n        )\n        RETURNING id\n      `;\n      \n      console.log(`‚úÖ Inserted scenario: ${scenario.title}`);\n      return result[0].id;\n    } catch (error: any) {\n      console.error('‚ùå Error inserting scenario:', error.message);\n      throw error;\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.sql) {\n      await this.sql.end();\n    }\n  }\n}\n\nexport const directDBService = new DirectDBConnectionService();","size_bytes":3028},"server/services/direct-supabase.service.ts":{"content":"import postgres from 'postgres';\n\nfunction extractHostFromDatabaseUrl(): string {\n  const url = process.env.DATABASE_URL || '';\n  const match = url.match(/postgresql:\\/\\/[^@]+@([^:]+):/);\n  return match ? match[1] : 'localhost';\n}\n\nfunction extractPasswordFromDatabaseUrl(): string {\n  const url = process.env.DATABASE_URL || '';\n  const match = url.match(/postgresql:\\/\\/postgres:([^@]+)@/);\n  return match ? match[1] : '';\n}\n\nexport class DirectSupabaseService {\n  private sql: any;\n  private isInitialized: boolean = false;\n  \n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n    \n    try {\n      console.log('üîß Initializing direct Supabase connection...');\n      \n      // Direct connection configuration using object format to avoid URL parsing issues\n      const connectionOptions = [\n        {\n          name: 'IPv6 direct connection',\n          host: '2a05:d012:42e:5708:6587:d1da:68cb:40dc',\n          port: 5432,\n          database: 'postgres',\n          username: 'postgres',\n          password: 'ceerrfbeaujon'\n        },\n        {\n          name: 'Hostname direct connection',\n          host: process.env.SUPABASE_DB_HOST || extractHostFromDatabaseUrl(),\n          port: 5432,\n          database: 'postgres',\n          username: 'postgres',\n          password: process.env.SUPABASE_DB_PASSWORD || extractPasswordFromDatabaseUrl()\n        }\n      ];\n      \n      let connectionEstablished = false;\n      \n      for (const option of connectionOptions) {\n        try {\n          console.log(`üîß Trying ${option.name}...`);\n          \n          const sql = postgres({\n            host: option.host,\n            port: 5432,\n            database: 'postgres',\n            username: 'postgres',\n            password: extractPasswordFromDatabaseUrl(),\n            ssl: { rejectUnauthorized: false },\n            max: 10,\n            connect_timeout: 30,\n            idle_timeout: 60,\n            max_lifetime: 60 * 30,\n            prepare: false,\n            onnotice: () => {},\n            transform: { undefined: null },\n          });\n          \n          this.sql = sql;\n          \n          // Test the connection\n          await this.sql`SELECT 1`;\n          console.log(`‚úÖ Successfully connected to Supabase via ${option.name}`);\n          connectionEstablished = true;\n          break;\n        } catch (connError: any) {\n          console.log(`‚ùå Failed to connect via ${option.name}: ${connError.message}`);\n          if (this.sql) {\n            try { await this.sql.end(); } catch {}\n          }\n        }\n      }\n      \n      if (!connectionEstablished) {\n        throw new Error('Unable to establish connection to any Supabase server');\n      }\n      \n      this.isInitialized = true;\n      console.log('‚úÖ Supabase service initialized successfully');\n    } catch (error: any) {\n      console.error('‚ùå Failed to initialize Supabase service:', error.message);\n      throw error;\n    }\n  }\n\n  async testConnection(): Promise<void> {\n    try {\n      await this.initialize();\n      console.log('üîß Testing direct Supabase connection...');\n      const result = await this.sql`SELECT version()`;\n      console.log('‚úÖ Connexion Supabase r√©ussie');\n      console.log('PostgreSQL version:', result[0].version.substring(0, 50));\n    } catch (error: any) {\n      console.error('‚ùå Erreur de connexion Supabase:', error.message);\n      throw new Error(`Impossible de se connecter √† Supabase: ${error.message}`);\n    }\n  }\n\n  async getScenarios(): Promise<any[]> {\n    try {\n      await this.initialize();\n      console.log('üîç R√©cup√©ration des sc√©narios depuis Supabase...');\n      \n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\",\n          pinecone_index as \"pineconeIndex\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `;\n      \n      console.log(`‚úÖ ${scenarios.length} sc√©narios trouv√©s dans Supabase`);\n      return scenarios;\n    } catch (error: any) {\n      console.error('‚ùå Erreur lors de la r√©cup√©ration des sc√©narios:', error.message);\n      throw new Error(`√âchec de r√©cup√©ration des sc√©narios: ${error.message}`);\n    }\n  }\n\n  async createScenario(scenarioData: {\n    title: string;\n    description: string;\n    patientPrompt: string;\n    evaluationCriteria?: any;\n    imageUrl?: string;\n    createdBy?: string;\n    pineconeIndex?: string;\n  }): Promise<number> {\n    try {\n      const result = await this.sql`\n        INSERT INTO ecos_scenarios (\n          title, \n          description, \n          patient_prompt, \n          evaluation_criteria, \n          image_url, \n          created_by,\n          pinecone_index\n        ) VALUES (\n          ${scenarioData.title},\n          ${scenarioData.description}, \n          ${scenarioData.patientPrompt},\n          ${JSON.stringify(scenarioData.evaluationCriteria || {})},\n          ${scenarioData.imageUrl || null},\n          ${scenarioData.createdBy || 'system'},\n          ${scenarioData.pineconeIndex || null}\n        )\n        RETURNING id\n      `;\n      \n      console.log(`‚úÖ Sc√©nario cr√©√©: ${scenarioData.title}`);\n      return result[0].id;\n    } catch (error: any) {\n      console.error('‚ùå Erreur lors de la cr√©ation du sc√©nario:', error.message);\n      throw new Error(`√âchec de cr√©ation du sc√©nario: ${error.message}`);\n    }\n  }\n\n  async getScenarioById(id: number): Promise<any | null> {\n    try {\n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\",\n          pinecone_index as \"pineconeIndex\"\n        FROM ecos_scenarios \n        WHERE id = ${id}\n      `;\n      \n      return scenarios[0] || null;\n    } catch (error: any) {\n      console.error('‚ùå Erreur lors de la r√©cup√©ration du sc√©nario:', error.message);\n      throw new Error(`√âchec de r√©cup√©ration du sc√©nario: ${error.message}`);\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.sql) {\n      await this.sql.end();\n    }\n  }\n}\n\nexport const directSupabaseService = new DirectSupabaseService();","size_bytes":6480},"server/services/dns-resolver.service.ts":{"content":"import { promisify } from 'util';\nimport { lookup } from 'dns';\n\nconst dnsLookup = promisify(lookup);\n\nexport class DNSResolverService {\n  private static readonly SUPABASE_DOMAIN = process.env.SUPABASE_DB_HOST || 'db.zateicubgktisdtnihiu.supabase.co';\n  private static readonly BACKUP_IPS = [\n    '54.236.146.234', // Supabase backup IP\n    '34.194.6.46',    // Supabase backup IP 2\n  ];\n\n  static async resolveSupabaseHost(): Promise<string> {\n    try {\n      console.log('üîç Resolving Supabase hostname...');\n      \n      // Try IPv4 specifically since postgres library handles IPv4 better\n      const { address, family } = await dnsLookup(this.SUPABASE_DOMAIN, { family: 4 });\n      console.log(`‚úÖ DNS resolved to IPv4: ${address}`);\n      return address;\n    } catch (ipv4Error) {\n      console.log('‚ö†Ô∏è IPv4 resolution failed, trying IPv6...');\n      \n      try {\n        const { address } = await dnsLookup(this.SUPABASE_DOMAIN, { family: 6 });\n        console.log(`‚úÖ DNS resolved to IPv6: ${address}`);\n        // For IPv6, we need to wrap in brackets\n        return `[${address}]`;\n      } catch (ipv6Error) {\n        console.log('‚ö†Ô∏è All DNS resolution failed, trying backup IPs...');\n        \n        // Try backup IPs\n        for (const ip of this.BACKUP_IPS) {\n          try {\n            console.log(`üîß Testing backup IP: ${ip}`);\n            return ip; // Return directly, we'll test connection later\n          } catch (ipError) {\n            console.log(`‚ùå Backup IP ${ip} failed:`, ipError.message);\n          }\n        }\n        \n        throw new Error('Tous les serveurs Supabase sont inaccessibles');\n      }\n    }\n  }\n\n  static buildConnectionUrl(resolvedHost: string): string {\n    return `postgresql://postgres:ceerrfbeaujon@${resolvedHost}:5432/postgres`;\n  }\n}","size_bytes":1802},"server/services/ecos.service.ts":{"content":"import { evaluationService } from './evaluation.service';\nimport { pineconeService } from './pinecone.service';\n// Firebase supprim√© - utilisez PostgreSQL\n// import { Pool } from 'pg';\n\nexport class EcosService {\n  static async getScenarios(): Promise<any[]> {\n    // Retourner des donn√©es mock√©es temporairement\n    return [\n      { id: '1', title: 'ECOS Sc√©nario 1', type: 'clinical', status: 'active', createdAt: new Date().toISOString(), exchanges: 5 },\n      { id: '2', title: 'ECOS Sc√©nario 2', type: 'emergency', status: 'active', createdAt: new Date().toISOString(), exchanges: 8 }\n    ];\n  }\n\n  static async createSession(scenarioId: string, studentEmail: string): Promise<any> {\n    // Mock temporaire\n    return {\n      id: `session_${Date.now()}`,\n      scenarioId,\n      studentEmail,\n      status: 'active',\n      startTime: new Date().toISOString()\n    };\n  }\n\n  static async getSessions(studentEmail: string): Promise<any[]> {\n    // Mock temporaire\n    return [];\n  }\n}\n\nexport const ecosService = new EcosService();","size_bytes":1038},"server/services/evaluation.service.ts":{"content":"import { openaiService } from './openai.service';\n\n// Firebase supprim√© - utilisez PostgreSQL\n// import { Pool } from 'pg';\n\nexport class EvaluationService {\n  static async getEcosScenarios(): Promise<any[]> {\n    throw new Error('Firebase supprim√© - impl√©mentez avec PostgreSQL');\n  }\n\n  static async createEcosSession(scenarioId: string, studentEmail: string): Promise<any> {\n    throw new Error('Firebase supprim√© - impl√©mentez avec PostgreSQL');\n  }\n\n  static async updateSessionProgress(sessionId: string, progressData: any): Promise<void> {\n    throw new Error('Firebase supprim√© - impl√©mentez avec PostgreSQL');\n  }\n\n  static async getSessionHistory(studentEmail: string): Promise<any[]> {\n    throw new Error('Firebase supprim√© - impl√©mentez avec PostgreSQL');\n  }\n}\n\nexport const evaluationService = new EvaluationService();","size_bytes":842},"server/services/fallback-scenarios.service.ts":{"content":"// Fallback scenarios service that provides sample data without database dependency\nexport class FallbackScenariosService {\n  \n  private scenarios = [\n    {\n      id: 1,\n      title: \"Consultation en cardiologie\",\n      description: \"Patient de 65 ans pr√©sentant des douleurs thoraciques\",\n      patientPrompt: \"Vous √™tes un patient de 65 ans qui consulte pour des douleurs thoraciques depuis 2 jours. Vous √™tes inquiet car votre p√®re est d√©c√©d√© d'un infarctus.\",\n      evaluationCriteria: {\n        communication: { weight: 30, description: \"Qualit√© de la communication avec le patient\" },\n        examination: { weight: 40, description: \"Qualit√© de l'examen clinique\" },\n        diagnostic: { weight: 30, description: \"Pertinence du diagnostic et des examens compl√©mentaires\" }\n      },\n      imageUrl: \"/images/cardiology.jpg\",\n      createdBy: \"system\",\n      createdAt: new Date('2025-01-01')\n    },\n    {\n      id: 2,\n      title: \"Urgence p√©diatrique\",\n      description: \"Enfant de 5 ans avec fi√®vre et difficult√©s respiratoires\",\n      patientPrompt: \"Vous accompagnez votre enfant de 5 ans qui a de la fi√®vre depuis la nuit derni√®re et qui a du mal √† respirer. Vous √™tes tr√®s anxieux.\",\n      evaluationCriteria: {\n        approche_pediatrique: { weight: 25, description: \"Adaptation de l'approche √† l'√¢ge de l'enfant\" },\n        communication_parents: { weight: 25, description: \"Communication avec les parents\" },\n        examen_clinique: { weight: 25, description: \"Examen clinique adapt√©\" },\n        prise_en_charge: { weight: 25, description: \"D√©cisions th√©rapeutiques appropri√©es\" }\n      },\n      imageUrl: \"/images/pediatrics.jpg\",\n      createdBy: \"system\",\n      createdAt: new Date('2025-01-01')\n    },\n    {\n      id: 3,\n      title: \"Consultation gyn√©cologique\",\n      description: \"Femme de 35 ans pour suivi gyn√©cologique de routine\",\n      patientPrompt: \"Vous √™tes une femme de 35 ans venue pour votre consultation gyn√©cologique annuelle. Vous avez quelques questions sur la contraception.\",\n      evaluationCriteria: {\n        respect_intimite: { weight: 35, description: \"Respect de l'intimit√© et de la pudeur\" },\n        communication: { weight: 30, description: \"Communication bienveillante\" },\n        examen_clinique: { weight: 35, description: \"Examen gyn√©cologique appropri√©\" }\n      },\n      imageUrl: \"/images/gynecology.jpg\",\n      createdBy: \"system\",\n      createdAt: new Date('2025-01-01')\n    }\n  ];\n\n  async getAvailableScenarios(): Promise<any[]> {\n    return this.scenarios.map(scenario => ({\n      id: scenario.id,\n      title: scenario.title,\n      description: scenario.description,\n      imageUrl: scenario.imageUrl,\n      createdBy: scenario.createdBy,\n      createdAt: scenario.createdAt\n    }));\n  }\n\n  async getScenarioById(id: number): Promise<any | null> {\n    return this.scenarios.find(scenario => scenario.id === id) || null;\n  }\n\n  async getScenariosForStudent(email: string): Promise<any[]> {\n    // For demo purposes, return all scenarios for any student\n    return this.scenarios;\n  }\n}\n\nexport const fallbackScenariosService = new FallbackScenariosService();","size_bytes":3152},"server/services/firebase.service.ts":{"content":"export const db = null;\nexport const analytics = null;\nexport default null;","size_bytes":75},"server/services/firesql.service.ts":{"content":"// FireSQL service supprim√© - utilisez PostgreSQL avec des requ√™tes SQL natives\nexport class FireSQLService {\n    async query<T>(sql: string): Promise<T[]> {\n        throw new Error('FireSQL supprim√© - migrez vers PostgreSQL');\n    }\n}","size_bytes":238},"server/services/firestore.example.ts":{"content":"// Exemple Firestore supprim√© - utilisez PostgreSQL\nexport class FirestoreExampleService {\n    async addUser(userData: any) {\n        throw new Error('Firestore supprim√© - migrez vers PostgreSQL');\n    }\n\n    async getUserByEmail(email: string) {\n        throw new Error('Firestore supprim√© - migrez vers PostgreSQL');\n    }\n\n    async getAllEcosScenarios() {\n        throw new Error('Firestore supprim√© - migrez vers PostgreSQL');\n    }\n}","size_bytes":443},"server/services/learnworlds.service.ts":{"content":"import { openaiService } from './openai.service';\nimport { pineconeService } from './pinecone.service';\nimport { storage } from '../storage';\n\nexport class LearnWorldsService {\n  // Max questions per day per user\n  private MAX_DAILY_QUESTIONS = 20;\n\n  /**\n   * Process a chatbot query from LearnWorlds\n   */\n  async processQuery(email: string, query: string) {\n    try {\n      // Get today's date (UTC+2 timezone)\n      const now = new Date();\n      // Adjust to UTC+2 (2 hours ahead of UTC)\n      now.setHours(now.getHours() + 2);\n      \n      // Check if user has reached daily limit\n      const counter = await storage.getDailyCounter(email, now);\n      const questionsUsed = counter?.count || 0;\n      \n      if (questionsUsed >= this.MAX_DAILY_QUESTIONS) {\n        return {\n          status: 'error',\n          message: 'Limite quotidienne atteinte. Vous avez utilis√© vos 20 questions pour aujourd\\'hui. Veuillez revenir demain.',\n          limitReached: true,\n          questionsUsed,\n          questionsRemaining: 0,\n          maxDailyQuestions: this.MAX_DAILY_QUESTIONS\n        };\n      }\n      \n      // Create session if it doesn't exist\n      let session = await storage.getSession(email);\n      if (!session) {\n        session = await storage.createSession({ email });\n      }\n      \n      // 1. Use Pinecone to find relevant content\n      const relevantContent = await pineconeService.searchRelevantContent(query);\n      \n      // 2. Generate response using OpenAI and the relevant content\n      const response = await openaiService.generateResponse(query, relevantContent);\n      \n      // 3. Save the exchange\n      const exchange = await storage.saveExchange({\n        email,\n        question: query,\n        response\n      });\n      \n      // 4. Increment user's daily counter\n      const updatedCounter = await storage.incrementDailyCounter(email, now);\n      \n      // 5. Return the answer and updated status\n      return {\n        status: 'success',\n        id: exchange.id,\n        question: query,\n        response,\n        timestamp: exchange.timestamp,\n        questionsUsed: updatedCounter.count,\n        questionsRemaining: this.MAX_DAILY_QUESTIONS - updatedCounter.count,\n        limitReached: updatedCounter.count >= this.MAX_DAILY_QUESTIONS,\n        maxDailyQuestions: this.MAX_DAILY_QUESTIONS\n      };\n    } catch (error) {\n      console.error('Error processing LearnWorlds query:', error);\n      return {\n        status: 'error',\n        message: 'Une erreur est survenue lors du traitement de votre question. Veuillez r√©essayer plus tard.'\n      };\n    }\n  }\n}\n\nexport const learnWorldsService = new LearnWorldsService();","size_bytes":2655},"server/services/openai.service.ts":{"content":"import OpenAI from \"openai\";\nimport { RAGContent } from '../types';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\",\n});\n\nexport class OpenAIService {\n  private systemPrompt = `You are an educational assistant for a LearnWorlds learning management system. Speak only in French.\nAnswer questions about the course content based on the context provided.\nBe helpful, precise, and concise. If you don't know the answer based on the provided context, say so clearly. If you don't know the answer based on the provided context, say so clearly.\nDo not make up information, NEVER. \n\nIMPORTANT: At the end of EVERY response, you MUST include this exact link in markdown format:\n[Cours d'arthrologie du membre sup√©rieur](https://academy.ceerrf.fr/course/arthrologie-du-membre-superieur)\n\nThis link must appear at the end of the answer when usefull specially for the first answer.`;\n\n  /**\n   * Generates a response for the given question based on relevant content\n   */\n  async generateResponse(\n    question: string,\n    relevantContent: RAGContent[] | string,\n  ): Promise<string> {\n    try {\n      // Format the context for better prompt understanding\n      let contextText = \"\";\n      if (relevantContent && typeof relevantContent !== 'string' && relevantContent.length > 0) {\n        contextText = relevantContent\n          .map((item, index) => {\n            const source = item.metadata?.source\n              ? ` (Source: ${item.metadata.source})`\n              : \"\";\n            return `Context ${index + 1}${source}:\\n${item.content}\\n`;\n          })\n          .join(\"\\n\");\n      } else if (typeof relevantContent === 'string') {\n        contextText = relevantContent;\n      }\n\n      const userPrompt = `Question: ${question}\\n\\nRelevant Content:\\n${contextText}`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: this.systemPrompt },\n          { role: \"user\", content: userPrompt },\n        ],\n        temperature: 0.5,\n        max_tokens: 1000,\n      });\n\n      return (\n        response.choices[0].message.content ||\n        \"Je n'ai pas pu g√©n√©rer une r√©ponse. Veuillez r√©essayer.\"\n      );\n    } catch (error) {\n      console.error(\"Error generating OpenAI response:\", error);\n      throw new Error(\n        \"Impossible de g√©n√©rer une r√©ponse. Service indisponible.\",\n      );\n    }\n  }\n\n  /**\n   * Create a completion with custom system prompt (for ECOS evaluation)\n   */\n  async createCompletion(params: {\n    model: string;\n    messages: Array<{ role: string; content: string }>;\n    temperature?: number;\n    max_tokens?: number;\n  }): Promise<any> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: params.model,\n        messages: params.messages,\n        temperature: params.temperature || 0.5,\n        max_tokens: params.max_tokens || 1000,\n      });\n\n      return response;\n    } catch (error) {\n      console.error(\"Error creating OpenAI completion:\", error);\n      throw new Error(\"Impossible de g√©n√©rer une r√©ponse. Service indisponible.\");\n    }\n  }\n\n  /**\n   * Convert natural language question to SQL query\n   */\n  async convertToSQL(question: string, schema: string): Promise<string> {\n    try {\n      console.log(\"Conversion SQL - Question re√ßue:\", question);\n      console.log(\"Conversion SQL - Sch√©ma fourni:\", schema.substring(0, 200) + \"...\");\n\n      const prompt = `Tu es un expert en bases de donn√©es PostgreSQL. Convertis cette question en langage naturel en requ√™te SQL valide.\n\nBase de donn√©es PostgreSQL avec le sch√©ma suivant :\n${schema}\n\nQuestion en fran√ßais : ${question}\n\nInstructions importantes :\n- G√©n√®re uniquement une requ√™te SELECT (pas d'INSERT, UPDATE, DELETE)\n- Utilise la syntaxe PostgreSQL\n- Utilise UNIQUEMENT les tables et colonnes list√©es dans le sch√©ma ci-dessus\n- ATTENTION: Dans la table 'exchanges' la colonne utilisateur s'appelle 'utilisateur_email' (PAS 'email')\n- ATTENTION: Dans la table 'daily_counters' la colonne utilisateur s'appelle 'utilisateur_email' (PAS 'email')\n- Pour les questions sur les utilisateurs connect√©s/actifs, utilise la table 'exchanges' avec la colonne 'utilisateur_email'\n- Pour les compteurs quotidiens, utilise la table 'daily_counters' avec la colonne 'utilisateur_email'\n- Pour les dates, utilise DATE(timestamp) = CURRENT_DATE pour aujourd'hui\n- Pour compter les utilisateurs uniques: COUNT(DISTINCT utilisateur_email)\n- Inclus les alias de tables si n√©cessaire\n- R√©ponds uniquement avec la requ√™te SQL, sans explication ni markdown\n\nRequ√™te SQL :`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Tu es un expert en conversion de langage naturel vers SQL. R√©ponds uniquement avec la requ√™te SQL demand√©e, sans formatage markdown.\"\n          },\n          { role: \"user\", content: prompt }\n        ],\n        max_tokens: 300,\n        temperature: 0.1,\n      });\n\n      let sqlQuery = response.choices[0].message.content?.trim() || \"\";\n      console.log(\"R√©ponse OpenAI brute:\", sqlQuery);\n\n      // Clean up the response - remove markdown if present\n      sqlQuery = sqlQuery.replace(/```sql\\s*/gi, '').replace(/```\\s*/gi, '');\n\n      // Extract SQL from response if it's wrapped in explanations\n      const sqlMatch = sqlQuery.match(/(SELECT[\\s\\S]*?)(?:\\n\\s*$|$)/i);\n      if (sqlMatch) {\n        sqlQuery = sqlMatch[1].trim();\n        console.log(\"SQL extrait:\", sqlQuery);\n      }\n\n      // Remove trailing semicolon if present\n      sqlQuery = sqlQuery.replace(/;\\s*$/, '');\n\n      // Basic validation\n      if (!sqlQuery.toLowerCase().includes(\"select\")) {\n        console.log(\"√âchec validation - pas de SELECT trouv√© dans:\", sqlQuery);\n        throw new Error(\"Aucune requ√™te SELECT valide trouv√©e dans la r√©ponse\");\n      }\n\n      // Additional validation - check if it starts with SELECT\n      if (!sqlQuery.toLowerCase().trim().startsWith(\"select\")) {\n        console.log(\"√âchec validation - ne commence pas par SELECT:\", sqlQuery);\n        throw new Error(\"La requ√™te doit commencer par SELECT\");\n      }\n\n      console.log(\"SQL final valid√©:\", sqlQuery);\n      return sqlQuery;\n    } catch (error) {\n      console.error(\"Error converting to SQL:\", error);\n      if (error instanceof Error) {\n        throw new Error(`Impossible de convertir la question en requ√™te SQL: ${error.message}`);\n      }\n      throw new Error(\"Impossible de convertir la question en requ√™te SQL\");\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();","size_bytes":6811},"server/services/pinecone.service.ts":{"content":"import { Pinecone } from '@pinecone-database/pinecone';\nimport OpenAI from \"openai\";\nimport { RAGContent } from '../types';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\"\n});\n\nexport class PineconeService {\n  private pinecone;\n  private index;\n  private indexName: string = '';\n  private namespace: string = '';\n\n  constructor() {\n    try {\n      // Get Pinecone credentials from environment variables\n      const apiKey = process.env.PINECONE_API_KEY;\n      this.indexName = process.env.PINECONE_INDEX_NAME || 'arthrologie-du-membre-superieur';\n      this.namespace = process.env.PINECONE_NAMESPACE || 'default';\n\n      if (!apiKey) {\n        console.warn('Missing Pinecone API key - running in fallback mode');\n        this.pinecone = null;\n        this.index = null;\n        return;\n      }\n\n      // Initialize Pinecone client\n      this.pinecone = new Pinecone({\n        apiKey,\n      });\n\n      // Get the index\n      this.index = this.pinecone.index(this.indexName);\n      console.log(`Connected to Pinecone index: ${this.indexName}`);\n    } catch (error) {\n      console.error('Error initializing Pinecone service:', error);\n      console.warn('Running in fallback mode without Pinecone');\n      this.pinecone = null;\n      this.index = null;\n    }\n  }\n\n  /**\n   * Gets the vector embedding for a text string using OpenAI\n   */\n  public async getEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await openai.embeddings.create({\n        model: \"text-embedding-3-small\",\n        input: text,\n        encoding_format: \"float\",\n      });\n\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error(\"Error getting embedding:\", error);\n      throw new Error(\"Failed to generate embedding for query\");\n    }\n  }\n\n  /**\n   * Search for relevant content based on the question\n   */\n  async searchRelevantContent(question: string, topK: number = 3): Promise<RAGContent[]> {\n    try {\n      // Check if Pinecone is available\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - returning empty results');\n        return [];\n      }\n\n      // Get embedding for the question\n      const embedding = await this.getEmbedding(question);\n\n      // Query Pinecone\n      const queryResponse = await this.index.query({\n        vector: embedding,\n        topK,\n        includeMetadata: true,\n      });\n\n      // Process and return the results\n      const results: RAGContent[] = [];\n\n      for (const match of queryResponse.matches) {\n        if (match.metadata && typeof match.metadata.text === 'string') {\n          results.push({\n            content: match.metadata.text,\n            metadata: {\n              source: typeof match.metadata.source === 'string' ? match.metadata.source : undefined,\n            }\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error(\"Error searching Pinecone:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Bulk upsert vectors to Pinecone\n   */\n  async upsertVectors(vectors: any[]): Promise<void> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - skipping upsert');\n        return;\n      }\n\n      await this.index.upsert(vectors);\n      console.log(`Successfully upserted ${vectors.length} vectors to Pinecone`);\n    } catch (error) {\n      console.error(\"Error upserting vectors:\", error);\n      throw new Error(\"Failed to store vectors in knowledge base\");\n    }\n  }\n\n  /**\n   * Get all document sources from Pinecone\n   */\n  async getAllSources(): Promise<string[]> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - returning empty sources');\n        return [];\n      }\n\n      // Query with empty vector to get random samples and extract sources\n      const dummyVector = new Array(1536).fill(0); // text-embedding-3-small dimension\n      const queryResponse = await this.index.query({\n        vector: dummyVector,\n        topK: 100,\n        includeMetadata: true,\n      });\n\n      const sources = new Set<string>();\n      queryResponse.matches.forEach(match => {\n        if (match.metadata && match.metadata.source) {\n          sources.add(match.metadata.source as string);\n        }\n      });\n\n      return Array.from(sources);\n    } catch (error) {\n      console.error(\"Error getting sources:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete all vectors for a specific document\n   */\n  async deleteDocument(documentTitle: string): Promise<void> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - skipping delete');\n        return;\n      }\n\n      // Find all vector IDs for this document\n      const dummyVector = new Array(1536).fill(0);\n      const queryResponse = await this.index.query({\n        vector: dummyVector,\n        topK: 1000,\n        includeMetadata: true,\n        filter: { source: documentTitle }\n      });\n\n      const idsToDelete = queryResponse.matches.map(match => match.id);\n\n      if (idsToDelete.length > 0) {\n        await this.index.deleteMany(idsToDelete);\n        console.log(`Deleted ${idsToDelete.length} vectors for document: ${documentTitle}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      throw new Error(\"Failed to delete document from knowledge base\");\n    }\n  }\n\n  /**\n   * Create a new Pinecone index\n   */\n  async createIndex(indexName: string, dimension: number = 1536): Promise<void> {\n    if (!this.pinecone) {\n      throw new Error('Pinecone not initialized - please check your API key');\n    }\n\n    try {\n      console.log(`Attempting to create Pinecone index: ${indexName} with dimension: ${dimension}`);\n\n      const result = await this.pinecone.createIndex({\n        name: indexName,\n        dimension: dimension,\n        metric: 'cosine',\n        spec: {\n          serverless: {\n            cloud: 'aws',\n            region: 'us-east-1'\n          }\n        }\n      });\n\n      console.log(`Successfully created Pinecone index: ${indexName}`, result);\n    } catch (error: any) {\n      console.error('Detailed error creating Pinecone index:', {\n        message: error.message,\n        status: error.status,\n        response: error.response?.data,\n        indexName,\n        dimension\n      });\n\n      // Provide more specific error messages\n      if (error.message && error.message.includes('ALREADY_EXISTS')) {\n        throw new Error(`L'index \"${indexName}\" existe d√©j√†. Veuillez choisir un nom diff√©rent ou attendre quelques minutes si vous venez de le supprimer.`);\n      } else if (error.status === 403) {\n        throw new Error('Permission denied. Please check your Pinecone API key.');\n      } else if (error.status === 400) {\n        throw new Error(`Invalid index configuration: ${error.message}`);\n      } else {\n        throw new Error(`Failed to create index: ${error.message || 'Unknown error'}`);\n      }\n    }\n  }\n\n  /**\n   * List all available Pinecone indexes\n   */\n  async listIndexes(): Promise<Array<{name: string, status?: string, dimension?: number}>> {\n    console.log('üîç Starting listIndexes operation...');\n\n    if (!this.pinecone) {\n      console.error('‚ùå Pinecone not initialized');\n      throw new Error('Pinecone not initialized');\n    }\n\n    try {\n      console.log('üì° Calling Pinecone listIndexes API...');\n      const indexesList = await this.pinecone.listIndexes();\n      console.log('‚úÖ Pinecone API response received:', JSON.stringify(indexesList, null, 2));\n\n      if (!indexesList || !indexesList.indexes) {\n        console.log('‚ö†Ô∏è No indexes found in response or empty response');\n        return [];\n      }\n\n      console.log('üìù Processing indexes data...');\n      const indexes = indexesList.indexes.map((index, idx) => {\n        console.log(`Processing index ${idx}:`, JSON.stringify(index, null, 2));\n        return {\n          name: index.name,\n          status: index.status?.ready ? 'ready' : 'not ready',\n          dimension: index.dimension\n        };\n      });\n\n      console.log('‚úÖ Successfully processed indexes:', JSON.stringify(indexes, null, 2));\n      return indexes;\n    } catch (error) {\n      console.error('‚ùå Error in listIndexes:', error);\n      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n      console.error('Error details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        name: error instanceof Error ? error.name : 'Unknown',\n        code: (error as any)?.code,\n        status: (error as any)?.status\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch to a different index\n   */\n  async switchIndex(indexName: string): Promise<void> {\n    if (!this.pinecone) {\n      throw new Error('Pinecone not initialized');\n    }\n\n    try {\n      this.indexName = indexName;\n      this.index = this.pinecone.index(indexName);\n      console.log(`Switched to Pinecone index: ${indexName}`);\n    } catch (error) {\n      console.error('Error switching Pinecone index:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process PDF content into chunks and upload to Pinecone\n   */\n  async processPDFContent(\n    content: string, \n    title: string, \n    category: string,\n    chunkSize: number = 1000,\n    overlap: number = 200\n  ): Promise<void> {\n    if (!this.index) {\n      throw new Error('Pinecone not available');\n    }\n\n    try {\n      // Split content into chunks\n      const chunks = this.splitIntoChunks(content, chunkSize, overlap);\n\n      // Create embeddings for all chunks\n      const embeddings = await this.getEmbeddingsForChunks(chunks);\n\n      // Prepare vectors for upsert\n      const vectors = chunks.map((chunk, index) => ({\n        id: `${title}_chunk_${index}`,\n        values: embeddings[index],\n        metadata: {\n          source: title,\n          text: chunk,\n          category: category,\n          chunk_index: index,\n          total_chunks: chunks.length\n        }\n      }));\n\n      // Upload to Pinecone in batches\n      await this.upsertVectors(vectors);\n      console.log(`Processed PDF: ${title} with ${chunks.length} chunks`);\n    } catch (error) {\n      console.error('Error processing PDF content:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Split text into chunks with overlap\n   */\n  private splitIntoChunks(text: string, chunkSize: number, overlap: number): string[] {\n    const chunks = [];\n    let start = 0;\n\n    while (start < text.length) {\n      const end = Math.min(start + chunkSize, text.length);\n      const chunk = text.slice(start, end);\n      chunks.push(chunk.trim());\n\n      if (end === text.length) break;\n      start = end - overlap;\n    }\n\n    return chunks.filter(chunk => chunk.length > 0);\n  }\n\n  /**\n   * Get embeddings for multiple text chunks\n   */\n  private async getEmbeddingsForChunks(chunks: string[]): Promise<number[][]> {\n    const embeddings = [];\n\n    // Process in batches to avoid rate limits\n    const batchSize = 10;\n    for (let i = 0; i < chunks.length; i += batchSize) {\n      const batch = chunks.slice(i, i + batchSize);\n      const batchEmbeddings = await Promise.all(\n        batch.map(chunk => this.getEmbedding(chunk))\n      );\n      embeddings.push(...batchEmbeddings);\n\n      // Small delay between batches\n      if (i + batchSize < chunks.length) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    return embeddings;\n  }\n\n  async queryVectors(query: string, indexName: string, topK: number = 5): Promise<RAGContent[]> {\n    try {\n      if (!this.pinecone) {\n        console.warn('Pinecone not available - returning empty results');\n        return [];\n      }\n      // Get embedding for the question\n      const embedding = await this.getEmbedding(query);\n\n      // Get specific index\n      const targetIndex = this.pinecone.index(indexName);\n\n      const queryResponse = await targetIndex.query({\n        vector: embedding,\n        topK,\n        includeMetadata: true,\n      });\n\n      // Process and return the results\n      const results: RAGContent[] = [];\n\n      for (const match of queryResponse.matches) {\n        if (match.metadata && typeof match.metadata.text === 'string') {\n          results.push({\n            content: match.metadata.text,\n            metadata: {\n              source: typeof match.metadata.source === 'string' ? match.metadata.source : undefined,\n            }\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error(`Error querying Pinecone index ${indexName}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const pineconeService = new PineconeService();","size_bytes":12756},"server/services/promptGen.service.ts":{"content":"import { openaiService } from './openai.service';\nimport { pineconeService } from './pinecone.service';\n\nexport class PromptGenService {\n  async generatePatientPrompt(teacherInput: string, contextDocs: string[] = []): Promise<string> {\n    try {\n      // Use existing Pinecone service to find relevant medical content\n      let embeddedDocs = [];\n      try {\n        embeddedDocs = await pineconeService.searchRelevantContent(teacherInput);\n      } catch (error) {\n        console.log('Pinecone not available, using base prompt generation');\n      }\n\n      // Combine context documents\n      const allContext = [...contextDocs, ...embeddedDocs].join('\\n\\n');\n\n      const systemPrompt = `Tu es un expert en cr√©ation de sc√©narios ECOS (Examen Clinique Objectif Structur√©). \nTu dois cr√©er un prompt d√©taill√© et r√©aliste pour simuler un patient virtuel.\n\nLe prompt doit:\n1. D√©finir clairement l'identit√© du patient (√¢ge, sexe, profession, etc.)\n2. D√©crire les sympt√¥mes actuels et l'histoire de la maladie\n3. Inclure les ant√©c√©dents m√©dicaux pertinents\n4. Pr√©ciser l'√©tat √©motionnel et le comportement du patient\n5. D√©finir ce que le patient sait et ne sait pas sur sa condition\n6. Inclure des d√©tails sur la personnalit√© du patient\n7. Sp√©cifier comment le patient doit r√©agir aux diff√©rents types de questions\n\nLe prompt r√©sultant sera utilis√© pour faire jouer le r√¥le du patient √† une IA lors d'un ECOS avec un √©tudiant en m√©decine.`;\n\n      const userPrompt = `Cr√©e un prompt d√©taill√© pour un patient virtuel bas√© sur cette description du sc√©nario clinique:\n\n${teacherInput}\n\n${allContext ? `Utilise √©galement ces informations contextuelles pour enrichir le sc√©nario:\\n${allContext}` : ''}\n\nAssure-toi que le prompt soit suffisamment d√©taill√© pour permettre une interaction r√©aliste et p√©dagogique de 15-20 minutes.`;\n\n      const response = await openaiService.generateResponse(\n        `G√©n√®re un prompt d√©taill√© pour un patient virtuel bas√© sur cette description de sc√©nario ECOS:\\n\\n${teacherInput}\\n\\nDocuments de r√©f√©rence:\\n${contextDocs.join('\\n\\n')}`,\n        allContext\n      );\n\n      return response;\n    } catch (error) {\n      console.error('Error generating patient prompt:', error);\n      throw new Error('Failed to generate patient prompt');\n    }\n  }\n\n  async generateEvaluationCriteria(scenarioDescription: string): Promise<any> {\n    try {\n      const systemPrompt = `Tu es un expert en √©valuation ECOS. Cr√©e des crit√®res d'√©valuation structur√©s pour ce sc√©nario clinique.\n\nLes crit√®res doivent inclure:\n1. Communication (√©coute, empathie, clart√©)\n2. Anamn√®se (questions pertinentes, organisation)\n3. Examen clinique (techniques, syst√©matique)\n4. Raisonnement clinique (diagnostic diff√©rentiel, hypoth√®ses)\n5. Prise en charge (plan th√©rapeutique, suivi)\n\nChaque crit√®re doit avoir:\n- Un nom clair\n- Une description d√©taill√©e\n- Une √©chelle de notation (0-4 points)\n- Des indicateurs de performance pour chaque niveau\n\nRetourne le r√©sultat en format JSON structur√©.`;\n\n      const response = await openaiService.createCompletion({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: `Cr√©e des crit√®res d'√©valuation pour ce sc√©nario ECOS:\\n\\n${scenarioDescription}` }\n        ],\n        temperature: 0.3,\n        max_tokens: 1500\n      });\n\n      const criteriaText = response.choices[0].message.content;\n\n      // Try to parse as JSON, fallback to structured text if it fails\n      try {\n        return JSON.parse(criteriaText);\n      } catch {\n        // If JSON parsing fails, create a structured object\n        return {\n          criteria: [\n            {\n              name: \"Communication\",\n              description: \"√âvaluation des comp√©tences de communication\",\n              maxScore: 4,\n              details: criteriaText\n            }\n          ]\n        };\n      }\n    } catch (error) {\n      console.error('Error generating evaluation criteria:', error);\n      throw new Error('Failed to generate evaluation criteria');\n    }\n  }\n}\n\nexport const promptGenService = new PromptGenService();","size_bytes":4176},"server/services/robust-supabase.service.ts":{"content":"import postgres from 'postgres';\nimport { promisify } from 'util';\nimport { lookup } from 'dns';\n\nconst dnsLookup = promisify(lookup);\n\nexport class RobustSupabaseService {\n  private sql: any = null;\n  private isConnected: boolean = false;\n  \n  async connect(): Promise<void> {\n    if (this.isConnected && this.sql) return;\n    \n    console.log('üîß Attempting robust Supabase connection...');\n    \n    const connectionStrategies = [\n      {\n        name: 'Direct URL with custom DNS',\n        method: () => this.connectWithCustomDNS()\n      },\n      {\n        name: 'IPv4 forced connection', \n        method: () => this.connectWithIPv4()\n      },\n      {\n        name: 'Manual IP resolution',\n        method: () => this.connectWithManualIP()\n      }\n    ];\n    \n    for (const strategy of connectionStrategies) {\n      try {\n        console.log(`üîß Trying ${strategy.name}...`);\n        await strategy.method();\n        \n        // Test the connection\n        await this.sql`SELECT 1`;\n        console.log(`‚úÖ Connected via ${strategy.name}`);\n        this.isConnected = true;\n        return;\n      } catch (error: any) {\n        console.log(`‚ùå ${strategy.name} failed: ${error.message}`);\n        if (this.sql) {\n          try { await this.sql.end(); } catch {}\n          this.sql = null;\n        }\n      }\n    }\n    \n    throw new Error('All connection strategies failed');\n  }\n  \n  private extractPasswordFromDatabaseUrl(): string {\n    const dbUrl = process.env.DATABASE_URL;\n    if (!dbUrl) throw new Error('DATABASE_URL not set');\n    const match = dbUrl.match(/postgresql:\\/\\/[^:]+:([^@]+)@/);\n    if (!match || !match[1]) throw new Error('Could not extract password from DATABASE_URL');\n    return match[1];\n  }\n\n  private async connectWithCustomDNS(): Promise<void> {\n    // Try to resolve with custom DNS\n    try {\n      const host = process.env.SUPABASE_DB_HOST || this.extractHostFromDatabaseUrl();\n      const password = this.extractPasswordFromDatabaseUrl();\n      const resolved = await dnsLookup(host, { family: 4 });\n      console.log(`üîç Resolved to IPv4: ${resolved.address}`);\n      \n      this.sql = postgres(`postgresql://postgres:${password}@${resolved.address}:5432/postgres`, {\n        ssl: { rejectUnauthorized: false },\n        max: 5,\n        connect_timeout: 30,\n        prepare: false,\n      });\n    } catch (error) {\n      throw new Error(`DNS resolution failed: ${error.message}`);\n    }\n  }\n  \n  private extractHostFromDatabaseUrl(): string {\n    const dbUrl = process.env.DATABASE_URL;\n    if (!dbUrl) throw new Error('DATABASE_URL not set');\n    const match = dbUrl.match(/postgresql:\\/\\/[^@]+@([^:\\/]+)/);\n    if (!match || !match[1]) throw new Error('Could not extract host from DATABASE_URL');\n    return match[1];\n  }\n\n  private async connectWithIPv4(): Promise<void> {\n    // Direct connection forcing IPv4\n    const host = process.env.SUPABASE_DB_HOST || this.extractHostFromDatabaseUrl();\n    const password = this.extractPasswordFromDatabaseUrl();\n    this.sql = postgres(`postgresql://postgres:${password}@${host}:5432/postgres`, {\n      ssl: { rejectUnauthorized: false },\n      max: 5,\n      connect_timeout: 30,\n      prepare: false,\n      family: 4, // Force IPv4\n    });\n  }\n  \n  private async connectWithManualIP(): Promise<void> {\n    // Use known Supabase IP ranges (AWS us-west-1)\n    const knownIPs = [\n      '54.215.226.166',  // Common Supabase IP\n      '13.56.147.173',   // Alternative Supabase IP\n      '52.8.112.93',     // Another Supabase IP\n    ];\n    \n    for (const ip of knownIPs) {\n      try {\n        console.log(`üîß Trying IP: ${ip}`);\n        const password = this.extractPasswordFromDatabaseUrl();\n        this.sql = postgres(`postgresql://postgres:${password}@${ip}:5432/postgres`, {\n          ssl: { rejectUnauthorized: false },\n          max: 5,\n          connect_timeout: 10,\n          prepare: false,\n        });\n        \n        // Quick test\n        await this.sql`SELECT 1`;\n        console.log(`‚úÖ IP ${ip} works!`);\n        return;\n      } catch (error) {\n        console.log(`‚ùå IP ${ip} failed`);\n        if (this.sql) {\n          try { await this.sql.end(); } catch {}\n          this.sql = null;\n        }\n      }\n    }\n    \n    throw new Error('No working IP found');\n  }\n  \n  async getScenarios(): Promise<any[]> {\n    await this.connect();\n    \n    try {\n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `;\n      \n      console.log(`‚úÖ Retrieved ${scenarios.length} scenarios from Supabase`);\n      return scenarios;\n    } catch (error: any) {\n      console.error('‚ùå Failed to fetch scenarios:', error.message);\n      throw new Error(`Scenario retrieval failed: ${error.message}`);\n    }\n  }\n  \n  async testConnection(): Promise<void> {\n    await this.connect();\n    const result = await this.sql`SELECT version()`;\n    console.log('PostgreSQL version:', result[0].version.substring(0, 50));\n  }\n  \n  async close(): Promise<void> {\n    if (this.sql) {\n      await this.sql.end();\n      this.sql = null;\n      this.isConnected = false;\n    }\n  }\n}\n\nexport const robustSupabaseService = new RobustSupabaseService();","size_bytes":5456},"server/services/sample-data.service.ts":{"content":"import { db, ecosScenarios, trainingSessions, trainingSessionScenarios, trainingSessionStudents } from '../db';\nimport { eq } from 'drizzle-orm';\n\nexport class SampleDataService {\n  \n  async createSampleData(): Promise<void> {\n    try {\n      console.log('üå± Creating sample data for testing...');\n\n      // Create sample scenarios\n      const sampleScenarios = [\n        {\n          title: \"Consultation en cardiologie\",\n          description: \"Patient de 65 ans pr√©sentant des douleurs thoraciques\",\n          patientPrompt: \"Vous √™tes un patient de 65 ans qui consulte pour des douleurs thoraciques depuis 2 jours. Vous √™tes inquiet car votre p√®re est d√©c√©d√© d'un infarctus.\",\n          evaluationCriteria: {\n            communication: { weight: 30, description: \"Qualit√© de la communication avec le patient\" },\n            examination: { weight: 40, description: \"Qualit√© de l'examen clinique\" },\n            diagnostic: { weight: 30, description: \"Pertinence du diagnostic et des examens compl√©mentaires\" }\n          },\n          pineconeIndex: \"sample_scenario_1\",\n          imageUrl: \"/images/cardiology.jpg\",\n          createdBy: \"system\"\n        },\n        {\n          title: \"Urgence p√©diatrique\",\n          description: \"Enfant de 5 ans avec fi√®vre et difficult√©s respiratoires\",\n          patientPrompt: \"Vous accompagnez votre enfant de 5 ans qui a de la fi√®vre depuis la nuit derni√®re et qui a du mal √† respirer. Vous √™tes tr√®s anxieux.\",\n          evaluationCriteria: {\n            approche_pediatrique: { weight: 25, description: \"Adaptation de l'approche √† l'√¢ge de l'enfant\" },\n            communication_parents: { weight: 25, description: \"Communication avec les parents\" },\n            examen_clinique: { weight: 25, description: \"Examen clinique adapt√©\" },\n            prise_en_charge: { weight: 25, description: \"D√©cisions th√©rapeutiques appropri√©es\" }\n          },\n          pineconeIndex: \"sample_scenario_2\",\n          imageUrl: \"/images/pediatrics.jpg\",\n          createdBy: \"system\"\n        },\n        {\n          title: \"Consultation gyn√©cologique\",\n          description: \"Femme de 35 ans pour suivi gyn√©cologique de routine\",\n          patientPrompt: \"Vous √™tes une femme de 35 ans venue pour votre consultation gyn√©cologique annuelle. Vous avez quelques questions sur la contraception.\",\n          evaluationCriteria: {\n            respect_intimite: { weight: 35, description: \"Respect de l'intimit√© et de la pudeur\" },\n            communication: { weight: 30, description: \"Communication bienveillante\" },\n            examen_clinique: { weight: 35, description: \"Examen gyn√©cologique appropri√©\" }\n          },\n          pineconeIndex: \"sample_scenario_3\",\n          imageUrl: \"/images/gynecology.jpg\",\n          createdBy: \"system\"\n        }\n      ];\n\n      // Insert scenarios and get their IDs\n      const insertedScenarios = [];\n      for (const scenario of sampleScenarios) {\n        const [insertedScenario] = await db\n          .insert(ecosScenarios)\n          .values(scenario)\n          .returning();\n        insertedScenarios.push(insertedScenario);\n        console.log(`‚úÖ Created scenario: ${scenario.title}`);\n      }\n\n      // Create a sample training session\n      const [trainingSession] = await db\n        .insert(trainingSessions)\n        .values({\n          title: \"Formation ECOS - Session Printemps 2025\",\n          description: \"Session de formation pour les √©tudiants en m√©decine - ECOS simulation\",\n          startDate: new Date('2025-03-01'),\n          endDate: new Date('2025-06-30'),\n          createdBy: \"cherubindavid@gmail.com\"\n        })\n        .returning();\n\n      console.log(`‚úÖ Created training session: ${trainingSession.title}`);\n\n      // Link scenarios to training session\n      for (const scenario of insertedScenarios) {\n        await db\n          .insert(trainingSessionScenarios)\n          .values({\n            trainingSessionId: trainingSession.id,\n            scenarioId: scenario.id\n          });\n      }\n\n      // Add some sample students to the training session\n      const sampleStudents = [\n        'cherubindavid@gmail.com',\n        'colombemadoungou@gmail.com',\n        'etudiant1@example.com',\n        'etudiant2@example.com'\n      ];\n\n      for (const studentEmail of sampleStudents) {\n        await db\n          .insert(trainingSessionStudents)\n          .values({\n            trainingSessionId: trainingSession.id,\n            studentEmail: studentEmail\n          });\n        console.log(`‚úÖ Added student to training session: ${studentEmail}`);\n      }\n\n      console.log('üå± Sample data creation completed successfully!');\n\n    } catch (error) {\n      console.error('‚ùå Error creating sample data:', error);\n      throw error;\n    }\n  }\n\n  async getScenariosForStudent(email: string): Promise<any[]> {\n    try {\n      // Get training sessions for this student\n      const studentSessions = await db\n        .select()\n        .from(trainingSessionStudents)\n        .where(eq(trainingSessionStudents.studentEmail, email));\n\n      if (studentSessions.length === 0) {\n        return [];\n      }\n\n      // Get scenarios for these training sessions\n      const scenarios = [];\n      for (const session of studentSessions) {\n        const sessionScenarios = await db\n          .select({\n            id: ecosScenarios.id,\n            title: ecosScenarios.title,\n            description: ecosScenarios.description,\n            imageUrl: ecosScenarios.imageUrl,\n            trainingSessionId: trainingSessionScenarios.trainingSessionId\n          })\n          .from(trainingSessionScenarios)\n          .innerJoin(\n            ecosScenarios,\n            eq(trainingSessionScenarios.scenarioId, ecosScenarios.id)\n          )\n          .where(eq(trainingSessionScenarios.trainingSessionId, session.trainingSessionId));\n\n        scenarios.push(...sessionScenarios);\n      }\n\n      return scenarios;\n    } catch (error) {\n      console.error('Error getting scenarios for student:', error);\n      throw error;\n    }\n  }\n}\n\nexport const sampleDataService = new SampleDataService();","size_bytes":6095},"server/services/scenario-sync.service.ts":{"content":"import { Pinecone } from '@pinecone-database/pinecone';\nimport { SupabaseClientService } from './supabase-client.service';\n\ninterface PineconeMetadata {\n  title?: string;\n  description?: string;\n  patientPrompt?: string;\n  evaluationCriteria?: any;\n  imageUrl?: string;\n  createdBy?: string;\n}\n\nexport class ScenarioSyncService {\n  private pinecone: Pinecone;\n  private indexName: string;\n  private namespace: string;\n  private dbService: SupabaseClientService;\n\n  constructor() {\n    if (!process.env.PINECONE_API_KEY) {\n      throw new Error('PINECONE_API_KEY is required');\n    }\n    \n    this.pinecone = new Pinecone({\n      apiKey: process.env.PINECONE_API_KEY,\n    });\n    \n    this.indexName = process.env.PINECONE_INDEX_NAME || 'arthrologie-du-membre-superieur';\n    this.namespace = process.env.PINECONE_NAMESPACE || 'default';\n    this.dbService = new SupabaseClientService();\n  }\n\n  async syncScenariosFromPinecone(): Promise<void> {\n    try {\n      console.log('üîç Synchronizing scenarios from Pinecone...');\n      \n      await this.dbService.connect();\n      \n      const index = this.pinecone.index(this.indexName);\n      \n      // Query all vectors from Pinecone with metadata\n      const queryResponse = await index.namespace(this.namespace).query({\n        vector: new Array(1536).fill(0), // OpenAI embeddings dimension\n        topK: 100, // Get up to 100 scenarios\n        includeMetadata: true,\n        includeValues: false\n      });\n\n      if (!queryResponse.matches || queryResponse.matches.length === 0) {\n        console.log('üì≠ No scenarios found in Pinecone');\n        return;\n      }\n\n      console.log(`üìã Found ${queryResponse.matches.length} scenarios in Pinecone`);\n\n      for (const match of queryResponse.matches) {\n        if (!match.metadata) continue;\n        \n        const metadata = match.metadata as PineconeMetadata;\n        \n        // Skip if essential fields are missing\n        if (!metadata.title || !metadata.description || !metadata.patientPrompt) {\n          console.log(`‚ö†Ô∏è Skipping scenario ${match.id} - missing essential fields`);\n          continue;\n        }\n\n        try {\n          // Create scenario in Supabase\n          await this.dbService.createScenario({\n            title: metadata.title,\n            description: metadata.description,\n            patientPrompt: metadata.patientPrompt,\n            evaluationCriteria: metadata.evaluationCriteria || {},\n            imageUrl: metadata.imageUrl,\n            createdBy: metadata.createdBy || 'system'\n          });\n          \n          console.log(`‚úÖ Created scenario: ${metadata.title}`);\n        } catch (error: any) {\n          if (error.message?.includes('duplicate')) {\n            console.log(`‚ö†Ô∏è Scenario already exists: ${metadata.title}`);\n          } else {\n            console.error(`‚ùå Error creating scenario ${metadata.title}:`, error.message);\n          }\n        }\n      }\n\n      console.log('‚úÖ Scenario synchronization completed');\n    } catch (error) {\n      console.error('‚ùå Error syncing scenarios from Pinecone:', error);\n      throw error;\n    }\n  }\n\n  async getAvailableScenarios(): Promise<any[]> {\n    try {\n      await this.dbService.connect();\n      return await this.dbService.getScenarios();\n    } catch (error) {\n      console.error('‚ùå Error fetching scenarios from Supabase:', error);\n      throw error;\n    }\n  }\n\n  async getScenarioById(id: string): Promise<any | null> {\n    try {\n      await this.dbService.connect();\n      const scenarios = await this.dbService.getScenarios();\n      return scenarios.find(s => s.id === id) || null;\n    } catch (error) {\n      console.error('‚ùå Error fetching scenario by ID from Supabase:', error);\n      throw error;\n    }\n  }\n}\n\nexport const scenarioSyncService = new ScenarioSyncService();","size_bytes":3799},"server/services/simple-supabase.service.ts":{"content":"import postgres from 'postgres';\n\nexport class SimpleSupabaseService {\n  private sql: any = null;\n  \n  async connect(): Promise<void> {\n    if (this.sql) return;\n    \n    try {\n      console.log('üîß Connecting to Supabase database...');\n      \n      // Direct connection with explicit configuration\n      const connectionUrl = process.env.DATABASE_URL;\n      if (!connectionUrl) {\n        throw new Error('DATABASE_URL environment variable is required');\n      }\n      this.sql = postgres(connectionUrl, {\n        ssl: { rejectUnauthorized: false },\n        max: 5,\n        connect_timeout: 60,\n        idle_timeout: 60,\n        prepare: false,\n      });\n      \n      // Test connection\n      await this.sql`SELECT 1`;\n      console.log('‚úÖ Connected to Supabase successfully');\n    } catch (error: any) {\n      console.error('‚ùå Supabase connection failed:', error.message);\n      throw new Error(`Database connection failed: ${error.message}`);\n    }\n  }\n  \n  async getScenarios(): Promise<any[]> {\n    await this.connect();\n    \n    try {\n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `;\n      \n      console.log(`‚úÖ Retrieved ${scenarios.length} scenarios from database`);\n      return scenarios;\n    } catch (error: any) {\n      console.error('‚ùå Failed to fetch scenarios:', error.message);\n      throw new Error(`Scenario retrieval failed: ${error.message}`);\n    }\n  }\n  \n  async testConnection(): Promise<void> {\n    await this.connect();\n    \n    const result = await this.sql`SELECT version()`;\n    console.log('PostgreSQL version:', result[0].version.substring(0, 50));\n  }\n  \n  async close(): Promise<void> {\n    if (this.sql) {\n      await this.sql.end();\n      this.sql = null;\n    }\n  }\n}\n\nexport const simpleSupabaseService = new SimpleSupabaseService();","size_bytes":2120},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface UserStatus {\n  email: string;\n  questionsUsed: number;\n  questionsRemaining: number;\n  maxDailyQuestions: number;\n  limitReached: boolean;\n}\n\nexport interface AskResponse {\n  id: number;\n  question: string;\n  response: string;\n  timestamp: string;\n  questionsUsed: number;\n  questionsRemaining: number;\n  limitReached: boolean;\n}\n\nexport interface ChatExchange {\n  id: number;\n  email: string;\n  question: string;\n  response: string;\n  timestamp: string;\n}\n\nexport interface ChatHistory {\n  exchanges: ChatExchange[];\n}\n\n// API functions\nexport const api = {\n  // Get user status (questions remaining)\n  async getUserStatus(email: string): Promise<UserStatus> {\n    const res = await apiRequest(\n      \"GET\", \n      `/api/status?email=${encodeURIComponent(email)}`\n    );\n    return await res.json();\n  },\n\n  // Get all students assigned to training sessions (for teacher view)\n  async getTeacherStudents(email: string): Promise<any> {\n    const res = await apiRequest(\n      \"GET\", \n      `/api/teacher/students?email=${encodeURIComponent(email)}`\n    );\n    return await res.json();\n  },\n\n  // Ask a question\n  async askQuestion(email: string, question: string): Promise<AskResponse> {\n    const res = await apiRequest(\n      \"POST\", \n      \"/api/ask\", \n      { email, question }\n    );\n    return await res.json();\n  },\n\n  // Get chat history\n  async getChatHistory(email: string): Promise<ChatHistory> {\n    const res = await apiRequest(\n      \"GET\", \n      `/api/history?email=${encodeURIComponent(email)}`\n    );\n    return await res.json();\n  }\n};\n\nimport { useQuery } from '@tanstack/react-query';\n\nexport const teacherApi = {\n  getDashboard: async (email: string) => {\n    const response = await fetch(`/api/teacher/dashboard?email=${encodeURIComponent(email)}`);\n    if (!response.ok) {\n      throw new Error('√âchec de r√©cup√©ration des donn√©es du dashboard');\n    }\n    const data = await response.json();\n    console.log('API dashboard response:', data);\n    return data;\n  },\n\n  getScenarios: async (email: string) => {\n    const response = await fetch(`/api/teacher/scenarios?email=${encodeURIComponent(email)}`);\n    if (!response.ok) {\n      throw new Error('√âchec de r√©cup√©ration des sc√©narios');\n    }\n    const data = await response.json();\n    console.log('API scenarios response:', data);\n    return data;\n  },\n\n  getIndexes: async (email: string) => {\n    console.log('API: Fetching indexes for email:', email);\n    const url = `/api/admin/indexes?email=${encodeURIComponent(email)}`;\n    console.log('API: Request URL:', url);\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    console.log('API: Response status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API: Error response:', errorText);\n      throw new Error(`Failed to fetch indexes: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log('API: Indexes response data:', data);\n    return data;\n  },\n};\n\nimport { FirestoreService } from './firestore.service';\n\n// Updated version to use Supabase API\nexport const useDashboardData = (email: string) => {\n  return useQuery({\n    queryKey: ['dashboard-data', email],\n    queryFn: async () => {\n      console.log('üîÑ Fetching dashboard data for:', email);\n\n      try {\n        // Use new Supabase-based API endpoints\n        const response = await teacherApi.getDashboard(email);\n        console.log('üìä Dashboard data loaded:', response);\n        return response;\n      } catch (error) {\n        console.error('‚ùå Dashboard data error:', error);\n        throw error;\n      }\n    },\n    enabled: !!email,\n    retry: 1\n  });\n};\n\nexport const useAvailableIndexes = (email: string) => {\n  return useQuery({\n    queryKey: ['available-indexes', email],\n    queryFn: async () => {\n      const response = await fetch(`/api/admin/indexes?email=${encodeURIComponent(email)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch indexes');\n      }\n\n      const data = await response.json();\n      return data.indexes || [];\n    },\n    enabled: !!email,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n};\n\nexport const useTeacherStudents = (email: string) => {\n  return useQuery({\n    queryKey: ['teacher-students', email],\n    queryFn: async () => {\n      const data = await api.getTeacherStudents(email);\n      return data.students || [];\n    },\n    enabled: !!email,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n};\n\nexport const useTeacherScenarios = (email: string) => {\n  return useQuery({\n    queryKey: ['teacher-scenarios', email],\n    queryFn: async () => {\n      console.log('üîÑ Fetching teacher scenarios for:', email);\n      const data = await teacherApi.getScenarios(email);\n      console.log('üìä Teacher scenarios loaded:', data);\n      return data.scenarios || [];\n    },\n    enabled: !!email,\n    retry: 1\n  });\n};","size_bytes":5181},"client/src/lib/firebase-auth.ts":{"content":"// Firebase Auth supprim√©\n// Impl√©mentez votre propre syst√®me d'authentification\n\nexport async function authenticateWithEmail(email: string) {\n  try {\n    localStorage.setItem('userEmail', email);\n    return {\n      success: true,\n      email: email,\n    };\n  } catch (error) {\n    console.error('Erreur lors de l\\'authentification:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n}\n\nexport function getStoredEmail() {\n  return localStorage.getItem('userEmail');\n}\n\nexport async function signOut() {\n  try {\n    localStorage.removeItem('userEmail');\n    return { success: true };\n  } catch (error) {\n    console.error('Erreur lors de la d√©connexion:', error);\n    return { success: false, error };\n  }\n}","size_bytes":727},"client/src/lib/firebase.ts":{"content":"// Firebase supprim√© c√¥t√© client\n// Utilisez des appels API REST vers votre backend PostgreSQL\n\nconsole.warn('‚ö†Ô∏è Firebase supprim√© - utilisez des appels API REST');\n\nexport const db = null;\nexport const auth = null;\nexport default null;","size_bytes":244},"client/src/lib/firestore.service.ts":{"content":"// Service Firestore supprim√©\n// Remplacez par des appels API REST vers PostgreSQL\n\nexport interface DashboardData {\n  scenarios?: any[];\n  sessions?: any[];\n  stats?: {\n    totalScenarios?: number;\n    totalSessions?: number;\n    totalUsers?: number;\n    completionRate?: number;\n    activeSessions?: number;\n    completedSessions?: number;\n    totalStudents?: number;\n    partial?: boolean;\n  };\n}\n\nexport class FirestoreService {\n  static async getDashboardData(email: string): Promise<DashboardData> {\n    try {\n      // Remplacez par un appel API REST\n      const response = await fetch(`/api/dashboard?email=${encodeURIComponent(email)}`);\n      if (!response.ok) {\n        throw new Error('Erreur lors de la r√©cup√©ration des donn√©es');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur lors de la r√©cup√©ration des donn√©es du dashboard:', error);\n      throw error;\n    }\n  }\n\n  static async getScenarios(email: string): Promise<any[]> {\n    try {\n      // Remplacez par un appel API REST\n      const response = await fetch(`/api/scenarios?email=${encodeURIComponent(email)}`);\n      if (!response.ok) {\n        throw new Error('Erreur lors de la r√©cup√©ration des sc√©narios');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Erreur lors de la r√©cup√©ration des sc√©narios:', error);\n      throw error;\n    }\n  }\n}\n\nexport default FirestoreService;","size_bytes":1447},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1384},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Upload, Database, FileText, Search, Plus, Server, RefreshCw, Users } from \"lucide-react\";\n\ninterface DocumentData {\n  title: string;\n  content: string;\n  category: string;\n}\n\ninterface SQLQueryResult {\n  question: string;\n  sql_query: string;\n  results: any[];\n  executed_at: string;\n}\n\ninterface IndexData {\n  name: string;\n  dimension: number;\n}\n\ninterface PDFUploadData {\n  title: string;\n  category: string;\n  file: File | null;\n}\n\nexport default function AdminPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get admin email from URL parameters\n  const params = new URLSearchParams(window.location.search);\n  const adminEmail = params.get('email') || '';\n\n  // Admin authorization check\n  const ADMIN_EMAILS = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n  const isAuthorized = ADMIN_EMAILS.includes(adminEmail.toLowerCase());\n\n  // Document upload state\n  const [documentData, setDocumentData] = useState<DocumentData>({\n    title: \"\",\n    content: \"\",\n    category: \"pediatrie\"\n  });\n\n  // SQL query state\n  const [nlQuestion, setNlQuestion] = useState(\"\");\n  const [sqlResult, setSqlResult] = useState<SQLQueryResult | null>(null);\n\n  // Index management state\n  const [indexData, setIndexData] = useState<IndexData>({\n    name: \"\",\n    dimension: 1536\n  });\n\n  // PDF upload state\n  const [pdfUploadData, setPdfUploadData] = useState<PDFUploadData>({\n    title: \"\",\n    category: \"pediatrie\",\n    file: null\n  });\n\n  // Current selected index\n  const [selectedIndex, setSelectedIndex] = useState<string>(\"\");\n\n  // Get all documents/sources\n  const { data: sources, isLoading: sourcesLoading } = useQuery({\n    queryKey: ['/api/admin/documents', adminEmail],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", `/api/admin/documents?email=${encodeURIComponent(adminEmail)}`);\n      return await res.json();\n    },\n    enabled: isAuthorized\n  });\n\n  // Fetch available indexes\n  const {\n    data: indexesData,\n    isLoading: indexesLoading,\n    error: indexesError,\n    refetch: refetchIndexes,\n  } = useQuery({\n    queryKey: ['pinecone-indexes', adminEmail],\n    queryFn: async () => {\n      if (!adminEmail) throw new Error('Email required');\n      console.log('Fetching indexes for email:', adminEmail);\n\n      const response = await fetch(`/api/admin/indexes?email=${encodeURIComponent(adminEmail)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Indexes API response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Indexes API error:', errorText);\n        throw new Error(`Failed to fetch indexes: ${response.status} ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Indexes API response data:', data);\n      return data;\n    },\n    enabled: !!adminEmail,\n    staleTime: 0, // Always fetch fresh data\n    cacheTime: 0, // Don't cache\n  });\n\n  // Upload document mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (data: DocumentData) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/documents\", { ...data, email: adminEmail });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Document ajout√©\",\n        description: `${data.chunks_created} morceaux cr√©√©s pour \"${data.document_title}\"`,\n      });\n      setDocumentData({ title: \"\", content: \"\", category: \"pediatrie\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/documents'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'ajouter le document\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete document mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/admin/documents/${encodeURIComponent(documentId)}?email=${encodeURIComponent(adminEmail)}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Document supprim√©\",\n        description: \"Le document a √©t√© retir√© de la base de connaissances\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/documents'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le document\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Natural Language to SQL mutation\n  const sqlMutation = useMutation({\n    mutationFn: async (question: string) => {\n      return await apiRequest(\"POST\", \"/api/admin/nl-to-sql\", { question, email: adminEmail });\n    },\n    onSuccess: (data) => {\n      console.log('SQL Query Success:', data);\n      setSqlResult(data);\n      toast({\n        title: \"Requ√™te SQL g√©n√©r√©e\",\n        description: `SQL: ${data.sql_query}`,\n      });\n    },\n    onError: (error) => {\n      console.error('SQL Query Error:', error);\n      toast({\n        title: \"Erreur\",\n        description: error instanceof Error ? error.message : \"Impossible de convertir la question en SQL\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create Pinecone index mutation\n  const createIndexMutation = useMutation({\n    mutationFn: async (data: IndexData) => {\n      console.log('Creating index:', data);\n\n      const response = await fetch(\"/api/admin/indexes\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...data, email: adminEmail }),\n      });\n\n      console.log('Create index response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Create index error:', errorText);\n        throw new Error(`Failed to create index: ${response.status} ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log('Create index response data:', result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('Index creation successful:', data);\n      toast({\n        title: \"Index cr√©√©\",\n        description: data.message || `Index \"${indexData.name}\" cr√©√© avec succ√®s`,\n      });\n      setIndexData({ name: \"\", dimension: 1536 });\n      refetchIndexes();\n    },\n    onError: (error: any) => {\n      console.error('Index creation error:', error);\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de cr√©er l'index\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Switch Pinecone index mutation\n  const switchIndexMutation = useMutation({\n    mutationFn: async (indexName: string) => {\n      console.log('Switching to index:', indexName);\n\n      const response = await fetch(\"/api/admin/indexes/switch\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ indexName, email: adminEmail }),\n      });\n\n      console.log('Switch index response status:', response.status);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Switch index error:', errorText);\n        throw new Error(`Failed to switch index: ${response.status} ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Switch index response data:', data);\n      return data;\n    },\n    onSuccess: (data) => {\n      console.log('Index switch successful:', data);\n      toast({\n        title: \"Index chang√©\",\n        description: data.message || `Index chang√© vers: ${selectedIndex}`,\n      });\n      setSelectedIndex(\"\");\n      // Invalidate both queries to refresh the data\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/documents'] });\n      queryClient.invalidateQueries({ queryKey: ['pinecone-indexes'] });\n    },\n    onError: (error: any) => {\n      console.error('Index switch error:', error);\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de changer d'index\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Upload PDF mutation\n  const uploadPDFMutation = useMutation({\n    mutationFn: async (data: PDFUploadData) => {\n      const formData = new FormData();\n      formData.append(\"email\", adminEmail);\n      formData.append(\"title\", data.title);\n      formData.append(\"category\", data.category);\n      if (data.file) {\n        formData.append(\"pdf\", data.file);\n      }\n\n      const res = await fetch(\"/api/admin/upload-pdf\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Upload failed\");\n      }\n\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"PDF trait√©\",\n        description: `${data.message} (${data.pages} pages, ${data.textLength} caract√®res)`,\n      });\n      setPdfUploadData({ title: \"\", category: \"pediatrie\", file: null });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/documents'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de traiter le PDF\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleUploadDocument = () => {\n    if (!documentData.title || !documentData.content) {\n      toast({\n        title: \"Champs requis\",\n        description: \"Veuillez remplir le titre et le contenu\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadMutation.mutate(documentData);\n  };\n\n  // Handle SQL query execution\n  const handleSQLQuery = () => {\n    if (!nlQuestion.trim()) {\n      toast({\n        title: \"Question requise\",\n        description: \"Veuillez saisir une question\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sqlMutation.mutate(nlQuestion);\n  };\n\n  const handleCreateIndex = () => {\n    if (!indexData.name.trim()) {\n      toast({\n        title: \"Nom requis\",\n        description: \"Veuillez saisir un nom pour l'index\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createIndexMutation.mutate(indexData);\n  };\n\n  const handleSwitchIndex = () => {\n    if (!selectedIndex.trim()) {\n      toast({\n        title: \"Index requis\",\n        description: \"Veuillez s√©lectionner un index\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    switchIndexMutation.mutate(selectedIndex);\n  };\n\n  const handlePDFUpload = () => {\n    if (!pdfUploadData.title.trim() || !pdfUploadData.file) {\n      toast({\n        title: \"Champs requis\",\n        description: \"Veuillez fournir un titre et s√©lectionner un fichier PDF\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadPDFMutation.mutate(pdfUploadData);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file && file.type === 'application/pdf') {\n      setPdfUploadData(prev => ({ ...prev, file }));\n    } else {\n      toast({\n        title: \"Type de fichier invalide\",\n        description: \"Veuillez s√©lectionner un fichier PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Check authorization\n  if (!isAuthorized) {\n    return (\n      <div className=\"container mx-auto p-6 max-w-2xl\">\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-6 text-center\">\n          <h1 className=\"text-2xl font-bold text-red-700 mb-2\">Acc√®s Non Autoris√©</h1>\n          <p className=\"text-red-600 mb-4\">\n            Vous n'avez pas l'autorisation d'acc√©der √† cette page d'administration.\n          </p>\n          <button\n            onClick={() => window.location.href = '/'}\n            className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n          >\n            Retour √† l'accueil\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Administration</h1>\n            <p className=\"text-muted-foreground\">\n              G√©rez vos documents et interrogez la base de donn√©es en langage naturel\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={() => window.location.href = `/teacher/${adminEmail}`}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Users className=\"h-4 w-4\" />\n              Page Enseignant\n            </Button>\n            <Button \n              onClick={() => window.location.href = `/?email=${encodeURIComponent(adminEmail)}`}\n              className=\"flex items-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n            >\n              <Search className=\"h-4 w-4\" />\n              Acc√©der au Chatbot\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"documents\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"documents\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Documents\n          </TabsTrigger>\n          <TabsTrigger value=\"indexes\" className=\"flex items-center gap-2\">\n            <Server className=\"h-4 w-4\" />\n            Index Pinecone\n          </TabsTrigger>\n          <TabsTrigger value=\"pdf\" className=\"flex items-center gap-2\">\n            <Upload className=\"h-4 w-4\" />\n            Upload PDF\n          </TabsTrigger>\n          <TabsTrigger value=\"sql\" className=\"flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            Requ√™tes SQL\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Documents Management Tab */}\n        <TabsContent value=\"documents\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Upload Document Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Upload className=\"h-5 w-5\" />\n                  Ajouter du Texte dans l'Index\n                </CardTitle>\n                <CardDescription>\n                  Saisissez du texte directement dans l'index Pinecone actuellement actif\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Index actuel :</strong> Ce contenu sera ajout√© √† l'index Pinecone actuellement s√©lectionn√©. \n                    Vous pouvez coller du texte depuis Word, des sites web, ou saisir directement.\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"title\">Titre du document</Label>\n                  <Input\n                    id=\"title\"\n                    value={documentData.title}\n                    onChange={(e) => setDocumentData(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Ex: Protocole de soins p√©diatriques...\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Cat√©gorie</Label>\n                  <Select \n                    value={documentData.category} \n                    onValueChange={(value) => setDocumentData(prev => ({ ...prev, category: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pediatrie\">P√©diatrie</SelectItem>\n                      <SelectItem value=\"kinesitherapie-respiratoire\">Kin√©sith√©rapie respiratoire</SelectItem>\n                      <SelectItem value=\"musculo-squelettique\">Musculo-squelettique / Orthop√©die</SelectItem>\n                      <SelectItem value=\"neurologie\">Neurologie</SelectItem>\n                      <SelectItem value=\"geriatrie\">G√©riatrie</SelectItem>\n                      <SelectItem value=\"perineologie\">P√©rin√©ologie & Obst√©trique</SelectItem>\n                      <SelectItem value=\"oncologie\">Oncologie</SelectItem>\n                      <SelectItem value=\"ergonomie\">Ergonomie</SelectItem>\n                      <SelectItem value=\"transversaux\">Domaines transversaux et √©mergents</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Contenu du document</Label>\n                  <Textarea\n                    id=\"content\"\n                    value={documentData.content}\n                    onChange={(e) => setDocumentData(prev => ({ ...prev, content: e.target.value }))}\n                    placeholder=\"Collez ici le contenu de votre document (copi√© depuis Word, un site web, etc.) ou saisissez directement...\"\n                    className=\"min-h-32\"\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    üí° Astuce : Vous pouvez copier-coller depuis n'importe quelle source (Word, PDF, web, etc.)\n                  </p>\n                </div>\n\n                <Button \n                  onClick={handleUploadDocument}\n                  disabled={uploadMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {uploadMutation.isPending ? \"üì§ Traitement...\" : \"üì§ Ajouter dans l'Index Actif\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Documents List Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Documents Existants\n                </CardTitle>\n                <CardDescription>\n                  {sources?.sources?.length || 0} document(s) dans la base de connaissances\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {sourcesLoading ? (\n                  <div className=\"text-center py-4\">Chargement...</div>\n                ) : (\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {sources?.sources?.length > 0 ? (\n                      sources.sources.map((source: string, index: number) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <span className=\"text-sm font-medium\">{source}</span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(source)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        Aucun document trouv√©. Ajoutez votre premier document !\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Index Management Tab */}\n        <TabsContent value=\"indexes\" className=\"space-y-6\">\n          {/* Rules and Instructions */}\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n                <Server className=\"h-5 w-5\" />\n                R√®gles pour les Index Pinecone\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">üìù R√®gles de nommage :</h4>\n                  <ul className=\"text-sm space-y-1 text-blue-700\">\n                    <li>‚Ä¢ Lettres minuscules uniquement (a-z)</li>\n                    <li>‚Ä¢ Chiffres autoris√©s (0-9)</li>\n                    <li>‚Ä¢ Tirets (-), points (.) et underscores (_)</li>\n                    <li>‚Ä¢ Maximum 45 caract√®res</li>\n                    <li>‚Ä¢ Exemples valides: cours-pediatrie, ecos_scenarios, documents.medicaux</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">üìö Utilisation :</h4>\n                  <ul className=\"text-sm space-y-1 text-blue-700\">\n                    <li>‚Ä¢ Un index = une base de connaissances sp√©cialis√©e</li>\n                    <li>‚Ä¢ Changez d'index pour cibler diff√©rents domaines</li>\n                    <li>‚Ä¢ Uploadez des PDF ou saisissez du texte dans l'index actif</li>\n                    <li>‚Ä¢ Les documents sont automatiquement d√©coup√©s en sections</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Create Index Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Plus className=\"h-5 w-5\" />\n                  Cr√©er un Index Pinecone\n                </CardTitle>\n                <CardDescription>\n                  Cr√©ez un nouvel index pour organiser vos documents par th√©matique\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"indexName\">Nom de l'index</Label>\n                  <Input\n                    id=\"indexName\"\n                    placeholder=\"ex: cours-pediatrie, ecos_scenarios, documents.medicaux\"\n                    value={indexData.name}\n                    onChange={(e) => setIndexData(prev => ({ ...prev, name: e.target.value }))}\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Respectez les r√®gles de nommage ci-dessus\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dimension\">Dimension des vecteurs</Label>\n                  <Input\n                    id=\"dimension\"\n                    type=\"number\"\n                    value={indexData.dimension}\n                    onChange={(e) => setIndexData(prev => ({ ...prev, dimension: parseInt(e.target.value) || 1536 }))}\n                    disabled\n                  />\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Valeur optimale pour OpenAI text-embedding-3-small\n                  </p>\n                </div>\n\n                <Button \n                  onClick={handleCreateIndex}\n                  disabled={createIndexMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {createIndexMutation.isPending ? \"Cr√©ation...\" : \"Cr√©er l'Index\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Switch Index Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <RefreshCw className=\"h-5 w-5\" />\n                  Changer d'Index\n                </CardTitle>\n                <CardDescription>\n                  Basculez vers un index existant pour charger/g√©rer ses documents\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Important :</strong> Apr√®s avoir chang√© d'index, vous pourrez :\n                  </p>\n                  <ul className=\"text-sm text-yellow-700 mt-1 ml-4\">\n                    <li>‚Ä¢ Voir les documents de cet index dans l'onglet \"Documents\"</li>\n                    <li>‚Ä¢ Uploader de nouveaux PDF dans cet index</li>\n                    <li>‚Ä¢ Ajouter du texte directement dans cet index</li>\n                    <li>‚Ä¢ Le chatbot utilisera uniquement cet index pour r√©pondre</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <Label>S√©lectionner un index</Label>\n                  {indexesLoading ? (\n                    <div className=\"text-sm text-muted-foreground\">Chargement...</div>\n                  ) : (\n                    <Select value={selectedIndex} onValueChange={setSelectedIndex}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Choisir un index pour charger ses documents\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {indexesData?.indexes?.map((index: any) => (\n                          <SelectItem key={index.name} value={index.name}>\n                            üìÅ {index.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  )}\n                </div>\n\n                <Button \n                  onClick={handleSwitchIndex}\n                  disabled={switchIndexMutation.isPending || !selectedIndex}\n                  className=\"w-full\"\n                >\n                  {switchIndexMutation.isPending ? \"Changement...\" : \"Activer cet Index\"}\n                </Button>\n\n                {/* Current indexes list */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Tous vos index :</Label>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => refetchIndexes()}\n                      disabled={indexesLoading}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <RefreshCw className=\"h-3 w-3\" />\n                      Actualiser\n                    </Button>\n                  </div>\n\n                  {indexesError && (\n                    <div className=\"bg-red-50 border border-red-200 rounded p-3 mb-4\">\n                      <p className=\"text-red-600 text-sm\">\n                        Erreur lors du chargement des index: {indexesError.message}\n                      </p>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => refetchIndexes()}\n                        className=\"mt-2\"\n                      >\n                        R√©essayer\n                      </Button>\n                    </div>\n                  )}\n\n                  {indexesLoading && (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-gray-500\">Chargement des index...</p>\n                    </div>\n                  )}\n\n                  <div className=\"flex flex-wrap gap-2\">\n                    {indexesData?.indexes?.length > 0 ? (\n                        indexesData.indexes.map((index: any) => (\n                          <Badge key={index.name} variant=\"secondary\" className=\"text-xs\">\n                            üìÅ {index.name} ({index.status})\n                          </Badge>\n                        ))\n                    ) : (\n                      !indexesLoading && (\n                        <p className=\"text-sm text-muted-foreground\">Aucun index trouv√©. Cr√©ez-en un d'abord.</p>\n                      )\n                    )}\n\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* PDF Upload Tab */}\n        <TabsContent value=\"pdf\" className=\"space-y-6\">\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-green-800\">\n                <Upload className=\"h-5 w-5\" />\n                Comment charger des documents dans un index ?\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <h4 className=\"font-semibold text-green-800 mb-2\">üìÑ Upload de PDF :</h4>\n                  <ul className=\"text-sm space-y-1 text-green-700\">\n                    <li>‚Ä¢ S√©lectionnez l'index de destination dans l'onglet \"Index Pinecone\"</li>\n                    <li>‚Ä¢ Uploadez votre PDF ici avec un titre et une cat√©gorie</li>\n                    <li>‚Ä¢ Le contenu sera automatiquement d√©coup√© et index√©</li>\n                    <li>‚Ä¢ Formats support√©s : PDF avec texte extractible</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-green-800 mb-2\">‚úèÔ∏è Saisie de texte :</h4>\n                  <ul className=\"text-sm space-y-1 text-green-700\">\n                    <li>‚Ä¢ Utilisez l'onglet \"Documents\" pour saisir du texte directement</li>\n                    <li>‚Ä¢ Collez du contenu depuis Word, sites web, etc.</li>\n                    <li>‚Ä¢ Le texte sera trait√© comme un PDF</li>\n                    <li>‚Ä¢ Id√©al pour du contenu court ou format√©</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"h-5 w-5\" />\n                Upload et Traitement de PDF\n              </CardTitle>\n              <CardDescription>\n                Uploadez un fichier PDF dans l'index Pinecone actuellement actif\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Index actuel :</strong> Ce PDF sera ajout√© √† l'index Pinecone actuellement s√©lectionn√©. \n                  Changez d'index dans l'onglet \"Index Pinecone\" si n√©cessaire.\n                </p>\n              </div>\n\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"pdfTitle\">Titre du document</Label>\n                  <Input\n                    id=\"pdfTitle\"\n                    placeholder=\"ex: Cours de P√©diatrie - Chapitre 1\"\n                    value={pdfUploadData.title}\n                    onChange={(e) => setPdfUploadData(prev => ({ ...prev, title: e.target.value }))}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"pdfCategory\">Cat√©gorie</Label>\n                  <Select \n                    value={pdfUploadData.category} \n                    onValueChange={(value) => setPdfUploadData(prev => ({ ...prev, category: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"S√©lectionner une cat√©gorie\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pediatrie\">P√©diatrie</SelectItem>\n                      <SelectItem value=\"kinesitherapie-respiratoire\">Kin√©sith√©rapie respiratoire</SelectItem>\n                      <SelectItem value=\"musculo-squelettique\">Musculo-squelettique / Orthop√©die</SelectItem>\n                      <SelectItem value=\"neurologie\">Neurologie</SelectItem>\n                      <SelectItem value=\"geriatrie\">G√©riatrie</SelectItem>\n                      <SelectItem value=\"perineologie\">P√©rin√©ologie & Obst√©trique</SelectItem>\n                      <SelectItem value=\"oncologie\">Oncologie</SelectItem>\n                      <SelectItem value=\"ergonomie\">Ergonomie</SelectItem>\n                      <SelectItem value=\"transversaux\">Domaines transversaux et √©mergents</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"pdfFile\">Fichier PDF</Label>\n                <Input\n                  id=\"pdfFile\"\n                  type=\"file\"\n                  accept=\".pdf\"\n                  onChange={handleFileChange}\n                  className=\"cursor-pointer\"\n                />\n                {pdfUploadData.file && (\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    üìÅ Fichier s√©lectionn√© : {pdfUploadData.file.name}\n                  </p>\n                )}\n              </div>\n\n              <Button \n                onClick={handlePDFUpload}\n                disabled={uploadPDFMutation.isPending || !pdfUploadData.file || !pdfUploadData.title}\n                className=\"w-full\"\n              >\n                {uploadPDFMutation.isPending ? \"üì§ Traitement en cours...\" : \"üì§ Uploader dans l'Index Actif\"}\n              </Button>\n\n              <div className=\"space-y-2\">\n                <div className=\"text-sm font-medium\">Sp√©cifications techniques :</div>\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  <p>‚Ä¢ üìù Le PDF sera automatiquement divis√© en sections pour une recherche optimale</p>\n                  <p>‚Ä¢ üîç Seuls les fichiers PDF avec du texte extractible sont support√©s</p>\n                  <p>‚Ä¢ üìè Taille maximale : 50MB</p>\n                  <p>‚Ä¢ üß© Chaque section deviendra un \"chunk\" recherchable dans l'index</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* SQL Queries Tab */}\n        <TabsContent value=\"sql\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Requ√™te en Langage Naturel\n              </CardTitle>\n              <CardDescription>\n                Posez vos questions sur la base de donn√©es en fran√ßais, elles seront automatiquement converties en SQL\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"nlQuestion\">Votre question</Label>\n                <Textarea\n                  id=\"nlQuestion\"\n                  value={nlQuestion}\n                  onChange={(e) => setNlQuestion(e.target.value)}\n                  placeholder=\"Ex: Combien d'utilisateurs ont pos√© des questions aujourd'hui ?\"\n                  className=\"min-h-20\"\n                />\n              </div>\n\n              <Button \n                onClick={handleSQLQuery}\n                disabled={sqlMutation.isPending || !nlQuestion.trim()}\n                className=\"w-full\"\n              >\n                <Search className=\"w-4 h-4 mr-2\" />\n                {sqlMutation.isPending ? \"Conversion en cours...\" : \"Convertir en SQL et Ex√©cuter\"}\n              </Button>\n\n              {sqlMutation.isPending && (\n                <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n                    <span className=\"text-blue-700\">G√©n√©ration et ex√©cution de la requ√™te SQL...</span>\n                  </div>\n                </div>\n              )}\n\n              {sqlResult && (\n                <div className=\"mt-6 space-y-4\">\n                  <div>\n                    <Label className=\"text-green-700 font-semibold\">‚úÖ Requ√™te SQL g√©n√©r√©e et ex√©cut√©e</Label>\n                    <div className=\"bg-gray-100 p-3 rounded font-mono text-sm border\">\n                      {sqlResult.sql_query}\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Ex√©cut√©e le {new Date(sqlResult.executed_at).toLocaleString('fr-FR')}\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label className=\"font-semibold\">R√©sultats ({sqlResult.results.length} ligne(s))</Label>\n                    {sqlResult.results.length > 0 ? (\n                      <div className=\"bg-gray-50 p-3 rounded max-h-64 overflow-auto border\">\n                        <pre className=\"text-sm\">\n                          {JSON.stringify(sqlResult.results, null, 2)}\n                        </pre>\n                      </div>\n                    ) : (\n                      <div className=\"bg-yellow-50 p-3 rounded border border-yellow-200\">\n                        <p className=\"text-yellow-800\">Aucun r√©sultat trouv√© pour cette requ√™te.</p>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"bg-blue-50 p-3 rounded border border-blue-200\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>Question:</strong> {sqlResult.question}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":38430},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api, UserStatus, ChatExchange } from \"@/lib/api\";\nimport ChatArea from \"@/components/chat/ChatArea\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport MobileMenu from \"@/components/layout/MobileMenu\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport LimitReachedModal from \"@/components/modals/LimitReachedModal\";\nimport ErrorModal from \"@/components/modals/ErrorModal\";\n\ninterface ChatPageProps {\n  email?: string;\n}\n\nexport default function Chat({ email: propEmail }: ChatPageProps) {\n  // Get email from URL params or props\n  const urlParams = new URLSearchParams(window.location.search);\n  const emailFromUrl = urlParams.get('email');\n  const email = propEmail || emailFromUrl || '';\n  \n  console.log('Detected email:', email);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isLimitReachedModalOpen, setIsLimitReachedModalOpen] = useState(false);\n  const [isErrorModalOpen, setIsErrorModalOpen] = useState(false);\n  const [messages, setMessages] = useState<ChatExchange[]>([]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Get user status (questions remaining)\n  const { \n    data: userStatus,\n    isLoading: isStatusLoading,\n    isError: isStatusError,\n    refetch: refetchStatus\n  } = useQuery({\n    queryKey: ['/api/status', email],\n    queryFn: () => api.getUserStatus(email),\n  });\n\n  // Get chat history\n  const { \n    data: chatHistory,\n    isLoading: isHistoryLoading,\n    isError: isHistoryError\n  } = useQuery({\n    queryKey: ['/api/history', email],\n    queryFn: () => api.getChatHistory(email),\n    onSuccess: (data) => {\n      if (data?.exchanges) {\n        // Sort chronologically (oldest first)\n        const sortedExchanges = [...data.exchanges].sort(\n          (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n        );\n        setMessages(sortedExchanges);\n      }\n    }\n  });\n\n  // Mutation for asking questions\n  const askMutation = useMutation({\n    mutationFn: (question: string) => api.askQuestion(email, question),\n    onMutate: () => {\n      setIsTyping(true);\n    },\n    onSuccess: (data) => {\n      // Add the new exchange to messages\n      setMessages(prevMessages => [\n        ...prevMessages,\n        {\n          id: data.id,\n          email,\n          question: data.question,\n          response: data.response,\n          timestamp: data.timestamp\n        }\n      ]);\n      \n      // Check if limit reached\n      if (data.limitReached) {\n        setIsLimitReachedModalOpen(true);\n      }\n      \n      // Refresh user status\n      queryClient.invalidateQueries({ queryKey: ['/api/status', email] });\n    },\n    onError: () => {\n      setIsErrorModalOpen(true);\n    },\n    onSettled: () => {\n      setIsTyping(false);\n    }\n  });\n\n  // Send a question\n  const handleSendQuestion = (question: string) => {\n    if (!question.trim()) return;\n    \n    // Check if daily limit reached\n    if (userStatus?.limitReached) {\n      setIsLimitReachedModalOpen(true);\n      return;\n    }\n    \n    askMutation.mutate(question);\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col md:flex-row bg-neutral-50\">\n      {/* Sidebar (desktop) */}\n      <Sidebar \n        email={email} \n        userStatus={userStatus} \n        isLoading={isStatusLoading}\n        className=\"hidden md:flex\" \n      />\n      \n      {/* Main content */}\n      <div className=\"flex-grow flex flex-col\">\n        {/* Mobile header */}\n        <div className=\"md:hidden flex items-center justify-between p-4 border-b border-neutral-100 bg-white\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary flex items-center justify-center rounded-lg\">\n              <span className=\"material-icons text-white text-sm\">school</span>\n            </div>\n            <h1 className=\"font-heading font-semibold text-lg text-neutral-800\">Assistant de Cours</h1>\n          </div>\n          <button \n            onClick={() => setIsMobileMenuOpen(true)}\n            className=\"p-2 rounded-full hover:bg-neutral-100\"\n          >\n            <span className=\"material-icons text-neutral-600\">menu</span>\n          </button>\n        </div>\n        \n        {/* Chat area */}\n        <ChatArea \n          messages={messages}\n          isTyping={isTyping}\n          onSendQuestion={handleSendQuestion}\n          userStatus={userStatus}\n          isLoading={isHistoryLoading || isStatusLoading}\n        />\n      </div>\n      \n      {/* Mobile menu */}\n      <MobileMenu \n        isOpen={isMobileMenuOpen}\n        onClose={() => setIsMobileMenuOpen(false)}\n        email={email}\n        userStatus={userStatus}\n        isLoading={isStatusLoading}\n      />\n      \n      {/* Modals */}\n      <LimitReachedModal \n        isOpen={isLimitReachedModalOpen}\n        onClose={() => setIsLimitReachedModalOpen(false)}\n      />\n      \n      <ErrorModal \n        isOpen={isErrorModalOpen}\n        onClose={() => setIsErrorModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":5082},"client/src/pages/diagnostic.tsx":{"content":"import DeepDiagnostic from \"@/components/debug/DeepDiagnostic\";\nimport AuthDebugger from \"@/components/debug/AuthDebugger\";\nimport CustomElementDiagnostic from \"@/components/debug/CustomElementDiagnostic\";\n\nexport default function DiagnosticPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">System Diagnostics</h1>\n          <p className=\"text-gray-600\">Deep analysis of application health and performance</p>\n        </div>\n      </div>\n      <div className=\"py-6\">\n        <DeepDiagnostic />\n        <AuthDebugger email=\"cherubindavid@gmail.com\" />\n        <CustomElementDiagnostic />\n      </div>\n    </div>\n  );\n}","size_bytes":804},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/student.tsx":{"content":"import { useState } from \"react\";\nimport React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Play, Clock, CheckCircle2, AlertCircle, BarChart3, FileText, Calendar, CheckCircle, BookOpen, TrendingUp } from \"lucide-react\";\nimport PatientSimulator from \"@/components/ecos/PatientSimulator\";\nimport EvaluationReport from \"@/components/ecos/EvaluationReport\";\nimport StudentDiagnostic from \"@/components/debug/StudentDiagnostic\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\n\ninterface StudentPageProps {\n  email: string;\n}\n\nexport default function StudentPage({ email }: StudentPageProps) {\n  const [activeSessionId, setActiveSessionId] = useState<number | null>(null);\n  const [viewingReport, setViewingReport] = useState<number | null>(null);\n  const [showDiagnostic, setShowDiagnostic] = useState(false);\n  const [accountCreated, setAccountCreated] = useState(false);\n\n  // Check for scenario parameter in URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const scenarioParam = urlParams.get('scenario');\n\n  // Decode email if it comes from URL (in case it's URL encoded)\n  const decodedEmail = email ? decodeURIComponent(email) : email;\n\n  // Auto-create student account when accessing via URL\n  React.useEffect(() => {\n    const autoCreateAccount = async () => {\n      if (decodedEmail && !accountCreated) {\n        try {\n          console.log('üöÄ Auto-creating student account for:', decodedEmail);\n\n          const response = await apiRequest('POST', '/api/student/auto-register', {\n            email: decodedEmail\n          });\n\n          console.log('‚úÖ Student account created/updated:', response);\n          \n          // If this is a new user, also create webhook session for integration\n          if (response.isNewUser) {\n            try {\n              await apiRequest('POST', '/api/webhook', {\n                email: decodedEmail\n              });\n              console.log('üîó Webhook session created for new user:', decodedEmail);\n            } catch (webhookError) {\n              console.log('‚ö†Ô∏è Webhook integration warning:', webhookError);\n            }\n          }\n          \n          setAccountCreated(true);\n        } catch (error) {\n          console.error('‚ùå Error auto-creating student account:', error);\n          // Continue anyway - the existing fallback in available-scenarios will handle it\n          setAccountCreated(true);\n        }\n      }\n    };\n\n    autoCreateAccount();\n  }, [decodedEmail, accountCreated]);\n\n  // Fetch available scenarios from student endpoint (filtered by training sessions)\n  const { data: studentData, isLoading: scenariosLoading } = useQuery({\n    queryKey: ['student-scenarios', decodedEmail],\n    queryFn: async () => {\n      console.log('Fetching available scenarios for email:', decodedEmail);\n      const response = await apiRequest('GET', `/api/student/available-scenarios?email=${encodeURIComponent(decodedEmail)}`);\n      console.log('Available scenarios response:', response);\n      console.log('Number of scenarios received:', response.scenarios?.length || 0);\n      return response;\n    },\n    enabled: !!decodedEmail,\n  });\n\n  const scenarios = studentData?.scenarios || [];\n  const trainingSessions = studentData?.trainingSessions || [];\n\n  // Fetch student sessions\n  const { data: sessions, isLoading: sessionsLoading, refetch: refetchSessions } = useQuery({\n    queryKey: ['student-sessions', decodedEmail],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/ecos/sessions?email=${decodedEmail}`);\n      return response.sessions || [];\n    }\n  });\n\n\n  // Start session mutation\n  const startSessionMutation = useMutation({\n    mutationFn: async (scenarioId: number) => {\n      console.log('Starting session with decoded email:', decodedEmail, 'and scenario:', scenarioId);\n      return apiRequest('POST', '/api/ecos/sessions', {\n        email: decodedEmail,\n        scenarioId\n      });\n    },\n    onSuccess: (data) => {\n      setActiveSessionId(data.sessionId);\n      refetchSessions();\n    }\n  });\n\n  const handleStartSession = (scenarioId: number) => {\n    startSessionMutation.mutate(scenarioId);\n  };\n\n  // Auto-start session if scenario parameter is provided in URL\n  React.useEffect(() => {\n    if (scenarioParam && !activeSessionId && scenarios && scenarios.length > 0) {\n      const scenarioId = parseInt(scenarioParam);\n      const scenarioExists = scenarios.find((s: any) => s.id === scenarioId);\n      if (scenarioExists) {\n        console.log('Auto-starting scenario:', scenarioId);\n        handleStartSession(scenarioId);\n      }\n    }\n  }, [scenarioParam, scenarios, activeSessionId]);\n\n  const handleSessionEnd = () => {\n    setActiveSessionId(null);\n    refetchSessions();\n\n    // Clear the scenario parameter from URL to prevent auto-restart\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has('scenario')) {\n      urlParams.delete('scenario');\n      const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');\n      window.history.replaceState({}, '', newUrl);\n    }\n  };\n\n  const handleViewReport = (sessionId: number) => {\n    setViewingReport(sessionId);\n  };\n\n  // If viewing diagnostic\n  if (showDiagnostic) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"bg-white border-b border-gray-200 mb-6\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Diagnostic √âtudiant</h1>\n              <Button variant=\"outline\" onClick={() => setShowDiagnostic(false)}>\n                Retour au Dashboard\n              </Button>\n            </div>\n          </div>\n        </div>\n        <StudentDiagnostic email={decodedEmail} />\n      </div>\n    );\n  }\n\n  // If viewing report\n  if (viewingReport) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"bg-white border-b border-gray-200 mb-6\">\n          <div className=\"max-w-7xl mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">Rapport d'√âvaluation</h1>\n              <Button variant=\"outline\" onClick={() => setViewingReport(null)}>\n                Retour au Dashboard\n              </Button>\n            </div>\n          </div>\n        </div>\n        <EvaluationReport sessionId={viewingReport} email={decodedEmail} />\n      </div>\n    );\n  }\n\n  // If in active session\n  if (activeSessionId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <PatientSimulator \n          sessionId={activeSessionId} \n          email={decodedEmail} \n          onSessionEnd={handleSessionEnd}\n        />\n      </div>\n    );\n  }\n\n  const stats = {\n    completedSessions: sessions?.filter((s: any) => s.status === 'completed').length || 0,\n    inProgressSessions: sessions?.filter((s: any) => s.status === 'in_progress').length || 0,\n    availableScenarios: scenarios?.length || 0\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard √âtudiant ECOS</h1>\n              <p className=\"text-gray-600\">Bienvenue, {decodedEmail}</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                Mode √âtudiant\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hero Section - Main Section */}\n      <div className=\"max-w-7xl mx-auto px-6 py-6\">\n        <section className=\"hero bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg mb-8\">\n          <div className=\"px-6 py-12\">\n            <div className=\"hero-content flex items-center gap-12\">\n              <div className=\"flex-1\">\n                <div className=\"hero-text\">\n                  <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">L'Avenir de la Formation M√©dicale</h2>\n                  <p className=\"text-gray-600 text-lg leading-relaxed mb-6\">\n                    Plateforme d'apprentissage nouvelle g√©n√©ration avec simulations IA, √©valuations intelligentes et suivi personnalis√© pour les professionnels de sant√©\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <img \n                  src=\"/images/happy_student.jpg\"\n                  alt=\"√âtudiant heureux\"\n                  className=\"w-full h-64 object-cover rounded-lg shadow-lg\"\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sc√©narios Disponibles</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.availableScenarios}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/cahier.png\"\n                    alt=\"Sc√©narios disponibles\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sessions en Cours</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.inProgressSessions}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/horloge.png\"\n                    alt=\"Sessions en cours\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sessions Termin√©es</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.completedSessions}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/vraie.png\"\n                    alt=\"Sessions termin√©es\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"scenarios\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 h-20 p-2\">\n            <TabsTrigger value=\"scenarios\" className=\"h-16 px-8 py-4 mx-1 tabs-trigger-enhanced\">Nouveaux Examens</TabsTrigger>\n            <TabsTrigger value=\"history\" className=\"h-16 px-8 py-4 mx-1 tabs-trigger-enhanced\">Historique</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"scenarios\" className=\"mt-6\">\n          {/* Training Sessions Info */}\n          {!activeSessionId && !viewingReport && trainingSessions?.length > 0 && (\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Sessions de Formation Actives\n                </CardTitle>\n                <CardDescription>\n                  Vous participez actuellement aux sessions de formation suivantes\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {trainingSessions.map((session: any) => (\n                    <div key={session.sessionId} className=\"flex items-center gap-2 p-2 bg-green-50 rounded border border-green-200\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-800\">{session.sessionTitle}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Available Scenarios */}\n          {!activeSessionId && !viewingReport && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Sc√©narios Disponibles</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {scenariosLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <Card key={i} className=\"animate-pulse\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-full mb-4\"></div>\n                          <div className=\"h-8 bg-gray-200 rounded w-1/2\"></div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : scenarios?.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"p-8 text-center\">\n                      <BookOpen className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucun sc√©nario disponible</h3>\n                      <p className=\"text-gray-600\">\n                        {studentData?.message || \"Aucun sc√©nario ECOS n'est actuellement disponible pour vous.\"}\n                      </p>\n                      {trainingSessions?.length === 0 && (\n                        <p className=\"text-sm text-gray-500 mt-2\">\n                          Vous n'√™tes inscrit √† aucune session de formation active. Contactez votre enseignant pour plus d'informations.\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {scenarios?.map((scenario: any) => (\n                      <div key={scenario.id} className=\"feature-card feature-card-overlay\">\n                        {/* Photo panoramique en haut */}\n                        <div className=\"relative\">\n                          {scenario.id === 1 ? (\n                            <img \n                              src=\"/images/douleur_thoracique.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Consultation d'urgence - Douleur thoracique\"\n                            />\n                          ) : scenario.id === 2 ? (\n                            <img \n                              src=\"/images/douleur_thoracic.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Examen de l'√©paule douloureuse\"\n                            />\n                          ) : scenario.id === 3 ? (\n                            <img \n                              src=\"/images/trauma_poignet.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Traumatisme du poignet\"\n                            />\n                          ) : scenario.id === 4 ? (\n                            <img \n                              src=\"/images/arthrose_de_la_main.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Arthrose de la main\"\n                            />\n                          ) : scenario.id === 5 ? (\n                            <img \n                              src=\"/images/syndrome_du_canal_carpien.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Syndrome du canal carpien\"\n                            />\n                          ) : (\n                            <img \n                              src=\"/images/cahier.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Sc√©nario d'examen\"\n                            />\n                          )}\n\n                          {/* Overlay qui appara√Æt au hover */}\n                          <div className=\"feature-overlay-content\">\n                            <div className=\"feature-overlay-text\">\n                              <Play className=\"w-8 h-8 mx-auto mb-2\" />\n                              Commencer l'Examen\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Contenu de la carte */}\n                        <div className=\"feature-content\">\n                          <h3 className=\"feature-title\">{scenario.title}</h3>\n                          <p className=\"feature-description line-clamp-3\">\n                            {scenario.description}\n                          </p>\n                          <Button\n                            onClick={() => handleStartSession(scenario.id)}\n                            disabled={startSessionMutation.isPending}\n                            className=\"w-full mt-4\"\n                            style={{ background: 'hsl(var(--primary) / 0.9)' }}\n                          >\n                            <Play className=\"w-4 h-4 mr-2\" />\n                            {startSessionMutation.isPending ? \"D√©marrage...\" : \"Commencer l'Examen\"}\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Historique des Sessions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {sessionsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"border border-gray-200 rounded-lg p-4 animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/4\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : sessions?.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">Aucune session trouv√©e</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {sessions?.map((session: any) => (\n                      <div key={session.id} className=\"border border-gray-200 rounded-lg p-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <h4 className=\"font-medium\">{session.scenarioTitle}</h4>\n                            <p className=\"text-sm text-gray-500\">\n                              {session.status === 'completed' ? 'Termin√©e' : 'En cours'} ‚Ä¢ {' '}\n                              {new Date(session.startTime).toLocaleString()}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge \n                              variant=\"outline\" \n                              className={session.status === 'completed' ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}\n                            >\n                              {session.status === 'completed' ? 'Termin√©e' : 'En cours'}\n                            </Badge>\n                            {session.status === 'completed' && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewReport(session.id)}\n                              >\n                                <TrendingUp className=\"w-4 h-4 mr-1\" />\n                                Voir R√©sultats\n                              </Button>\n                            )}\n                            {session.status === 'in_progress' && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setActiveSessionId(session.id)}\n                              >\n                                <Play className=\"w-4 h-4 mr-1\" />\n                                Reprendre\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":22097},"client/src/pages/teacher.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { FirestoreService } from '../lib/firestore.service';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Users, BookOpen, TrendingUp, Clock, Play, Pause, RotateCcw, Wand2, Calendar, UserPlus, CheckCircle } from \"lucide-react\";\nimport { useDashboardData, useAvailableIndexes, useTeacherStudents, useTeacherScenarios } from '@/lib/api';\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport TeacherAssistant from \"@/components/ecos/TeacherAssistant\";\nimport { AdminButton } from \"@/components/layout/AdminButton\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TrainingSessionsTab from \"@/components/ecos/TrainingSessionsTab\";\n\ninterface ScenarioCreationFormProps {\n  email: string;\n  onSuccess: () => void;\n  editingScenario?: any;\n  onCancelEdit?: () => void;\n}\n\nfunction ScenarioCreationForm({ email, onSuccess, editingScenario, onCancelEdit }: ScenarioCreationFormProps) {\n  const { data: availableIndexes } = useAvailableIndexes(email);\n  const [formData, setFormData] = useState({\n    title: editingScenario?.title || \"\",\n    description: editingScenario?.description || \"\",\n    patientPrompt: editingScenario?.patientPrompt || \"\",\n    evaluationCriteria: editingScenario?.evaluationCriteria ? JSON.stringify(editingScenario.evaluationCriteria, null, 2) : \"\",\n    pineconeIndex: editingScenario?.pineconeIndex || \"\",\n    criteriaText: editingScenario?.criteriaText || \"\"\n  });\n\n  // Update form data when editing scenario changes\n  useEffect(() => {\n    if (editingScenario) {\n      setFormData({\n        title: editingScenario.title || \"\",\n        description: editingScenario.description || \"\",\n        patientPrompt: editingScenario.patientPrompt || \"\",\n        evaluationCriteria: editingScenario.evaluationCriteria ? JSON.stringify(editingScenario.evaluationCriteria, null, 2) : \"\",\n        pineconeIndex: editingScenario.pineconeIndex || \"\",\n        criteriaText: editingScenario?.criteriaText || \"\"\n      });\n    }\n  }, [editingScenario]);\n\n  const queryClient = useQueryClient();\n\n  // Create/Update scenario mutation\n  const createScenarioMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingScenario) {\n        console.log(\"Updating scenario:\", { email, id: editingScenario.id, ...data });\n        return apiRequest('PUT', `/api/ecos/scenarios/${editingScenario.id}`, {\n          email,\n          ...data\n        });\n      } else {\n        console.log(\"Creating scenario:\", { email, ...data });\n        return apiRequest('POST', '/api/ecos/scenarios', {\n          email,\n          ...data\n        });\n      }\n    },\n    onSuccess: (response) => {\n      console.log(`Scenario ${editingScenario ? 'updated' : 'created'} successfully:`, response);\n      queryClient.invalidateQueries({ queryKey: ['dashboard-data'] });\n      setFormData({ title: \"\", description: \"\", patientPrompt: \"\", evaluationCriteria: \"\", pineconeIndex: \"\", criteriaText: \"\" });\n      if (onCancelEdit) onCancelEdit();\n      onSuccess();\n      alert(`Sc√©nario ${editingScenario ? 'modifi√©' : 'cr√©√©'} avec succ√®s !`);\n    },\n    onError: (error) => {\n      console.error(`Error ${editingScenario ? 'updating' : 'creating'} scenario:`, error);\n      alert(`Erreur lors de la ${editingScenario ? 'modification' : 'cr√©ation'} du sc√©nario. Veuillez r√©essayer.`);\n    }\n  });\n\n  // Generate prompt mutation\n  const generatePromptMutation = useMutation({\n    mutationFn: async (input: string) => {\n      return apiRequest('POST', '/api/ecos/prompt-assistant', {\n        email,\n        input,\n        contextDocs: []\n      });\n    },\n    onSuccess: (data) => {\n      setFormData(prev => ({ ...prev, patientPrompt: data.prompt }));\n    }\n  });\n\n  const generateCriteriaMutation = useMutation({\n    mutationFn: async () => {\n      if (!formData.criteriaText) {\n        throw new Error('Veuillez d√©crire les crit√®res d\\'√©valuation');\n      }\n\n      return apiRequest('POST', '/api/ecos/generate-criteria', {\n        email,\n        description: formData.criteriaText,\n      });\n    },\n    onSuccess: (data) => {\n      setFormData(prev => ({\n        ...prev,\n        evaluationCriteria: JSON.stringify(data.criteria, null, 2)\n      }));\n    },\n    onError: (error) => {\n      console.error('Error generating criteria:', error);\n      alert('Erreur lors de la g√©n√©ration des crit√®res: ' + error.message);\n    }\n  });\n\n  const handleGenerateCriteria = () => {\n    generateCriteriaMutation.mutate();\n  };\n\n  const handleCreateScenario = () => {\n    if (!formData.title || !formData.description) {\n      alert(\"Veuillez remplir au moins le titre et la description du sc√©nario.\");\n      return;\n    }\n\n    let criteria = undefined;\n\n    if (formData.evaluationCriteria && formData.evaluationCriteria.trim()) {\n      try {\n        criteria = JSON.parse(formData.evaluationCriteria);\n      } catch (error) {\n        alert(\"Erreur : Les crit√®res d'√©valuation doivent √™tre au format JSON valide. Exemple : {\\\"anamnese\\\": 20, \\\"examen_physique\\\": 30}\");\n        return;\n      }\n    }\n\n    createScenarioMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      patientPrompt: formData.patientPrompt || undefined,\n      evaluationCriteria: criteria,\n      pineconeIndex: formData.pineconeIndex || undefined\n    });\n  };\n\n  const handleCancel = () => {\n    setFormData({ title: \"\", description: \"\", patientPrompt: \"\", evaluationCriteria: \"\", pineconeIndex: \"\", criteriaText: \"\" });\n    if (onCancelEdit) onCancelEdit();\n  };\n\n  const handleGeneratePrompt = () => {\n    if (formData.description) {\n      generatePromptMutation.mutate(formData.description);\n    } else {\n      alert(\"Veuillez d'abord saisir une description du sc√©nario.\");\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <Label htmlFor=\"title\">Titre du Sc√©nario *</Label>\n        <Input\n          id=\"title\"\n          value={formData.title}\n          onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n          placeholder=\"Ex: Consultation cardiologique - Douleur thoracique\"\n          className=\"mt-1\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"description\">Description du Sc√©nario *</Label>\n        <Textarea\n          id=\"description\"\n          value={formData.description}\n          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          placeholder=\"D√©crivez le contexte clinique : patient, sympt√¥mes, ant√©c√©dents, situation d'urgence, etc.\"\n          rows={4}\n          className=\"mt-1\"\n        />\n        <p className=\"text-xs text-gray-500 mt-1\">\n          D√©crivez pr√©cis√©ment la situation clinique que l'√©tudiant devra g√©rer.\n        </p>\n      </div>\n\n      <div>\n        <Label htmlFor=\"pineconeIndex\">Index de Connaissances (Optionnel)</Label>\n        <Select value={formData.pineconeIndex} onValueChange={(value) => setFormData(prev => ({ ...prev, pineconeIndex: value }))}>\n          <SelectTrigger className=\"mt-1\">\n            <SelectValue placeholder=\"S√©lectionner un index Pinecone\" />\n          </SelectTrigger>\n          <SelectContent>\n            {availableIndexes?.map((index: any) => (\n              <SelectItem key={index.name} value={index.name}>\n                {index.name} ({index.status})\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Choisissez l'index Pinecone contenant les connaissances sp√©cifiques pour ce sc√©nario.\n        </p>\n      </div>\n\n      <div>\n        <div className=\"flex justify-between items-center mb-2\">\n          <Label htmlFor=\"patientPrompt\">Prompt du Patient Virtuel</Label>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleGeneratePrompt}\n            disabled={!formData.description || generatePromptMutation.isPending}\n          >\n            <Wand2 className=\"w-4 h-4 mr-1\" />\n            {generatePromptMutation.isPending ? \"G√©n√©ration...\" : \"G√©n√©rer avec IA\"}\n          </Button>\n        </div>\n        <Textarea\n          id=\"patientPrompt\"\n          value={formData.patientPrompt}\n          onChange={(e) => setFormData(prev => ({ ...prev, patientPrompt: e.target.value }))}\n          placeholder=\"Instructions d√©taill√©es pour l'IA qui jouera le r√¥le du patient. Incluez la personnalit√©, les r√©ponses aux questions, l'√©tat √©motionnel, etc.\"\n          rows={8}\n          className=\"mt-1\"\n        />\n        <p className=\"text-xs text-gray-500 mt-1\">\n          Si laiss√© vide, un prompt sera g√©n√©r√© automatiquement bas√© sur la description.\n        </p>\n      </div>\n\n      <div>\n        <Label htmlFor=\"criteriaText\">D√©crivez les Crit√®res d'√âvaluation</Label>\n        <Textarea\n          id=\"criteriaText\"\n          value={formData.criteriaText || ''}\n          onChange={(e) => setFormData(prev => ({ ...prev, criteriaText: e.target.value }))}\n          placeholder=\"D√©crivez les crit√®res que vous souhaitez √©valuer. Par exemple: L'√©tudiant doit √™tre capable de mener une anamn√®se compl√®te, r√©aliser un examen physique syst√©matique, poser des questions pertinentes sur les ant√©c√©dents, √©tablir un diagnostic diff√©rentiel...\"\n          rows={3}\n          className=\"mt-1\"\n        />\n\n        <Button\n          onClick={handleGenerateCriteria}\n          disabled={!formData.criteriaText || generateCriteriaMutation.isPending}\n          variant=\"outline\"\n          className=\"mt-2\"\n        >\n          {generateCriteriaMutation.isPending ? \"G√©n√©ration...\" : \"G√©n√©rer les Crit√®res JSON\"}\n        </Button>\n\n        <div className=\"mt-4\">\n          <Label htmlFor=\"evaluationCriteria\">Crit√®res d'√âvaluation (JSON g√©n√©r√©)</Label>\n          <Textarea\n            id=\"evaluationCriteria\"\n            value={formData.evaluationCriteria}\n            onChange={(e) => setFormData(prev => ({ ...prev, evaluationCriteria: e.target.value }))}\n            placeholder={`{\n  \"communication\": 20,\n  \"anamnese\": 25,\n  \"examen_physique\": 25,\n  \"raisonnement_clinique\": 30\n}`}\n            rows={6}\n            className=\"mt-1 font-mono text-sm\"\n            readOnly={generateCriteriaMutation.isPending}\n          />\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Crit√®res g√©n√©r√©s automatiquement ou modifi√©s manuellement\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex gap-3 pt-4\">\n        <Button\n          onClick={handleCreateScenario}\n          disabled={!formData.title || !formData.description || createScenarioMutation.isPending}\n          className=\"flex-1\"\n        >\n          {createScenarioMutation.isPending \n            ? (editingScenario ? \"Modification en cours...\" : \"Cr√©ation en cours...\") \n            : (editingScenario ? \"Modifier le Sc√©nario\" : \"Cr√©er le Sc√©nario\")\n          }\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          onClick={handleCancel}\n          disabled={createScenarioMutation.isPending}\n        >\n          {editingScenario ? \"Annuler\" : \"R√©initialiser\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface TeacherPageProps {\n  email?: string;\n}\n\nfunction TeacherPage({ email }: TeacherPageProps) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [editingScenario, setEditingScenario] = useState<any>(null);\n  const [deletingScenario, setDeletingScenario] = useState<any>(null);\n  const [viewingSessionDetails, setViewingSessionDetails] = useState<any>(null);\n  const [viewingReport, setViewingReport] = useState<number | null>(null);\n\n  // Add debugging for authentication issues - MUST be before any conditional returns\n  React.useEffect(() => {\n    if (!email) {\n      console.warn('No email detected for teacher dashboard');\n    }\n  }, [email]);\n\n  console.log('TeacherPage rendering with email:', email);\n\n  const { data: dashboardData, error: dashboardError, isLoading: isDashboardLoading } = useDashboardData(email || '');\n  const { data: teacherScenarios, error: scenariosError, isLoading: isScenariosLoading } = useTeacherScenarios(email || '');\n  const { data: assignedStudents, isLoading: isStudentsLoading } = useTeacherStudents(email || '');\n\n  // Query pour r√©cup√©rer les d√©tails du rapport\n  const { data: reportData, isLoading: isReportLoading } = useQuery({\n    queryKey: ['session-report', viewingReport],\n    queryFn: async () => {\n      if (!viewingReport || !email) return null;\n      return apiRequest('GET', `/api/ecos/sessions/${viewingReport}/report?email=${encodeURIComponent(email)}`);\n    },\n    enabled: !!viewingReport && !!email,\n  });\n\n  console.log('Dashboard data:', dashboardData);\n  console.log('Teacher scenarios:', teacherScenarios);\n  console.log('Dashboard loading:', isDashboardLoading);\n  console.log('Scenarios loading:', isScenariosLoading);\n  console.log('Dashboard error:', dashboardError);\n  console.log('Scenarios error:', scenariosError);\n\n  // Use scenarios from dedicated API call\n  const scenarios = teacherScenarios || [];\n  const sessions = dashboardData?.sessions || [];\n\n  console.log('Final scenarios for display:', scenarios);\n  console.log('Final sessions for display:', sessions);\n\n  // Use stats from dashboard API\n  const stats = dashboardData || {\n    totalScenarios: scenarios.length,\n    activeSessions: 0,\n    completedSessions: 0,\n    totalStudents: 0\n  };\n\n  console.log('Final stats for display:', stats);\n\n  const queryClient = useQueryClient();\n\n  // Delete scenario mutation\n  const deleteScenarioMutation = useMutation({\n    mutationFn: async (scenarioId: number) => {\n      return apiRequest('DELETE', `/api/ecos/scenarios/${scenarioId}?email=${encodeURIComponent(email || '')}`, { email });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['dashboard-data'] });\n      setDeletingScenario(null);\n      alert(\"Sc√©nario supprim√© avec succ√®s !\");\n    },\n    onError: (error) => {\n      console.error(\"Error deleting scenario:\", error);\n      alert(\"Erreur lors de la suppression du sc√©nario.\");\n    }\n  });\n\n  const handleDeleteScenario = (scenario: any) => {\n    setDeletingScenario(scenario);\n  };\n\n  const confirmDelete = () => {\n    if (deletingScenario) {\n      deleteScenarioMutation.mutate(deletingScenario.id);\n    }\n  };\n\n  const handleEditScenario = (scenario: any) => {\n    setEditingScenario(scenario);\n    setActiveTab('create');\n  };\n\n  const handleViewSessionDetails = (session: any) => {\n    setViewingSessionDetails(session);\n  };\n\n  if (isDashboardLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Chargement du tableau de bord...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state but still render dashboard with fallback data\n  if (dashboardError && !dashboardData) {\n    console.error('Dashboard error:', dashboardError);\n  }\n\n  return (\n    <>\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-700 border-b border-blue-200 shadow-lg\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white mb-2\">Tableau de bord Enseignant ECOS</h1>\n              <p className=\"text-blue-100 text-lg\">G√©rez vos sc√©narios et suivez les progr√®s de vos √©tudiants</p>\n              {email && <p className=\"text-sm text-blue-200 mt-2 font-medium\">Connect√© en tant que: {email}</p>}\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"bg-white/10 text-white border-white/20 backdrop-blur-sm px-4 py-2 text-sm font-medium\">\n                Mode Enseignant\n              </Badge>\n              <AdminButton email={email || ''} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Hero Section - Main Section */}\n      <div className=\"max-w-7xl mx-auto px-6 py-6\">\n        <section className=\"hero bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl mb-8 border border-blue-100 shadow-sm\">\n          <div className=\"px-6 py-12\">\n            <div className=\"hero-content flex items-center gap-12\">\n              <div className=\"flex-1\">\n                <div className=\"hero-text\">\n                  <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Plateforme P√©dagogique Avanc√©e</h2>\n                  <p className=\"text-gray-600 text-lg leading-relaxed mb-6\">\n                    Cr√©ez des sc√©narios ECOS immersifs, organisez vos sessions de formation et √©valuez vos √©tudiants avec notre syst√®me intelligent bas√© sur l'IA\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <img \n                  src=\"/images/teacher_professional.jpg\"\n                  alt=\"Enseignante professionnelle\"\n                  className=\"w-full h-64 object-cover rounded-lg shadow-lg\"\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sc√©narios Actifs</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.totalScenarios}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/cahier.png\"\n                    alt=\"Sc√©narios actifs\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sessions Actives</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.activeSessions}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/horloge.png\"\n                    alt=\"Sessions actives\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sessions Compl√©t√©es</p>\n                  <span className=\"text-lg font-bold text-green-600\">{stats?.completedSessions || 0}</span>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden\">\n                  <img \n                    src=\"/images/vraie.png\"\n                    alt=\"Sessions compl√©t√©es\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">√âtudiants Uniques</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats.totalStudents}</p>\n                </div>\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center overflow-hidden bg-blue-50\">\n                  <Users className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs for different sections */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid grid-cols-5 w-fit bg-white border border-gray-200 rounded-xl p-1 shadow-sm\">\n            <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-lg px-4 py-2 text-sm font-medium transition-all duration-200\">Vue d'ensemble</TabsTrigger>\n            <TabsTrigger value=\"scenarios\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-lg px-4 py-2 text-sm font-medium transition-all duration-200\">Sc√©narios</TabsTrigger>\n            <TabsTrigger value=\"create\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-lg px-4 py-2 text-sm font-medium transition-all duration-200\">Cr√©er</TabsTrigger>\n            <TabsTrigger value=\"training-sessions\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-lg px-4 py-2 text-sm font-medium transition-all duration-200\">Sessions Formation</TabsTrigger>\n            <TabsTrigger value=\"sessions\" className=\"data-[state=active]:bg-blue-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-lg px-4 py-2 text-sm font-medium transition-all duration-200\">Sessions ECOS</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"border-0 shadow-sm bg-white\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"text-lg font-semibold text-gray-900\">Activit√© R√©cente</CardTitle>\n                  <CardDescription className=\"text-sm text-gray-500\">Derni√®res sessions des √©tudiants</CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  {sessions.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {sessions.slice(0, 5).map((session: any) => (\n                        <div \n                          key={session.id} \n                          className=\"flex items-center justify-between py-3 px-0 border-b border-gray-100 last:border-0 hover:bg-gray-50 cursor-pointer transition-colors rounded-sm\"\n                          onClick={() => session.status === 'completed' && setViewingReport(session.id)}\n                        >\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium text-gray-900 text-sm\">Consultation #{session.id}</p>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              √âtudiant: {session.studentEmail || 'Non d√©fini'}\n                            </p>\n                          </div>\n                          <Badge \n                            variant={session.status === 'completed' ? 'default' : 'secondary'}\n                            className={`ml-3 px-3 py-1 text-xs font-medium rounded-full ${\n                              session.status === 'completed' \n                                ? 'bg-blue-100 text-blue-700 hover:bg-blue-200' \n                                : 'bg-gray-100 text-gray-600'\n                            }`}\n                          >\n                            {session.status === 'completed' ? 'Termin√©e' : 'En cours'}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-400 text-sm\">Aucune consultation r√©cente</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-0 shadow-sm bg-white\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"text-lg font-semibold text-gray-900\">Performances</CardTitle>\n                  <CardDescription className=\"text-sm text-gray-500\">Statistiques des √©valuations</CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center py-2\">\n                      <span className=\"text-sm text-gray-600\">Taux de completion</span>\n                      <span className=\"text-lg font-bold text-gray-900\">\n                        {sessions.length > 0 \n                          ? Math.round(((stats?.completedSessions || 0) / sessions.length) * 100)\n                          : 0}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-2\">\n                      <span className=\"text-sm text-gray-600\">Sessions actives</span>\n                      <span className=\"text-lg font-bold text-gray-900\">{stats?.activeSessions || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center py-2\">\n                      <span className=\"text-sm text-gray-600\">√âtudiants engag√©s</span>\n                      <span className=\"text-lg font-bold text-gray-900\">{stats?.totalStudents || 0}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"scenarios\">\n            <Card className=\"border-0 shadow-sm bg-white\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n                <div>\n                  <CardTitle className=\"text-lg font-semibold text-gray-900\">Gestion des Sc√©narios</CardTitle>\n                  <CardDescription className=\"text-sm text-gray-500 mt-1\">Cr√©ez et g√©rez vos sc√©narios ECOS</CardDescription>\n                </div>\n                <Button \n                  onClick={() => setActiveTab('create')}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-sm\"\n                >\n                  <BookOpen className=\"h-4 w-4 mr-2\" />\n                  Nouveau Sc√©nario\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {scenarios.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {scenarios.map((scenario: any) => (\n                      <div key={scenario.id} className=\"feature-card feature-card-overlay\">\n                        {/* Photo panoramique en haut */}\n                        <div className=\"relative\">\n                          {scenario.id === 1 ? (\n                            <img \n                              src=\"/images/douleur_thoracique.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Consultation d'urgence - Douleur thoracique\"\n                            />\n                          ) : scenario.id === 2 ? (\n                            <img \n                              src=\"/images/douleur_thoracic.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Examen de l'√©paule douloureuse\"\n                            />\n                          ) : scenario.id === 3 ? (\n                            <img \n                              src=\"/images/trauma_poignet.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Traumatisme du poignet\"\n                            />\n                          ) : scenario.id === 4 ? (\n                            <img \n                              src=\"/images/arthrose_de_la_main.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Arthrose de la main\"\n                            />\n                          ) : scenario.id === 5 ? (\n                            <img \n                              src=\"/images/syndrome_du_canal_carpien.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Syndrome du canal carpien\"\n                            />\n                          ) : (\n                            <img \n                              src=\"/images/cahier.png\"\n                              className=\"feature-header-image\"\n                              alt=\"Sc√©nario d'examen\"\n                            />\n                          )}\n\n                          {/* Overlay qui appara√Æt au hover */}\n                          <div className=\"feature-overlay-content\">\n                            <div className=\"feature-overlay-text\">\n                              <Play className=\"w-8 h-8 mx-auto mb-2\" />\n                              Tester le Sc√©nario\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Contenu de la carte */}\n                        <div className=\"feature-content\">\n                          <h3 className=\"feature-title\">{scenario.title || `Sc√©nario ${scenario.id}`}</h3>\n                          <p className=\"feature-description line-clamp-3\">\n                            {scenario.description || 'Description non disponible'}\n                          </p>\n                          {scenario.pineconeIndex && (\n                            <Badge variant=\"outline\" className=\"w-fit mt-2\">\n                              Index: {scenario.pineconeIndex}\n                            </Badge>\n                          )}\n                          <div className=\"flex gap-2 mt-4\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => window.open(`/student/${encodeURIComponent(email || '')}?scenario=${scenario.id}`, '_blank')}\n                              className=\"flex-1\"\n                            >\n                              <Play className=\"h-4 w-4 mr-1\" />\n                              Tester\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => handleEditScenario(scenario)}\n                            >\n                              Modifier\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"destructive\"\n                              onClick={() => handleDeleteScenario(scenario)}\n                            >\n                              Supprimer\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <BookOpen className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucun sc√©nario</h3>\n                    <p className=\"text-gray-600 mb-4\">Commencez par cr√©er votre premier sc√©nario ECOS</p>\n                    <Button onClick={() => setActiveTab('create')}>\n                      <BookOpen className=\"h-4 w-4 mr-2\" />\n                      Cr√©er un sc√©nario\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"create\">\n            <div className=\"space-y-6\">\n              <Card className=\"border-0 shadow-sm bg-white\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                    {editingScenario ? \"Modifier le Sc√©nario ECOS\" : \"Cr√©er un Nouveau Sc√©nario ECOS\"}\n                  </CardTitle>\n                  <CardDescription className=\"text-sm text-gray-500 mt-1\">\n                    {editingScenario \n                      ? \"Modifiez les d√©tails de votre sc√©nario d'examen clinique structur√©\"\n                      : \"D√©finissez un nouveau sc√©nario d'examen clinique structur√©\"\n                    }\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <ScenarioCreationForm \n                    email={email || ''} \n                    onSuccess={() => {\n                      setEditingScenario(null);\n                      setActiveTab('scenarios');\n                    }}\n                    editingScenario={editingScenario}\n                    onCancelEdit={() => {\n                      setEditingScenario(null);\n                      setActiveTab('scenarios');\n                    }}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"training-sessions\">\n            <TrainingSessionsTab email={email || ''} />\n          </TabsContent>\n\n          <TabsContent value=\"sessions\">\n            <Card className=\"border-0 shadow-sm bg-white\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">Sessions ECOS des √âtudiants</CardTitle>\n                <CardDescription className=\"text-sm text-gray-500 mt-1\">Suivez les sessions d'examen en cours et termin√©es</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {isStudentsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                    <p className=\"mt-2 text-gray-600\">Chargement des √©tudiants...</p>\n                  </div>\n                ) : assignedStudents && assignedStudents.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {/* Group students by email */}\n                    {Object.entries(\n                      assignedStudents.reduce((acc: any, student: any) => {\n                        if (!acc[student.studentEmail]) {\n                          acc[student.studentEmail] = [];\n                        }\n                        acc[student.studentEmail].push(student);\n                        return acc;\n                      }, {})\n                    ).map(([studentEmail, studentSessions]: [string, any]) => (\n                      <div key={studentEmail} className=\"border border-gray-100 rounded-lg p-4 bg-white shadow-sm\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900\">{studentEmail}</h4>\n                            <p className=\"text-sm text-gray-500\">\n                              Session de formation: {studentSessions[0].trainingSessionTitle}\n                            </p>\n                          </div>\n                          <Badge \n                            variant=\"outline\"\n                            className=\"bg-green-50 text-green-700 border-green-200\"\n                          >\n                            <UserPlus className=\"w-3 h-3 mr-1\" />\n                            Assign√©\n                          </Badge>\n                        </div>\n                        \n                        {/* Show ECOS sessions for this student */}\n                        <div className=\"space-y-2\">\n                          {studentSessions.filter((s: any) => s.ecosSessionId).length > 0 ? (\n                            studentSessions\n                              .filter((s: any) => s.ecosSessionId)\n                              .map((session: any) => (\n                                <div key={session.ecosSessionId} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                                  <div>\n                                    <p className=\"font-medium\">Session ECOS #{session.ecosSessionId}</p>\n                                    <p className=\"text-sm text-gray-600\">\n                                      Sc√©nario: {session.ecosScenarioTitle}\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      D√©marr√©e: {new Date(session.ecosSessionStartTime).toLocaleString('fr-FR')}\n                                    </p>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Badge variant={session.ecosSessionStatus === 'completed' ? 'default' : 'secondary'}>\n                                      {session.ecosSessionStatus === 'completed' ? 'Termin√©e' : 'En cours'}\n                                    </Badge>\n                                    <Button \n                                      size=\"sm\" \n                                      variant=\"outline\"\n                                      onClick={() => handleViewSessionDetails(session)}\n                                    >\n                                      D√©tails\n                                    </Button>\n                                  </div>\n                                </div>\n                              ))\n                          ) : (\n                            <div className=\"p-3 bg-blue-50 rounded text-center\">\n                              <p className=\"text-sm text-blue-700\">Aucune session ECOS d√©marr√©e</p>\n                              <p className=\"text-xs text-blue-600\">L'√©tudiant peut commencer un examen depuis son interface</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucun √©tudiant assign√©</h3>\n                    <p className=\"text-gray-600\">Les √©tudiants assign√©s aux sessions de formation appara√Ætront ici</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          \n        </Tabs>\n      </div>\n\n        {/* Delete Confirmation Dialog */}\n        {deletingScenario && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Confirmer la suppression</h3>\n              <p className=\"text-gray-600 mb-6\">\n                √ätes-vous s√ªr de vouloir supprimer le sc√©nario \"{deletingScenario.title}\" ? \n                Cette action est irr√©versible et supprimera √©galement toutes les sessions associ√©es.\n              </p>\n              <div className=\"flex gap-3 justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setDeletingScenario(null)}\n                  disabled={deleteScenarioMutation.isPending}\n                >\n                  Annuler\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={confirmDelete}\n                  disabled={deleteScenarioMutation.isPending}\n                >\n                  {deleteScenarioMutation.isPending ? \"Suppression...\" : \"Supprimer\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Session Details Modal */}\n        {viewingSessionDetails && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <div className=\"bg-white p-6 rounded-lg max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-lg font-semibold\">D√©tails de la Session #{viewingSessionDetails.id}</h3>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setViewingSessionDetails(null)}\n                >\n                  Fermer\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Statut</label>\n                    <div className=\"mt-1\">\n                      <Badge variant={viewingSessionDetails.status === 'completed' ? 'default' : 'secondary'}>\n                        {viewingSessionDetails.status === 'completed' ? 'Termin√©e' : 'En cours'}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Sc√©nario</label>\n                    <p className=\"mt-1 text-sm\">{viewingSessionDetails.scenarioTitle || `Sc√©nario #${viewingSessionDetails.scenarioId}`}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">√âtudiant</label>\n                    <p className=\"mt-1 text-sm\">{viewingSessionDetails.student_id}</p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Dur√©e</label>\n                    <p className=\"mt-1 text-sm\">\n                      {viewingSessionDetails.endTime \n                        ? `${Math.round((new Date(viewingSessionDetails.endTime).getTime() - new Date(viewingSessionDetails.startTime).getTime()) / 1000 / 60)} minutes`\n                        : 'En cours'\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Heure de d√©but</label>\n                  <p className=\"mt-1 text-sm\">{new Date(viewingSessionDetails.startTime).toLocaleString('fr-FR')}</p>\n                </div>\n                \n                {viewingSessionDetails.endTime && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-600\">Heure de fin</label>\n                    <p className=\"mt-1 text-sm\">{new Date(viewingSessionDetails.endTime).toLocaleString('fr-FR')}</p>\n                  </div>\n                )}\n                \n                {viewingSessionDetails.status === 'completed' && (\n                  <div className=\"pt-4 border-t\">\n                    <Button\n                      onClick={() => window.open(`/student/${encodeURIComponent(email || '')}?report=${viewingSessionDetails.id}`, '_blank')}\n                      className=\"w-full\"\n                    >\n                      Voir le Rapport d'√âvaluation\n                    </Button>\n                    <p className=\"text-xs text-gray-500 mt-2 text-center\">\n                      Si la session √©tait vide, le rapport indiquera que l'√©valuation n'est pas disponible\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Modal pour afficher les r√©sultats de l'√©tudiant */}\n        {viewingReport && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n            <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6 border-b\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-xl font-semibold\">R√©sultats de la Consultation #{viewingReport}</h2>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setViewingReport(null)}\n                  >\n                    ‚úï\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"p-6\">\n                {isReportLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p>Chargement du rapport...</p>\n                  </div>\n                ) : reportData?.report ? (\n                  <div className=\"space-y-6\">\n                    {/* Check if it's an insufficient content report */}\n                    {reportData.report.isInsufficientContent ? (\n                      <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                        <h3 className=\"font-semibold mb-2 text-yellow-800\">Session incompl√®te</h3>\n                        <p className=\"text-sm text-yellow-700 mb-2\">{reportData.report.message}</p>\n                        <p className=\"text-xs text-yellow-600\">{reportData.report.details}</p>\n                      </div>\n                    ) : (\n                      <>\n                        {/* Informations g√©n√©rales */}\n                        <div className=\"bg-gray-50 p-4 rounded-lg\">\n                          <h3 className=\"font-semibold mb-3\">Informations de la consultation</h3>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <span className=\"font-medium\">Session ID:</span>\n                              <p>#{reportData.report.sessionId}</p>\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Date d'√©valuation:</span>\n                              <p>{reportData.report.timestamp ? new Date(reportData.report.timestamp).toLocaleString('fr-FR') : 'Non d√©finie'}</p>\n                            </div>\n                            <div>\n                              <span className=\"font-medium\">Score global:</span>\n                              <p className=\"font-semibold text-blue-600\">{reportData.report.globalScore || 0}/100</p>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Feedback g√©n√©ral */}\n                        {reportData.report.feedback && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3\">Feedback g√©n√©ral</h3>\n                            <div className=\"bg-blue-50 p-4 rounded-lg\">\n                              <p className=\"text-sm\">{reportData.report.feedback}</p>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Scores d√©taill√©s */}\n                        {reportData.report.scores && Object.keys(reportData.report.scores).length > 0 && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3\">Scores d√©taill√©s</h3>\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                {Object.entries(reportData.report.scores).map(([criterion, score]: [string, any]) => (\n                                  <div key={criterion} className=\"flex justify-between items-center p-2 bg-white rounded border\">\n                                    <span className=\"text-sm font-medium\">{criterion}</span>\n                                    <span className=\"text-sm font-bold text-blue-600\">{score}/4</span>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* R√©sum√© de l'√©valuation */}\n                        {reportData.report.summary && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3\">R√©sum√© de l'√©valuation</h3>\n                            <div className=\"bg-blue-50 p-4 rounded-lg\">\n                              <p className=\"text-sm\">{reportData.report.summary}</p>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Points forts */}\n                        {reportData.report.strengths && reportData.report.strengths.length > 0 && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3 text-green-700\">Points forts</h3>\n                            <div className=\"bg-green-50 p-4 rounded-lg\">\n                              <ul className=\"list-disc list-inside space-y-2 text-sm\">\n                                {reportData.report.strengths.map((strength: string, index: number) => (\n                                  <li key={index} className=\"leading-relaxed\">{strength}</li>\n                                ))}\n                              </ul>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Points √† am√©liorer */}\n                        {reportData.report.weaknesses && reportData.report.weaknesses.length > 0 && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3 text-orange-700\">Points √† am√©liorer</h3>\n                            <div className=\"bg-orange-50 p-4 rounded-lg\">\n                              <ul className=\"list-disc list-inside space-y-2 text-sm\">\n                                {reportData.report.weaknesses.map((weakness: string, index: number) => (\n                                  <li key={index} className=\"leading-relaxed\">{weakness}</li>\n                                ))}\n                              </ul>\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Recommandations */}\n                        {reportData.report.recommendations && reportData.report.recommendations.length > 0 && (\n                          <div>\n                            <h3 className=\"font-semibold mb-3 text-blue-700\">Recommandations</h3>\n                            <div className=\"bg-blue-50 p-4 rounded-lg\">\n                              <ul className=\"list-disc list-inside space-y-2 text-sm\">\n                                {reportData.report.recommendations.map((recommendation: string, index: number) => (\n                                  <li key={index} className=\"leading-relaxed\">{recommendation}</li>\n                                ))}\n                              </ul>\n                            </div>\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500\">Aucun rapport disponible pour cette consultation.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default TeacherPage;","size_bytes":52356},"client/src/utils/customElementPrevention.ts":{"content":"\n// Utility to prevent custom element redefinition errors\nexport function preventCustomElementConflicts() {\n  // Store original define method\n  const originalDefine = window.customElements.define;\n  \n  // Track which elements we've already seen\n  const definedElements = new Set<string>();\n  \n  // Override the define method to prevent redefinition\n  window.customElements.define = function(name: string, constructor: any, options?: any) {\n    // Check if element is already defined in the registry OR we've seen it before\n    if (window.customElements.get(name) || definedElements.has(name)) {\n      console.warn(`üö´ Custom element \"${name}\" already exists. Preventing redefinition.`);\n      return;\n    }\n    \n    // Mark this element as defined\n    definedElements.add(name);\n    \n    // If not defined, proceed with original define\n    try {\n      console.log(`‚úÖ Defining new custom element: \"${name}\"`);\n      return originalDefine.call(this, name, constructor, options);\n    } catch (error) {\n      console.error(`‚ùå Error defining custom element \"${name}\":`, error);\n      // Remove from our tracking since it failed\n      definedElements.delete(name);\n      \n      // If it's a redefinition error, just warn and continue\n      if (error instanceof Error && error.message.includes('already been defined')) {\n        console.warn(`üîÑ Element \"${name}\" was already defined by another source. Continuing...`);\n        return;\n      }\n      \n      throw error;\n    }\n  };\n  \n  // Pre-emptively handle known problematic elements\n  const problematicElements = ['vite-error-overlay', 'autosize-textarea', 'mce-autosize-textarea'];\n  \n  // Check if any problematic elements are already defined\n  problematicElements.forEach(elementName => {\n    if (window.customElements.get(elementName)) {\n      console.debug(`üî• Problematic element \"${elementName}\" is already defined. Blocking further definitions.`);\n      definedElements.add(elementName);\n    }\n  });\n\n  // Enhanced error handling for custom element conflicts\n  const originalErrorHandler = window.addEventListener;\n  \n  // Intercept error events\n  window.addEventListener('error', function(event) {\n    if (event.error && event.error.message && event.error.message.includes('already been defined')) {\n      console.warn('Prevented custom element redefinition error:', event.error.message);\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    }\n  }, true);\n  \n  // Intercept unhandled promise rejections\n  window.addEventListener('unhandledrejection', function(event) {\n    if (event.reason && event.reason.message && event.reason.message.includes('already been defined')) {\n      console.warn('Prevented custom element redefinition promise rejection:', event.reason.message);\n      event.preventDefault();\n      return false;\n    }\n  });\n}\n\n// Function to scan and log all current custom elements\nexport function logCustomElements() {\n  console.group('Custom Elements Registry Analysis');\n  \n  const knownProblematic = ['autosize-textarea', 'vite-error-overlay'];\n  \n  knownProblematic.forEach(name => {\n    const element = window.customElements.get(name);\n    if (element) {\n      console.debug(`üö® Problematic element \"${name}\" is defined:`, element);\n    } else {\n      console.debug(`‚úÖ Element \"${name}\" is not defined`);\n    }\n  });\n  \n  console.groupEnd();\n}\n\n// Function to detect the source of custom element definitions\nexport function detectCustomElementSources() {\n  console.group('Script Sources Analysis');\n  \n  const scripts = Array.from(document.querySelectorAll('script'));\n  const suspiciousSources = ['replit', 'overlay', 'webcomponents', 'vite'];\n  \n  scripts.forEach((script, index) => {\n    const src = script.src || 'inline script';\n    const isSuspicious = suspiciousSources.some(keyword => src.toLowerCase().includes(keyword));\n    \n    if (isSuspicious) {\n      console.debug(`üîç Suspicious script ${index + 1}:`, src);\n    } else {\n      console.debug(`üìÑ Script ${index + 1}:`, src);\n    }\n  });\n  \n  console.groupEnd();\n}\n","size_bytes":4056},"client/src/components/chat/ChatArea.tsx":{"content":"import { useRef, useEffect } from \"react\";\nimport { UserStatus, ChatExchange } from \"@/lib/api\";\nimport ChatMessage from \"./ChatMessage\";\nimport ChatInput from \"./ChatInput\";\n\ninterface ChatAreaProps {\n  messages: ChatExchange[];\n  isTyping: boolean;\n  onSendQuestion: (question: string) => void;\n  userStatus?: UserStatus;\n  isLoading: boolean;\n}\n\nexport default function ChatArea({ \n  messages, \n  isTyping, \n  onSendQuestion,\n  userStatus,\n  isLoading \n}: ChatAreaProps) {\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;\n    }\n  }, [messages, isTyping]);\n\n  return (\n    <div className=\"flex-grow flex flex-col bg-neutral-50 p-4 md:p-6\">\n      {/* Messages container */}\n      <div \n        ref={messagesContainerRef}\n        className=\"flex-grow overflow-y-auto custom-scrollbar mb-4 space-y-6\"\n      >\n        {/* Welcome message */}\n        {!isLoading && (\n          <div className=\"chat-bubble bg-white rounded-xl p-4 shadow-card message-transition\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary flex-shrink-0 flex items-center justify-center\">\n                <span className=\"material-icons text-white text-sm\">smart_toy</span>\n              </div>\n              <div>\n                <p className=\"text-neutral-600\">\n                  Bonjour ! Je suis votre assistant de cours. Je peux r√©pondre √† vos questions sur le contenu de vos cours. N'h√©sitez pas √† me demander de l'aide.\n                </p>\n                <p className=\"mt-2 text-neutral-400 text-sm\">\n                  Vous avez droit √† 20 questions par jour.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Loading indicator for initial load */}\n        {isLoading && (\n          <div className=\"flex justify-center items-center h-32\">\n            <div className=\"w-8 h-8 border-t-4 border-primary border-solid rounded-full animate-spin\"></div>\n          </div>\n        )}\n        \n        {/* Message history */}\n        {!isLoading && messages.map((message) => (\n          <ChatMessage\n            key={message.id}\n            question={message.question}\n            response={message.response}\n            timestamp={new Date(message.timestamp)}\n          />\n        ))}\n        \n        {/* Typing indicator */}\n        {isTyping && (\n          <div className=\"chat-bubble bg-white rounded-xl p-4 shadow-card message-transition animate-fade-in\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-primary flex-shrink-0 flex items-center justify-center\">\n                <span className=\"material-icons text-white text-sm\">smart_toy</span>\n              </div>\n              <div className=\"pt-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <span className=\"text-sm text-neutral-500 mr-2\">L'assistant r√©dige</span>\n                  <div className=\"typing-indicator\">\n                    <span className=\"typing-dot\"></span>\n                    <span className=\"typing-dot\"></span>\n                    <span className=\"typing-dot\"></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Input area */}\n      <ChatInput \n        onSendQuestion={onSendQuestion}\n        isDisabled={isTyping || (userStatus?.limitReached ?? false)} \n      />\n    </div>\n  );\n}\n\n// CSS utility classes for chat area\nconst styles = `\n  .chat-bubble {\n    max-width: 75%;\n  }\n  .typing-indicator {\n    display: inline-flex;\n    align-items: center;\n    gap: 2px;\n  }\n  .typing-dot {\n    height: 6px;\n    width: 6px;\n    background: #6b7280;\n    border-radius: 50%;\n    display: inline-block;\n    animation: typing-bounce 1.4s infinite ease-in-out;\n  }\n  .typing-dot:nth-child(1) {\n    animation-delay: 0s;\n  }\n  .typing-dot:nth-child(2) {\n    animation-delay: 0.2s;\n  }\n  .typing-dot:nth-child(3) {\n    animation-delay: 0.4s;\n  }\n  @keyframes typing-bounce {\n    0%, 60%, 100% {\n      transform: translateY(0);\n      opacity: 0.4;\n    }\n    30% {\n      transform: translateY(-8px);\n      opacity: 1;\n    }\n  }\n  .animate-fade-in {\n    animation: fade-in 0.3s ease-in;\n  }\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  .message-transition {\n    transition: all 0.3s ease;\n  }\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 6px;\n  }\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: #c1c1c1;\n    border-radius: 10px;\n  }\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: #a1a1a1;\n  }\n`;\n","size_bytes":5011},"client/src/components/chat/ChatInput.tsx":{"content":"import { useState, FormEvent } from \"react\";\n\ninterface ChatInputProps {\n  onSendQuestion: (question: string) => void;\n  isDisabled?: boolean;\n}\n\nexport default function ChatInput({ onSendQuestion, isDisabled = false }: ChatInputProps) {\n  const [question, setQuestion] = useState(\"\");\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    if (question.trim() && !isDisabled) {\n      onSendQuestion(question);\n      setQuestion(\"\");\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-card p-2\">\n      <form className=\"flex items-center space-x-2\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n          placeholder=\"Posez votre question sur le contenu du cours...\"\n          className=\"flex-grow px-4 py-3 text-neutral-700 bg-transparent border-none focus:outline-none\"\n          disabled={isDisabled}\n        />\n        <button\n          type=\"submit\"\n          disabled={!question.trim() || isDisabled}\n          className=\"p-2 rounded-full bg-primary text-white hover:bg-primary-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <span className=\"material-icons\">send</span>\n        </button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":1305},"client/src/components/chat/ChatMessage.tsx":{"content":"import { formatDistance } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\ninterface ChatMessageProps {\n  question: string;\n  response: string;\n  timestamp: Date;\n}\n\nexport default function ChatMessage({ question, response, timestamp }: ChatMessageProps) {\n  // Format timestamp to something like \"14:23\" or \"il y a 5 minutes\"\n  const formatTime = (date: Date) => {\n    const now = new Date();\n    // If it's today, show time\n    if (date.toDateString() === now.toDateString()) {\n      return date.toLocaleTimeString(\"fr-FR\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    }\n    // Otherwise, show relative time\n    return formatDistance(date, now, {\n      addSuffix: true,\n      locale: fr,\n    });\n  };\n\n  const formattedTime = formatTime(timestamp);\n\n  // Function to render markdown links\n  const renderMarkdownLinks = (text: string): string => {\n    // Basic markdown link regex\n    const linkRegex = /\\[([^\\]]+)\\]\\(([^)]+)\\)/g;\n    return text.replace(linkRegex, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n  };\n\n  return (\n    <>\n      {/* User message */}\n      <div className=\"flex justify-end\">\n        <div className=\"chat-bubble bg-primary text-white rounded-xl p-4 shadow-card\">\n          <div className=\"flex items-start space-x-3\">\n            <div>\n              <p>{question}</p>\n              <p className=\"mt-1 text-primary-light text-xs text-right\">{formattedTime}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Bot response */}\n      <div className=\"flex justify-start\">\n        <div className=\"chat-bubble bg-white rounded-xl p-4 shadow-card border border-neutral-100\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-6 h-6 bg-primary flex items-center justify-center rounded-full flex-shrink-0 mt-0.5\">\n              <span className=\"material-icons text-white text-sm\">smart_toy</span>\n            </div>\n            <div>\n              <div \n                className=\"text-neutral-800 whitespace-pre-wrap\"\n                dangerouslySetInnerHTML={{ __html: renderMarkdownLinks(response) }}\n              />\n              <p className=\"mt-1 text-neutral-400 text-xs\">{formattedTime}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":2308},"client/src/components/chat/DailyCounter.tsx":{"content":"import { UserStatus } from \"@/lib/api\";\n\ninterface DailyCounterProps {\n  userStatus?: UserStatus;\n  isLoading?: boolean;\n}\n\nexport function DailyCounter({ userStatus, isLoading = false }: DailyCounterProps) {\n  // Default values\n  const questionsUsed = userStatus?.questionsUsed ?? 0;\n  const maxDailyQuestions = userStatus?.maxDailyQuestions ?? 20;\n  const questionsRemaining = userStatus?.questionsRemaining ?? maxDailyQuestions;\n  const percentUsed = (questionsUsed / maxDailyQuestions) * 100;\n\n  return (\n    <div className=\"p-5 border-b border-neutral-100\">\n      <p className=\"text-sm font-medium text-neutral-700\">Questions restantes aujourd'hui</p>\n\n      {isLoading ? (\n        <div className=\"flex justify-center mt-4\">\n          <div className=\"w-6 h-6 border-t-2 border-primary border-solid rounded-full animate-spin\"></div>\n        </div>\n      ) : (\n        <div className=\"mt-2\">\n          <div className=\"relative pt-1\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <span className=\"text-xs font-semibold inline-block text-primary\">\n                  {questionsUsed}\n                </span>\n                <span className=\"text-xs font-semibold inline-block text-neutral-500\">\n                  /{maxDailyQuestions} questions utilis√©es\n                </span>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"text-xs font-semibold inline-block text-neutral-700\">\n                  {questionsRemaining} restantes\n                </span>\n              </div>\n            </div>\n            <div className=\"overflow-hidden h-2 mt-1 text-xs flex rounded bg-neutral-200\">\n              <div \n                style={{ width: `${percentUsed}%` }} \n                className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary\"\n              ></div>\n            </div>\n          </div>\n          <p className=\"mt-2 text-xs text-neutral-500\">R√©initialisation √† minuit</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2069},"client/src/components/debug/AuthDebugger.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AuthDebuggerProps {\n  email: string;\n}\n\nexport default function AuthDebugger({ email }: AuthDebuggerProps) {\n  const [authInfo, setAuthInfo] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n\n  const debugAuth = async () => {\n    setLoading(true);\n    try {\n      // Test different ways the email might be sent\n      const tests = [\n        { name: \"Query param\", url: `/api/ecos/scenarios?email=${encodeURIComponent(email)}` },\n        { name: \"Direct admin check\", url: `/api/diagnostic/auth-check?email=${encodeURIComponent(email)}` }\n      ];\n\n      const results = [];\n      \n      for (const test of tests) {\n        try {\n          const response = await fetch(test.url, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          });\n          \n          let data;\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('application/json')) {\n            data = await response.json();\n          } else {\n            data = await response.text();\n          }\n          \n          results.push({\n            test: test.name,\n            url: test.url,\n            status: response.status,\n            statusText: response.statusText,\n            response: typeof data === 'object' ? JSON.stringify(data, null, 2) : data,\n            isJson: typeof data === 'object'\n          });\n        } catch (error) {\n          results.push({\n            test: test.name,\n            url: test.url,\n            error: error.message,\n          });\n        }\n      }\n\n      setAuthInfo({\n        email: email,\n        emailType: typeof email,\n        emailLength: email.length,\n        emailLowerCase: email.toLowerCase(),\n        tests: results,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      setAuthInfo({\n        error: error.message || String(error),\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Authorization Debugger</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Button onClick={debugAuth} disabled={loading}>\n            {loading ? \"Testing...\" : \"Debug Authorization\"}\n          </Button>\n        </div>\n        \n        {authInfo && (\n          <div className=\"bg-gray-50 p-4 rounded text-sm\">\n            <pre className=\"whitespace-pre-wrap\">\n              {JSON.stringify(authInfo, null, 2)}\n            </pre>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2843},"client/src/components/debug/CustomElementDiagnostic.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface CustomElementInfo {\n  name: string;\n  constructor: any;\n  defined: boolean;\n  redefinitionAttempts: number;\n}\n\ninterface ScriptInfo {\n  src: string;\n  type: string;\n  loaded: boolean;\n  error?: string;\n}\n\nexport default function CustomElementDiagnostic() {\n  const [customElements, setCustomElements] = useState<CustomElementInfo[]>([]);\n  const [scripts, setScripts] = useState<ScriptInfo[]>([]);\n  const [errorLog, setErrorLog] = useState<string[]>([]);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n\n  const analyzeCustomElements = () => {\n    const elements: CustomElementInfo[] = [];\n    \n    // Check for known problematic elements\n    const knownElements = [\n      'autosize-textarea',\n      'vite-error-overlay',\n      'replit-custom-element'\n    ];\n\n    knownElements.forEach(name => {\n      const isDefined = window.customElements.get(name) !== undefined;\n      elements.push({\n        name,\n        constructor: window.customElements.get(name),\n        defined: isDefined,\n        redefinitionAttempts: 0\n      });\n    });\n\n    // Try to detect all custom elements by checking the registry\n    try {\n      // This is a hack to access the internal registry\n      const registry = (window.customElements as any)._registry;\n      if (registry) {\n        for (const [name, constructor] of registry) {\n          if (!elements.find(el => el.name === name)) {\n            elements.push({\n              name,\n              constructor,\n              defined: true,\n              redefinitionAttempts: 0\n            });\n          }\n        }\n      }\n    } catch (e) {\n      console.log('Could not access custom elements registry:', e);\n    }\n\n    setCustomElements(elements);\n  };\n\n  const analyzeScripts = () => {\n    const scriptList: ScriptInfo[] = [];\n    \n    document.querySelectorAll('script').forEach(script => {\n      scriptList.push({\n        src: script.src || 'inline',\n        type: script.type || 'text/javascript',\n        loaded: script.src ? true : false,\n        error: (script as any).error ? 'Load error' : undefined\n      });\n    });\n\n    setScripts(scriptList);\n  };\n\n  const startMonitoring = () => {\n    setIsMonitoring(true);\n    setErrorLog([]);\n\n    // Monitor custom element definitions\n    const originalDefine = window.customElements.define;\n    let defineCallCount = 0;\n\n    window.customElements.define = function(name: string, constructor: any, options?: any) {\n      defineCallCount++;\n      const timestamp = new Date().toISOString();\n      \n      if (window.customElements.get(name)) {\n        const errorMsg = `[${timestamp}] CONFLICT: Attempt ${defineCallCount} to redefine existing custom element: ${name}`;\n        setErrorLog(prev => [...prev, errorMsg]);\n        console.error(errorMsg);\n        \n        // Don't call the original define to prevent the error\n        return;\n      } else {\n        const successMsg = `[${timestamp}] SUCCESS: Defining new custom element: ${name} (attempt ${defineCallCount})`;\n        setErrorLog(prev => [...prev, successMsg]);\n        console.log(successMsg);\n        \n        return originalDefine.call(this, name, constructor, options);\n      }\n    };\n\n    // Monitor for errors\n    const originalErrorHandler = window.onerror;\n    window.onerror = function(message, source, lineno, colno, error) {\n      if (typeof message === 'string' && message.includes('already been defined')) {\n        const errorMsg = `[${new Date().toISOString()}] ERROR CAUGHT: ${message} at ${source}:${lineno}:${colno}`;\n        setErrorLog(prev => [...prev, errorMsg]);\n      }\n      \n      if (originalErrorHandler) {\n        return originalErrorHandler(message, source, lineno, colno, error);\n      }\n      return false;\n    };\n\n    // Monitor unhandled promise rejections\n    const originalRejectionHandler = window.onunhandledrejection;\n    window.onunhandledrejection = function(event) {\n      if (event.reason && event.reason.message && event.reason.message.includes('already been defined')) {\n        const errorMsg = `[${new Date().toISOString()}] PROMISE REJECTION: ${event.reason.message}`;\n        setErrorLog(prev => [...prev, errorMsg]);\n      }\n      \n      if (originalRejectionHandler) {\n        return originalRejectionHandler(event);\n      }\n    };\n  };\n\n  const stopMonitoring = () => {\n    setIsMonitoring(false);\n    // Note: In a real implementation, you'd want to restore the original handlers\n  };\n\n  const checkForConflictingSources = () => {\n    const suspiciousSources = [\n      'replit-dev-banner.js',\n      'webcomponents-ce.js',\n      'overlay_bundle.js',\n      'vite',\n      '@vite/client'\n    ];\n\n    const foundSources = scripts.filter(script => \n      suspiciousSources.some(suspicious => \n        script.src.includes(suspicious) || script.src.includes('overlay')\n      )\n    );\n\n    return foundSources;\n  };\n\n  useEffect(() => {\n    analyzeCustomElements();\n    analyzeScripts();\n  }, []);\n\n  return (\n    <div className=\"space-y-4 p-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Custom Element Conflict Diagnostic</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Button onClick={analyzeCustomElements}>Analyze Custom Elements</Button>\n            <Button onClick={analyzeScripts}>Analyze Scripts</Button>\n            <Button \n              onClick={isMonitoring ? stopMonitoring : startMonitoring}\n              variant={isMonitoring ? \"destructive\" : \"default\"}\n            >\n              {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\n            </Button>\n          </div>\n\n          {/* Custom Elements Analysis */}\n          <div>\n            <h3 className=\"font-semibold mb-2\">Custom Elements Registry:</h3>\n            <div className=\"space-y-2\">\n              {customElements.map((element, index) => (\n                <div \n                  key={index} \n                  className={`p-2 rounded border ${element.defined ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'}`}\n                >\n                  <div className=\"font-mono text-sm\">\n                    <strong>{element.name}</strong> - \n                    {element.defined ? ' ‚úó ALREADY DEFINED' : ' ‚úì Available'}\n                  </div>\n                  {element.constructor && (\n                    <div className=\"text-xs text-gray-600 mt-1\">\n                      Constructor: {element.constructor.name || 'Anonymous'}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Script Analysis */}\n          <div>\n            <h3 className=\"font-semibold mb-2\">Scripts Analysis:</h3>\n            <div className=\"space-y-1\">\n              {scripts.map((script, index) => (\n                <div key={index} className=\"text-sm font-mono p-1 border rounded\">\n                  <span className={script.src.includes('overlay') || script.src.includes('replit') ? 'text-red-600' : 'text-gray-600'}>\n                    {script.src} ({script.type})\n                  </span>\n                  {script.error && <span className=\"text-red-500 ml-2\">ERROR: {script.error}</span>}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Conflicting Sources */}\n          <div>\n            <h3 className=\"font-semibold mb-2\">Potentially Conflicting Sources:</h3>\n            <div className=\"space-y-1\">\n              {checkForConflictingSources().map((script, index) => (\n                <div key={index} className=\"text-sm font-mono p-2 bg-yellow-50 border border-yellow-200 rounded\">\n                  ‚ö†Ô∏è {script.src}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Error Log */}\n          {errorLog.length > 0 && (\n            <div>\n              <h3 className=\"font-semibold mb-2\">Live Error Log:</h3>\n              <div className=\"bg-black text-green-400 p-3 rounded font-mono text-xs max-h-64 overflow-y-auto\">\n                {errorLog.map((log, index) => (\n                  <div key={index}>{log}</div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Status */}\n          {isMonitoring && (\n            <div className=\"p-3 bg-blue-50 border border-blue-200 rounded\">\n              üîç Monitoring active - watching for custom element conflicts...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8638},"client/src/components/debug/DeepDiagnostic.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertTriangle, CheckCircle, XCircle, RefreshCw } from \"lucide-react\";\n\ninterface DiagnosticResult {\n  category: string;\n  test: string;\n  status: 'success' | 'error' | 'warning';\n  message: string;\n  details?: any;\n}\n\nexport default function DeepDiagnostic() {\n  const [diagnostics, setDiagnostics] = useState<DiagnosticResult[]>([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [logs, setLogs] = useState<string[]>([]);\n\n  const addLog = (message: string) => {\n    setLogs(prev => [...prev, `${new Date().toISOString()}: ${message}`]);\n  };\n\n  const runDiagnostics = async () => {\n    setIsRunning(true);\n    setDiagnostics([]);\n    setLogs([]);\n    \n    const results: DiagnosticResult[] = [];\n\n    try {\n      // 1. Check API connectivity\n      addLog(\"Testing API connectivity...\");\n      try {\n        const response = await fetch('/api/status?email=test@example.com');\n        if (response.ok) {\n          results.push({\n            category: 'API',\n            test: 'Server Connection',\n            status: 'success',\n            message: 'API server is responding'\n          });\n        } else {\n          results.push({\n            category: 'API',\n            test: 'Server Connection',\n            status: 'error',\n            message: `API returned status: ${response.status}`,\n            details: await response.text()\n          });\n        }\n      } catch (error) {\n        results.push({\n          category: 'API',\n          test: 'Server Connection',\n          status: 'error',\n          message: 'Failed to connect to API server',\n          details: error\n        });\n      }\n\n      // 2. Check client-side rendering\n      addLog(\"Checking client-side rendering...\");\n      const appElement = document.getElementById('root');\n      if (appElement && appElement.children.length > 0) {\n        results.push({\n          category: 'Frontend',\n          test: 'React Rendering',\n          status: 'success',\n          message: 'React app is rendering correctly'\n        });\n      } else {\n        results.push({\n          category: 'Frontend',\n          test: 'React Rendering',\n          status: 'error',\n          message: 'React app may not be rendering properly'\n        });\n      }\n\n      // 3. Check for console errors\n      addLog(\"Analyzing console for errors...\");\n      const originalConsoleError = console.error;\n      let consoleErrors: string[] = [];\n      console.error = (...args) => {\n        consoleErrors.push(args.join(' '));\n        originalConsoleError(...args);\n      };\n\n      // Restore console.error after a brief period\n      setTimeout(() => {\n        console.error = originalConsoleError;\n      }, 1000);\n\n      if (consoleErrors.length === 0) {\n        results.push({\n          category: 'Frontend',\n          test: 'Console Errors',\n          status: 'success',\n          message: 'No recent console errors detected'\n        });\n      } else {\n        results.push({\n          category: 'Frontend',\n          test: 'Console Errors',\n          status: 'warning',\n          message: `${consoleErrors.length} console errors detected`,\n          details: consoleErrors\n        });\n      }\n\n      // 4. Check network requests\n      addLog(\"Testing various API endpoints...\");\n      const endpoints = [\n        '/api/webhook',\n        '/api/history',\n        '/api/ecos/scenarios',\n        '/api/ecos/sessions'\n      ];\n\n      for (const endpoint of endpoints) {\n        try {\n          const testData = endpoint === '/api/webhook' \n            ? { email: 'test@example.com' }\n            : null;\n          \n          const options: RequestInit = {\n            method: testData ? 'POST' : 'GET',\n            headers: testData ? { 'Content-Type': 'application/json' } : {},\n            ...(testData && { body: JSON.stringify(testData) })\n          };\n\n          if (endpoint !== '/api/webhook') {\n            options.method = 'GET';\n            const url = endpoint + '?email=test@example.com';\n            const response = await fetch(url, options);\n            \n            results.push({\n              category: 'API',\n              test: `Endpoint ${endpoint}`,\n              status: response.ok ? 'success' : 'error',\n              message: response.ok \n                ? `${endpoint} responding correctly (${response.status})`\n                : `${endpoint} returned ${response.status}`,\n              details: response.ok ? await response.json() : await response.text()\n            });\n          }\n        } catch (error) {\n          results.push({\n            category: 'API',\n            test: `Endpoint ${endpoint}`,\n            status: 'error',\n            message: `Failed to test ${endpoint}`,\n            details: error\n          });\n        }\n      }\n\n      // 5. Check environment variables and configuration\n      addLog(\"Checking environment configuration...\");\n      const currentUrl = window.location.href;\n      const isLocalhost = currentUrl.includes('localhost') || currentUrl.includes('127.0.0.1');\n      const isReplit = currentUrl.includes('replit.dev') || currentUrl.includes('replit.co');\n      \n      results.push({\n        category: 'Environment',\n        test: 'Platform Detection',\n        status: 'success',\n        message: `Running on ${isReplit ? 'Replit' : isLocalhost ? 'localhost' : 'unknown platform'}`,\n        details: { url: currentUrl, isReplit, isLocalhost }\n      });\n\n      // 6. Check for TypeScript/Build errors\n      addLog(\"Checking for build issues...\");\n      try {\n        // Test if critical components can be imported/rendered\n        const testComponent = document.createElement('div');\n        testComponent.innerHTML = '<div>Test</div>';\n        \n        results.push({\n          category: 'Build',\n          test: 'Component Compilation',\n          status: 'success',\n          message: 'Components appear to be compiled correctly'\n        });\n      } catch (error) {\n        results.push({\n          category: 'Build',\n          test: 'Component Compilation',\n          status: 'error',\n          message: 'Build/compilation issues detected',\n          details: error\n        });\n      }\n\n      // 7. Check for route handling\n      addLog(\"Testing route handling...\");\n      const currentPath = window.location.pathname;\n      results.push({\n        category: 'Routing',\n        test: 'Current Route',\n        status: 'success',\n        message: `Currently on route: ${currentPath}`,\n        details: { path: currentPath, search: window.location.search }\n      });\n\n      // 8. Memory and performance check\n      addLog(\"Checking performance metrics...\");\n      if ('performance' in window && 'memory' in (performance as any)) {\n        const memory = (performance as any).memory;\n        results.push({\n          category: 'Performance',\n          test: 'Memory Usage',\n          status: memory.usedJSHeapSize > 50000000 ? 'warning' : 'success',\n          message: `Memory usage: ${Math.round(memory.usedJSHeapSize / 1024 / 1024)}MB`,\n          details: memory\n        });\n      }\n\n      setDiagnostics(results);\n      addLog(`Diagnostics completed. Found ${results.filter(r => r.status === 'error').length} errors, ${results.filter(r => r.status === 'warning').length} warnings.`);\n      \n    } catch (error) {\n      addLog(`Diagnostic failed: ${error}`);\n      results.push({\n        category: 'System',\n        test: 'Diagnostic Runner',\n        status: 'error',\n        message: 'Failed to complete diagnostics',\n        details: error\n      });\n      setDiagnostics(results);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  useEffect(() => {\n    runDiagnostics();\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'success': return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'error': return <XCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />;\n      default: return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'success': return 'bg-green-50 border-green-200';\n      case 'error': return 'bg-red-50 border-red-200';\n      case 'warning': return 'bg-yellow-50 border-yellow-200';\n      default: return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const groupedDiagnostics = diagnostics.reduce((acc, diagnostic) => {\n    if (!acc[diagnostic.category]) {\n      acc[diagnostic.category] = [];\n    }\n    acc[diagnostic.category].push(diagnostic);\n    return acc;\n  }, {} as Record<string, DiagnosticResult[]>);\n\n  const errorCount = diagnostics.filter(d => d.status === 'error').length;\n  const warningCount = diagnostics.filter(d => d.status === 'warning').length;\n  const successCount = diagnostics.filter(d => d.status === 'success').length;\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"text-2xl\">Deep System Diagnostic</CardTitle>\n              <p className=\"text-gray-600\">Comprehensive analysis of application health</p>\n            </div>\n            <Button onClick={runDiagnostics} disabled={isRunning}>\n              <RefreshCw className={`w-4 h-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n              {isRunning ? 'Running...' : 'Re-run Diagnostics'}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{successCount}</div>\n              <div className=\"text-sm text-gray-600\">Passed</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-yellow-600\">{warningCount}</div>\n              <div className=\"text-sm text-gray-600\">Warnings</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">{errorCount}</div>\n              <div className=\"text-sm text-gray-600\">Errors</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"results\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"results\">Test Results</TabsTrigger>\n          <TabsTrigger value=\"logs\">Diagnostic Logs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"results\" className=\"mt-6\">\n          <div className=\"space-y-6\">\n            {Object.entries(groupedDiagnostics).map(([category, tests]) => (\n              <Card key={category}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{category}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {tests.map((test, index) => (\n                      <div key={index} className={`p-3 rounded-lg border ${getStatusColor(test.status)}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusIcon(test.status)}\n                            <span className=\"font-medium\">{test.test}</span>\n                          </div>\n                          <Badge variant=\"outline\" className={\n                            test.status === 'success' ? 'text-green-700' :\n                            test.status === 'error' ? 'text-red-700' : 'text-yellow-700'\n                          }>\n                            {test.status.toUpperCase()}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mb-2\">{test.message}</p>\n                        {test.details && (\n                          <details className=\"text-xs\">\n                            <summary className=\"cursor-pointer text-gray-500 hover:text-gray-700\">\n                              Show details\n                            </summary>\n                            <pre className=\"mt-2 p-2 bg-gray-100 rounded overflow-auto max-h-32\">\n                              {JSON.stringify(test.details, null, 2)}\n                            </pre>\n                          </details>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"logs\" className=\"mt-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Diagnostic Execution Logs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-black text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-auto\">\n                {logs.map((log, index) => (\n                  <div key={index} className=\"mb-1\">{log}</div>\n                ))}\n                {isRunning && (\n                  <div className=\"animate-pulse\">Running diagnostics...</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":13564},"client/src/components/debug/DiagnosticPanel.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AlertTriangle, CheckCircle, XCircle, RefreshCw } from \"lucide-react\";\n\ninterface DiagnosticPanelProps {\n  email: string;\n}\n\nexport default function DiagnosticPanel({ email }: DiagnosticPanelProps) {\n  const [diagnosticHistory, setDiagnosticHistory] = useState<any[]>([]);\n  const [refreshCount, setRefreshCount] = useState(0);\n\n  // Fetch dashboard data with detailed logging\n  const { data: dashboardData, isLoading: dashboardLoading, error: dashboardError, refetch } = useQuery({\n    queryKey: ['diagnostic-dashboard', email, refreshCount],\n    queryFn: async () => {\n      const timestamp = new Date().toISOString();\n      console.log(`[DIAGNOSTIC ${timestamp}] Starting fetch for email:`, email);\n      \n      if (!email) {\n        throw new Error('Email is required');\n      }\n      \n      try {\n        const [scenarios, sessions] = await Promise.all([\n          apiRequest('GET', `/api/ecos/scenarios?email=${email}`),\n          apiRequest('GET', `/api/ecos/sessions?email=${email}`)\n        ]);\n        \n        const result = {\n          scenarios: scenarios.scenarios || [],\n          sessions: sessions.sessions || [],\n          timestamp,\n          email,\n          scenariosRaw: scenarios,\n          sessionsRaw: sessions\n        };\n        \n        console.log(`[DIAGNOSTIC ${timestamp}] Raw scenarios response:`, scenarios);\n        console.log(`[DIAGNOSTIC ${timestamp}] Raw sessions response:`, sessions);\n        console.log(`[DIAGNOSTIC ${timestamp}] Processed result:`, result);\n        \n        // Add to diagnostic history\n        setDiagnosticHistory(prev => [\n          {\n            timestamp,\n            success: true,\n            data: result,\n            scenarios: result.scenarios,\n            sessions: result.sessions,\n            scenariosCount: result.scenarios.length,\n            sessionsCount: result.sessions.length\n          },\n          ...prev.slice(0, 9) // Keep last 10 entries\n        ]);\n        \n        return result;\n      } catch (error) {\n        console.error(`[DIAGNOSTIC ${timestamp}] Error:`, error);\n        setDiagnosticHistory(prev => [\n          {\n            timestamp,\n            success: false,\n            error: error.message,\n            email\n          },\n          ...prev.slice(0, 9)\n        ]);\n        throw error;\n      }\n    },\n    enabled: !!email,\n    retry: 1,\n    refetchOnWindowFocus: false\n  });\n\n  // Calculate stats with detailed logging\n  const diagnosticStats = React.useMemo(() => {\n    const timestamp = new Date().toISOString();\n    console.log(`[DIAGNOSTIC ${timestamp}] Calculating stats...`);\n    console.log(`[DIAGNOSTIC ${timestamp}] Dashboard data:`, dashboardData);\n    console.log(`[DIAGNOSTIC ${timestamp}] Dashboard loading:`, dashboardLoading);\n    console.log(`[DIAGNOSTIC ${timestamp}] Dashboard error:`, dashboardError);\n    \n    if (!dashboardData) {\n      console.log(`[DIAGNOSTIC ${timestamp}] No dashboard data available`);\n      return null;\n    }\n    \n    const scenarios = Array.isArray(dashboardData.scenarios) ? dashboardData.scenarios : [];\n    const sessions = Array.isArray(dashboardData.sessions) ? dashboardData.sessions : [];\n    \n    console.log(`[DIAGNOSTIC ${timestamp}] Scenarios array:`, scenarios);\n    console.log(`[DIAGNOSTIC ${timestamp}] Sessions array:`, sessions);\n    \n    const stats = {\n      totalScenarios: scenarios.length,\n      activeSessions: sessions.filter((s: any) => s && s.status === 'in_progress').length,\n      completedSessions: sessions.filter((s: any) => s && s.status === 'completed').length,\n      totalStudents: new Set(sessions.filter((s: any) => s && s.studentEmail).map((s: any) => s.studentEmail)).size,\n      timestamp,\n      rawData: {\n        scenarios,\n        sessions,\n        dashboardData\n      }\n    };\n    \n    console.log(`[DIAGNOSTIC ${timestamp}] Calculated stats:`, stats);\n    return stats;\n  }, [dashboardData, dashboardLoading, dashboardError]);\n\n  const handleForceRefresh = () => {\n    console.log('[DIAGNOSTIC] Force refresh triggered');\n    setRefreshCount(prev => prev + 1);\n    refetch();\n  };\n\n  // Monitor component state changes\n  useEffect(() => {\n    const timestamp = new Date().toISOString();\n    console.log(`[DIAGNOSTIC ${timestamp}] Component state changed:`, {\n      email,\n      dashboardLoading,\n      dashboardError: dashboardError?.message,\n      hasData: !!dashboardData,\n      statsCalculated: !!diagnosticStats\n    });\n  }, [email, dashboardLoading, dashboardError, dashboardData, diagnosticStats]);\n\n  return (\n    <div className=\"space-y-6 p-6 bg-gray-50 border rounded-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-bold text-gray-900\">üîç Panneau de Diagnostic</h2>\n        <Button onClick={handleForceRefresh} size=\"sm\" className=\"flex items-center gap-2\">\n          <RefreshCw className=\"w-4 h-4\" />\n          Force Refresh ({refreshCount})\n        </Button>\n      </div>\n\n      {/* Current State */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            √âtat Actuel\n            {dashboardLoading ? (\n              <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700\">\n                <RefreshCw className=\"w-3 h-3 mr-1 animate-spin\" />\n                Chargement\n              </Badge>\n            ) : dashboardError ? (\n              <Badge variant=\"outline\" className=\"bg-red-50 text-red-700\">\n                <XCircle className=\"w-3 h-3 mr-1\" />\n                Erreur\n              </Badge>\n            ) : (\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\n                <CheckCircle className=\"w-3 h-3 mr-1\" />\n                OK\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <strong>Email:</strong> {email || 'NON D√âFINI'}\n            </div>\n            <div>\n              <strong>Timestamp:</strong> {new Date().toLocaleTimeString()}\n            </div>\n            <div>\n              <strong>Dashboard Loading:</strong> {dashboardLoading ? 'OUI' : 'NON'}\n            </div>\n            <div>\n              <strong>Dashboard Error:</strong> {dashboardError ? dashboardError.message : 'AUCUNE'}\n            </div>\n            <div>\n              <strong>Has Data:</strong> {dashboardData ? 'OUI' : 'NON'}\n            </div>\n            <div>\n              <strong>Stats Calculated:</strong> {diagnosticStats ? 'OUI' : 'NON'}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Raw Data Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Analyse des Donn√©es Brutes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Dashboard Data:</h4>\n              <pre className=\"bg-gray-100 p-3 rounded text-xs overflow-auto max-h-32\">\n                {JSON.stringify(dashboardData, null, 2)}\n              </pre>\n            </div>\n            \n            {dashboardData && (\n              <>\n                <div>\n                  <h4 className=\"font-medium mb-2\">Scenarios ({dashboardData.scenarios?.length || 0}):</h4>\n                  <pre className=\"bg-gray-100 p-3 rounded text-xs overflow-auto max-h-32\">\n                    {JSON.stringify(dashboardData.scenarios, null, 2)}\n                  </pre>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Sessions ({dashboardData.sessions?.length || 0}):</h4>\n                  <pre className=\"bg-gray-100 p-3 rounded text-xs overflow-auto max-h-32\">\n                    {JSON.stringify(dashboardData.sessions, null, 2)}\n                  </pre>\n                </div>\n              </>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats Debugging */}\n      {diagnosticStats && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Calcul des Statistiques</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-blue-50 p-3 rounded\">\n                <div className=\"text-sm text-blue-600\">Total Sc√©narios</div>\n                <div className=\"text-2xl font-bold text-blue-900\">{diagnosticStats.totalScenarios}</div>\n              </div>\n              <div className=\"bg-green-50 p-3 rounded\">\n                <div className=\"text-sm text-green-600\">Sessions Actives</div>\n                <div className=\"text-2xl font-bold text-green-900\">{diagnosticStats.activeSessions}</div>\n              </div>\n              <div className=\"bg-purple-50 p-3 rounded\">\n                <div className=\"text-sm text-purple-600\">Sessions Termin√©es</div>\n                <div className=\"text-2xl font-bold text-purple-900\">{diagnosticStats.completedSessions}</div>\n              </div>\n              <div className=\"bg-orange-50 p-3 rounded\">\n                <div className=\"text-sm text-orange-600\">√âtudiants Uniques</div>\n                <div className=\"text-2xl font-bold text-orange-900\">{diagnosticStats.totalStudents}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Historique des Requ√™tes ({diagnosticHistory.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 max-h-64 overflow-auto\">\n            {diagnosticHistory.map((entry, index) => (\n              <div key={index} className={`p-2 rounded text-sm ${entry.success ? 'bg-green-50' : 'bg-red-50'}`}>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-medium\">\n                    {entry.success ? '‚úÖ' : '‚ùå'} {entry.timestamp}\n                  </span>\n                  {entry.success && (\n                    <span className=\"text-xs\">\n                      {entry.scenariosCount} sc√©narios, {entry.sessionsCount} sessions\n                    </span>\n                  )}\n                </div>\n                {!entry.success && (\n                  <div className=\"text-red-600 text-xs mt-1\">{entry.error}</div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Network Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>√âtat du R√©seau & Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <strong>Connexion:</strong> {navigator.onLine ? 'CONNECT√â' : 'D√âCONNECT√â'}\n            </div>\n            <div>\n              <strong>User Agent:</strong> {navigator.userAgent.substring(0, 50)}...\n            </div>\n            <div>\n              <strong>Timezone:</strong> {Intl.DateTimeFormat().resolvedOptions().timeZone}\n            </div>\n            <div>\n              <strong>Language:</strong> {navigator.language}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11551},"client/src/components/debug/EcosDebugger.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EcosDebuggerProps {\n  email: string;\n}\n\nexport default function EcosDebugger({ email }: EcosDebuggerProps) {\n  const [debugInfo, setDebugInfo] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n\n  const runDiagnostic = async () => {\n    setLoading(true);\n    try {\n      console.log(\"Testing ECOS scenarios endpoint with email:\", email);\n      \n      // Test the scenarios endpoint\n      const response = await fetch(`/api/ecos/scenarios?email=${encodeURIComponent(email)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      const data = await response.text();\n      \n      setDebugInfo({\n        email: email,\n        requestUrl: `/api/ecos/scenarios?email=${encodeURIComponent(email)}`,\n        status: response.status,\n        statusText: response.statusText,\n        responseHeaders: Object.fromEntries(response.headers.entries()),\n        responseBody: data,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      setDebugInfo({\n        email: email,\n        error: error.message || String(error),\n        timestamp: new Date().toISOString()\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"mt-4\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          ECOS Scenarios Debug Info\n          <Button onClick={runDiagnostic} disabled={loading}>\n            {loading ? \"Testing...\" : \"Run Diagnostic\"}\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div>\n            <strong>Current Email:</strong> <Badge variant=\"outline\">{email}</Badge>\n          </div>\n          \n          {debugInfo && (\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h3 className=\"font-semibold mb-2\">Diagnostic Results:</h3>\n              <pre className=\"text-xs overflow-auto max-h-96\">\n                {JSON.stringify(debugInfo, null, 2)}\n              </pre>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2407},"client/src/components/debug/StudentDiagnostic.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertCircle, CheckCircle, XCircle, RefreshCw } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface StudentDiagnosticProps {\n  email: string;\n}\n\ninterface DiagnosticTest {\n  name: string;\n  status: 'pending' | 'success' | 'warning' | 'error';\n  message: string;\n  data?: any;\n  rawResponse?: any;\n}\n\nexport default function StudentDiagnostic({ email }: StudentDiagnosticProps) {\n  const [results, setResults] = useState<{\n    tests: DiagnosticTest[];\n    isRunning: boolean;\n    completedAt?: Date;\n  }>({\n    tests: [],\n    isRunning: false\n  });\n\n  const runDiagnostic = async () => {\n    setResults({ tests: [], isRunning: true });\n    const tests: DiagnosticTest[] = [];\n\n    console.log('üîç Starting comprehensive diagnostic for email:', email);\n\n    // Test 1: Email validation\n    tests.push({\n      name: \"Email Validation\",\n      status: email && email.includes('@') ? 'success' : 'error',\n      message: email && email.includes('@') ? \n        `Valid email: ${email}` : \n        'Invalid email format',\n      data: { email, isValid: email && email.includes('@') }\n    });\n\n    // Test 2: Direct API call to available scenarios\n    try {\n      console.log('üîç Testing available scenarios endpoint directly...');\n      const directResponse = await fetch(`/api/ecos/available-scenarios?email=${encodeURIComponent(email)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      const directData = await directResponse.json();\n      console.log('üîç Direct fetch response:', directData);\n      \n      tests.push({\n        name: \"Direct API Call - Available Scenarios\",\n        status: directResponse.ok ? 'success' : 'error',\n        message: directResponse.ok ? \n          `Status ${directResponse.status}: Found ${directData.scenarios?.length || 0} scenarios` : \n          `HTTP ${directResponse.status}: ${directData.message || 'Unknown error'}`,\n        data: {\n          status: directResponse.status,\n          scenarios: directData.scenarios || [],\n          responseKeys: Object.keys(directData || {})\n        },\n        rawResponse: directData\n      });\n    } catch (error: any) {\n      tests.push({\n        name: \"Direct API Call - Available Scenarios\",\n        status: 'error',\n        message: `Network Error: ${error.message}`,\n        data: { error: error.toString() }\n      });\n    }\n\n    // Test 3: Using apiRequest helper\n    try {\n      console.log('üîç Testing with apiRequest helper...');\n      const helperResponse = await apiRequest('GET', `/api/ecos/available-scenarios?email=${encodeURIComponent(email)}`);\n      console.log('üîç ApiRequest response:', helperResponse);\n      \n      tests.push({\n        name: \"ApiRequest Helper - Available Scenarios\",\n        status: helperResponse?.scenarios ? 'success' : 'warning',\n        message: helperResponse?.scenarios ? \n          `Found ${helperResponse.scenarios.length} scenarios via helper` : \n          'No scenarios in helper response',\n        data: {\n          responseKeys: Object.keys(helperResponse || {}),\n          scenariosCount: helperResponse?.scenarios?.length || 0,\n          scenarios: helperResponse?.scenarios || []\n        },\n        rawResponse: helperResponse\n      });\n    } catch (error: any) {\n      tests.push({\n        name: \"ApiRequest Helper - Available Scenarios\",\n        status: 'error',\n        message: `Helper Error: ${error.message}`,\n        data: { error: error.toString() }\n      });\n    }\n\n    // Test 4: Test sessions endpoint\n    try {\n      console.log('üîç Testing sessions endpoint...');\n      const sessionsResponse = await apiRequest('GET', `/api/ecos/sessions?email=${encodeURIComponent(email)}`);\n      console.log('üîç Sessions response:', sessionsResponse);\n      \n      tests.push({\n        name: \"Sessions Endpoint\",\n        status: 'success',\n        message: `Found ${sessionsResponse.sessions?.length || 0} sessions`,\n        data: {\n          sessions: sessionsResponse.sessions || []\n        }\n      });\n    } catch (error: any) {\n      tests.push({\n        name: \"Sessions Endpoint\",\n        status: 'error',\n        message: `Sessions Error: ${error.message}`,\n        data: { error: error.toString() }\n      });\n    }\n\n    // Test 5: Test server connectivity\n    try {\n      console.log('üîç Testing server connectivity...');\n      const pingResponse = await fetch('/api/status?email=test@example.com');\n      const pingData = await pingResponse.json();\n      \n      tests.push({\n        name: \"Server Connectivity\",\n        status: pingResponse.ok ? 'success' : 'error',\n        message: pingResponse.ok ? \n          `Server responding (${pingResponse.status})` : \n          `Server error (${pingResponse.status})`,\n        data: pingData\n      });\n    } catch (error: any) {\n      tests.push({\n        name: \"Server Connectivity\",\n        status: 'error',\n        message: `Connection Error: ${error.message}`,\n        data: { error: error.toString() }\n      });\n    }\n\n    // Test 6: Check browser environment\n    tests.push({\n      name: \"Browser Environment\",\n      status: 'success',\n      message: `Running in ${typeof window !== 'undefined' ? 'browser' : 'server'} environment`,\n      data: {\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'N/A',\n        currentUrl: typeof window !== 'undefined' ? window.location.href : 'N/A',\n        baseUrl: typeof window !== 'undefined' ? window.location.origin : 'N/A'\n      }\n    });\n\n    setResults({\n      tests,\n      isRunning: false,\n      completedAt: new Date()\n    });\n\n    console.log('üîç Diagnostic completed. Results:', tests);\n  };\n\n  useEffect(() => {\n    if (email) {\n      runDiagnostic();\n    }\n  }, [email]);\n\n  const getStatusIcon = (status: DiagnosticTest['status']) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return <RefreshCw className=\"w-5 h-5 text-gray-400 animate-spin\" />;\n    }\n  };\n\n  const getStatusColor = (status: DiagnosticTest['status']) => {\n    switch (status) {\n      case 'success':\n        return 'bg-green-50 border-green-200';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200';\n      case 'error':\n        return 'bg-red-50 border-red-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Diagnostic √âtudiant ECOS</CardTitle>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Email test√©: {email}\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                onClick={runDiagnostic} \n                disabled={results.isRunning}\n                variant=\"outline\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${results.isRunning ? 'animate-spin' : ''}`} />\n                {results.isRunning ? 'Test en cours...' : 'Relancer le Test'}\n              </Button>\n              {results.completedAt && (\n                <Badge variant=\"outline\">\n                  Test√© √† {results.completedAt.toLocaleTimeString()}\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {results.tests.map((test, index) => (\n              <Card key={index} className={`border ${getStatusColor(test.status)}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    {getStatusIcon(test.status)}\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm\">{test.name}</h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">{test.message}</p>\n                      \n                      {test.data && (\n                        <details className=\"mt-2\">\n                          <summary className=\"text-xs text-blue-600 cursor-pointer hover:underline\">\n                            Voir les d√©tails\n                          </summary>\n                          <pre className=\"text-xs bg-gray-100 p-2 rounded mt-2 overflow-auto max-h-32\">\n                            {JSON.stringify(test.data, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n\n                      {test.rawResponse && (\n                        <details className=\"mt-2\">\n                          <summary className=\"text-xs text-purple-600 cursor-pointer hover:underline\">\n                            R√©ponse brute du serveur\n                          </summary>\n                          <pre className=\"text-xs bg-purple-50 p-2 rounded mt-2 overflow-auto max-h-40\">\n                            {JSON.stringify(test.rawResponse, null, 2)}\n                          </pre>\n                        </details>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {results.tests.length === 0 && !results.isRunning && (\n            <div className=\"text-center py-8 text-gray-500\">\n              Cliquez sur \"Relancer le Test\" pour d√©marrer le diagnostic\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Summary */}\n      {results.tests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">R√©sum√© du Diagnostic</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {results.tests.filter(t => t.status === 'success').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Tests R√©ussis</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {results.tests.filter(t => t.status === 'warning').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Avertissements</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {results.tests.filter(t => t.status === 'error').length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Erreurs</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":11212},"client/src/components/ecos/EvaluationReport.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, XCircle, AlertCircle, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EvaluationReportProps {\n  sessionId: number;\n  email: string;\n}\n\ninterface EvaluationData {\n  sessionId: number;\n  overallScore: number;\n  criteria: Array<{\n    id: string;\n    name: string;\n    score: number;\n    maxScore: number;\n    feedback: string;\n  }>;\n  summary: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendations: string[];\n}\n\nexport default function EvaluationReport({ sessionId, email }: EvaluationReportProps) {\n  // Fetch evaluation data\n  const { data: evaluation, isLoading, error } = useQuery({\n    queryKey: ['ecos-evaluation', sessionId],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/ecos/evaluate', {\n        email,\n        sessionId\n      });\n      return response as EvaluationData;\n    }\n  });\n\n  // Transform evaluation data to match expected structure\n  const transformedEvaluation = evaluation ? (() => {\n    const evalData = evaluation.evaluation || evaluation;\n    return {\n      ...evaluation,\n      ...evalData,\n      criteria: evalData.criteria || (evalData.scores ? Object.entries(evalData.scores).map(([key, score]) => ({\n        id: key,\n        name: key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' '),\n        score: typeof score === 'number' ? score : 0,\n        maxScore: 4,\n        feedback: evalData.comments?.[key] || 'Aucun commentaire'\n      })) : [])\n    };\n  })() : null;\n\n  console.log('üîç Raw evaluation data:', evaluation);\n  console.log('üîç Transformed evaluation:', transformedEvaluation);\n\n  // Calculate overall score percentage\n  const calculateOverallScore = (evaluation: any) => {\n    console.log('üìä Evaluation data for score calculation:', evaluation);\n\n    if (!evaluation) return 0;\n\n    // Check if scores exist in the evaluation object - handle nested structure\n    let scores: number[] = [];\n\n    // First check if evaluation has nested evaluation object (from API response)\n    const evalData = evaluation.evaluation || evaluation;\n\n    if (evalData.scores && typeof evalData.scores === 'object') {\n      scores = Object.values(evalData.scores).filter(score => typeof score === 'number') as number[];\n    } else if (evalData.criteria && Array.isArray(evalData.criteria)) {\n      scores = evalData.criteria.map((c: any) => c.score).filter((score: any) => typeof score === 'number');\n    }\n\n    console.log('üìä Extracted scores:', scores);\n\n    if (scores.length === 0) return 0;\n\n    const totalScore = scores.reduce((sum, score) => sum + score, 0);\n    const maxPossibleScore = scores.length * 4;\n    const percentage = Math.round((totalScore / maxPossibleScore) * 100);\n\n    console.log(`üìä Score calculation: ${totalScore}/${maxPossibleScore} = ${percentage}%`);\n\n    return percentage;\n  };\n\n  const overallScore = transformedEvaluation ? calculateOverallScore(transformedEvaluation) : 0;\n\n  // Fetch session report\n  const { data: report } = useQuery({\n    queryKey: ['ecos-report', sessionId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/ecos/sessions/${sessionId}/report?email=${email}`);\n      return response.report;\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 border-t-4 border-blue-500 border-solid rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">G√©n√©ration de l'√©valuation en cours...</p>\n              <p className=\"text-sm text-gray-500 mt-2\">\n                Cette op√©ration peut prendre quelques secondes\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = error.message || 'Impossible de charger l\\'√©valuation';\n    const isInsufficientContent = errorMessage.includes('assez d\\'√©changes') || errorMessage.includes('Aucune question');\n\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              {isInsufficientContent ? (\n                <>\n                  <AlertCircle className=\"w-16 h-16 mx-auto mb-4 text-blue-500\" />\n                  <h3 className=\"text-lg font-semibold mb-2 text-gray-800\">√âvaluation non disponible</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    L'√©valuation n'est pas disponible car la session √©tait vide.\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    Aucune interaction entre l'√©tudiant et le patient n'a √©t√© enregistr√©e pour cette session.\n                  </p>\n                </>\n              ) : (\n                <>\n                  <XCircle className=\"w-16 h-16 mx-auto mb-4 text-red-500\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Erreur lors du chargement</h3>\n                  <p className=\"text-gray-600\">{errorMessage}</p>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getScoreColor = (score: number, maxScore: number) => {\n    const percentage = (score / maxScore) * 100;\n    if (percentage >= 80) return \"text-green-600\";\n    if (percentage >= 60) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreIcon = (score: number, maxScore: number) => {\n    const percentage = (score / maxScore) * 100;\n    if (percentage >= 80) return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n    if (percentage >= 60) return <AlertCircle className=\"w-5 h-5 text-yellow-600\" />;\n    return <XCircle className=\"w-5 h-5 text-red-600\" />;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* Overall Score */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>R√©sultat Global</span>\n            <Badge variant=\"outline\" className=\"text-lg px-3 py-1\">\n              {overallScore}%\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <Progress value={overallScore} className=\"h-3\" />\n          </div>\n          {report?.summary && (\n            <p className=\"text-gray-700\">{report.summary}</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Detailed Criteria Scores */}\n      <Card>\n        <CardHeader>\n          <CardTitle>√âvaluation D√©taill√©e</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {transformedEvaluation.criteria.map((criterion) => (\n            <div key={criterion.id} className=\"border-b border-gray-100 pb-4 last:border-b-0\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  {getScoreIcon(criterion.score, criterion.maxScore)}\n                  <h4 className=\"font-medium\">{criterion.name}</h4>\n                </div>\n                <span className={`font-semibold ${getScoreColor(criterion.score, criterion.maxScore)}`}>\n                  {criterion.score}/{criterion.maxScore}\n                </span>\n              </div>\n              <Progress value={(criterion.score / criterion.maxScore) * 100} className=\"mb-2\" />\n              {criterion.feedback && (\n                <p className=\"text-sm text-gray-600\">{criterion.feedback}</p>\n              )}\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Strengths and Weaknesses */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Strengths */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-green-700\">\n              <TrendingUp className=\"w-5 h-5\" />\n              <span>Points Forts</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {report?.strengths && report.strengths.length > 0 ? (\n              <ul className=\"space-y-2\">\n                {report.strengths.map((strength: string, index: number) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{strength}</span>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-500 text-sm\">Aucun point fort identifi√©.</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Weaknesses */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-red-700\">\n              <TrendingDown className=\"w-5 h-5\" />\n              <span>Points √† Am√©liorer</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {report?.weaknesses && report.weaknesses.length > 0 ? (\n              <ul className=\"space-y-2\">\n                {report.weaknesses.map((weakness: string, index: number) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <AlertCircle className=\"w-4 h-4 text-red-500 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-sm text-gray-700\">{weakness}</span>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-500 text-sm\">Aucune faiblesse identifi√©e.</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recommendations */}\n      {report?.recommendations && report.recommendations.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recommandations pour l'Am√©lioration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-3\">\n              {report.recommendations.map((recommendation: string, index: number) => (\n                <li key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0 mt-0.5\">\n                    {index + 1}\n                  </div>\n                  <span className=\"text-gray-700\">{recommendation}</span>\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10850},"client/src/components/ecos/PatientSimulator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Send, User, Bot } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PatientSimulatorProps {\n  sessionId: number;\n  email: string;\n  onSessionEnd: () => void;\n}\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n}\n\nexport default function PatientSimulator({ sessionId, email, onSessionEnd }: PatientSimulatorProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentQuery, setCurrentQuery] = useState(\"\");\n  const [sessionStartTime] = useState(new Date());\n  const [remainingTime, setRemainingTime] = useState(8 * 60); // 8 minutes in seconds\n\n  // Countdown timer effect\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setRemainingTime(prev => {\n        if (prev <= 1) {\n          // Time's up - automatically end session\n          endSessionMutation.mutate();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Fetch session details\n  const { data: session } = useQuery({\n    queryKey: ['ecos-session', sessionId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/ecos/sessions/${sessionId}?email=${email}`);\n      return response.session;\n    }\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (query: string) => {\n      return apiRequest('POST', '/api/ecos/patient-simulator', {\n        email,\n        sessionId,\n        query\n      });\n    },\n    onSuccess: (data) => {\n      // Add user message\n      const userMessage: Message = {\n        id: Date.now().toString() + '-user',\n        role: 'user',\n        content: currentQuery,\n        timestamp: new Date().toISOString()\n      };\n\n      // Add assistant response\n      const assistantMessage: Message = {\n        id: Date.now().toString() + '-assistant',\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date().toISOString()\n      };\n\n      setMessages(prev => [...prev, userMessage, assistantMessage]);\n      setCurrentQuery(\"\");\n    }\n  });\n\n  // End session mutation\n  const endSessionMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('PUT', `/api/ecos/sessions/${sessionId}`, {\n        email,\n        status: 'completed'\n      });\n    },\n    onSuccess: () => {\n      onSessionEnd();\n    },\n    onError: (error) => {\n      console.error('Error ending session:', error);\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (currentQuery.trim()) {\n      sendMessageMutation.mutate(currentQuery);\n    }\n  };\n\n  const handleEndSession = () => {\n    endSessionMutation.mutate();\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      {/* Session Header */}\n      <Card className=\"mb-6 border-2 border-blue-500\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"text-xl\">{session?.scenario?.title}</CardTitle>\n              <p className=\"text-gray-600 mt-1\">{session?.scenario?.description}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Badge \n                variant=\"outline\" \n                className={`flex items-center space-x-1 ${remainingTime <= 60 ? 'bg-red-50 text-red-700 border-red-200' : ''}`}\n              >\n                <Clock className=\"w-4 h-4\" />\n                <span>{formatTime(remainingTime)}</span>\n              </Badge>\n              <Button \n                onClick={handleEndSession}\n                disabled={endSessionMutation.isPending}\n              >\n                {endSessionMutation.isPending ? 'Fermeture...' : 'Terminer la Session'}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Chat Interface */}\n      <Card className=\"h-[600px] flex flex-col border-2 border-blue-500\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span>Simulation Patient</span>\n          </CardTitle>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 flex flex-col\">\n          {/* Messages Area */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-gray-50 rounded-lg\">\n            {messages.length === 0 && (\n              <div className=\"text-center text-gray-500 py-8\">\n                \n                <p>Bonjour Docteur, je suis votre patient pour cet examen.</p>\n                <p className=\"text-sm\">Commencez votre consultation en me posant des questions.</p>\n              </div>\n            )}\n\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[70%] p-3 rounded-lg ${\n                    message.role === 'user'\n                      ? 'bg-blue-500 text-white'\n                      : 'bg-white border border-gray-200'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    {message.role === 'user' ? (\n                      <User className=\"w-4 h-4\" />\n                    ) : (\n                      <Bot className=\"w-4 h-4\" />\n                    )}\n                    <span className=\"text-xs opacity-75\">\n                      {message.role === 'user' ? 'Vous' : 'Patient'}\n                    </span>\n                  </div>\n                  <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                </div>\n              </div>\n            ))}\n\n            {sendMessageMutation.isPending && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-white border border-gray-200 p-3 rounded-lg max-w-[70%]\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Bot className=\"w-4 h-4\" />\n                    <span className=\"text-xs text-gray-500\">Patient</span>\n                  </div>\n                  <div className=\"flex space-x-1 mt-2\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Input Area */}\n          <div className=\"flex space-x-2\">\n            <Textarea\n              value={currentQuery}\n              onChange={(e) => setCurrentQuery(e.target.value)}\n              placeholder=\"Posez votre question au patient...\"\n              className=\"flex-1 border-2 border-blue-500\"\n              rows={2}\n              onKeyDown={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n            />\n            <Button\n              onClick={handleSendMessage}\n              disabled={!currentQuery.trim() || sendMessageMutation.isPending}\n              className=\"self-end\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8043},"client/src/components/ecos/TeacherAssistant.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Edit, Plus, Wand2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EcosScenario {\n  id: number;\n  title: string;\n  description: string;\n  patientPrompt: string;\n  evaluationCriteria: any;\n  createdBy: string;\n  createdAt: string;\n}\n\ninterface TeacherAssistantProps {\n  email: string;\n}\n\nexport default function TeacherAssistant({ email }: TeacherAssistantProps) {\n  const [selectedScenario, setSelectedScenario] = useState<EcosScenario | null>(null);\n  const [isCreating, setIsCreating] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"scenarios\");\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    patientPrompt: \"\",\n    evaluationCriteria: \"\"\n  });\n\n  // Fetch scenarios\n  const { data: scenarios, isLoading, refetch: refetchScenarios } = useQuery({\n    queryKey: ['ecos-scenarios', email],\n    queryFn: async () => {\n      try {\n        console.log('Fetching scenarios for email:', email);\n        const response = await apiRequest('GET', `/api/ecos/scenarios?email=${encodeURIComponent(email)}`);\n        console.log('Scenarios response:', response);\n        return response.scenarios || [];\n      } catch (error) {\n        console.error('Error fetching scenarios:', error);\n        throw error;\n      }\n    },\n    enabled: !!email,\n  });\n\n  // Create scenario mutation\n  const createScenarioMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log(\"Sending scenario creation request:\", { email, ...data });\n      return apiRequest('POST', '/api/ecos/scenarios', {\n        email,\n        ...data\n      });\n    },\n    onSuccess: (response) => {\n      console.log(\"Scenario created successfully:\", response);\n      refetchScenarios();\n      setIsCreating(false);\n      setFormData({ title: \"\", description: \"\", patientPrompt: \"\", evaluationCriteria: \"\" });\n      // Switch to scenarios tab to show the new scenario\n      setActiveTab(\"scenarios\");\n      alert(\"Sc√©nario cr√©√© avec succ√®s !\");\n    },\n    onError: (error) => {\n      console.error(\"Error creating scenario:\", error);\n      alert(\"Erreur lors de la cr√©ation du sc√©nario. Veuillez r√©essayer.\");\n    }\n  });\n\n  // Delete scenario mutation\n  const deleteScenarioMutation = useMutation({\n    mutationFn: async (scenarioId: number) => {\n      return apiRequest('DELETE', `/api/ecos/scenarios/${scenarioId}?email=${email}`);\n    },\n    onSuccess: () => {\n      refetchScenarios();\n      setSelectedScenario(null);\n    }\n  });\n\n  // Generate prompt mutation\n  const generatePromptMutation = useMutation({\n    mutationFn: async (input: string) => {\n      return apiRequest('POST', '/api/ecos/prompt-assistant', {\n        email,\n        input,\n        contextDocs: []\n      });\n    },\n    onSuccess: (data) => {\n      setFormData(prev => ({ ...prev, patientPrompt: data.prompt }));\n    }\n  });\n\n  const handleCreateScenario = () => {\n    console.log(\"Creating scenario with email:\", email);\n    \n    let criteria = undefined;\n    \n    if (formData.evaluationCriteria && formData.evaluationCriteria.trim()) {\n      try {\n        criteria = JSON.parse(formData.evaluationCriteria);\n      } catch (error) {\n        alert(\"Erreur : Les crit√®res d'√©valuation doivent √™tre au format JSON valide. Exemple : {\\\"anamnese\\\": 20, \\\"examen_physique\\\": 30}\");\n        return;\n      }\n    }\n    \n    createScenarioMutation.mutate({\n      title: formData.title,\n      description: formData.description,\n      patientPrompt: formData.patientPrompt || undefined,\n      evaluationCriteria: criteria\n    });\n  };\n\n  const handleGeneratePrompt = () => {\n    if (formData.description) {\n      generatePromptMutation.mutate(formData.description);\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Assistant Enseignant ECOS</h1>\n        <p className=\"text-gray-600\">Cr√©ez et g√©rez vos sc√©narios d'examen clinique</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"scenarios\">Mes Sc√©narios</TabsTrigger>\n          <TabsTrigger value=\"create\">Cr√©er un Sc√©nario</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"scenarios\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold\">Sc√©narios ECOS</h2>\n            <Button onClick={() => setIsCreating(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nouveau Sc√©nario\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {scenarios?.map((scenario: EcosScenario) => (\n                <Card key={scenario.id} className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{scenario.title}</CardTitle>\n                    <Badge variant=\"secondary\" className=\"w-fit\">\n                      {new Date(scenario.createdAt).toLocaleDateString()}\n                    </Badge>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-gray-600 text-sm mb-4 line-clamp-3\">\n                      {scenario.description}\n                    </p>\n                    <div className=\"flex justify-between\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedScenario(scenario)}\n                      >\n                        <Edit className=\"w-4 h-4 mr-1\" />\n                        Modifier\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => deleteScenarioMutation.mutate(scenario.id)}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"create\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Cr√©er un Nouveau Sc√©nario</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Titre du Sc√©nario</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                  placeholder=\"Ex: Consultation cardiologique\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"D√©crivez le contexte clinique, les sympt√¥mes du patient, etc.\"\n                  rows={4}\n                />\n              </div>\n\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <Label htmlFor=\"patientPrompt\">Prompt du Patient</Label>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleGeneratePrompt}\n                    disabled={!formData.description || generatePromptMutation.isPending}\n                  >\n                    <Wand2 className=\"w-4 h-4 mr-1\" />\n                    G√©n√©rer avec IA\n                  </Button>\n                </div>\n                <Textarea\n                  id=\"patientPrompt\"\n                  value={formData.patientPrompt}\n                  onChange={(e) => setFormData(prev => ({ ...prev, patientPrompt: e.target.value }))}\n                  placeholder=\"Instructions pour l'IA qui jouera le r√¥le du patient...\"\n                  rows={6}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"evaluationCriteria\">Crit√®res d'√âvaluation (JSON)</Label>\n                <Textarea\n                  id=\"evaluationCriteria\"\n                  value={formData.evaluationCriteria}\n                  onChange={(e) => setFormData(prev => ({ ...prev, evaluationCriteria: e.target.value }))}\n                  placeholder='{\"anamnese\": 20, \"examen_physique\": 30, \"diagnostic\": 25, \"plan_therapeutique\": 25}'\n                  rows={4}\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Format JSON requis. Exemple : {\"{\"}\"anamnese\": 20, \"examen_physique\": 30{\"}\"}\n                </p>\n              </div>\n\n              <Button\n                onClick={handleCreateScenario}\n                disabled={!formData.title || !formData.description || createScenarioMutation.isPending}\n                className=\"w-full\"\n              >\n                {createScenarioMutation.isPending ? \"Cr√©ation...\" : \"Cr√©er le Sc√©nario\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":10692},"client/src/components/ecos/TrainingSessionsTab.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Calendar, UserPlus, CheckCircle, Edit, Trash2, Plus, BookOpen, Users, UserMinus, X } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface TrainingSessionsTabProps {\n  email: string;\n}\n\ninterface TrainingSession {\n  id: number;\n  title: string;\n  description?: string;\n  startDate: string;\n  endDate: string;\n  scenarios: Array<{\n    id: number;\n    title: string;\n    description: string;\n  }>;\n  studentCount: number;\n  students?: Array<{\n    studentEmail: string;\n    assignedAt: string;\n  }>;\n}\n\ninterface CreateTrainingSessionFormProps {\n  email: string;\n  scenarios: any[];\n  onSuccess: () => void;\n  editingSession?: TrainingSession | null;\n  onCancelEdit?: () => void;\n}\n\ninterface RemoveStudentsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  trainingSession: TrainingSession;\n  email: string;\n  onSuccess: () => void;\n}\n\ninterface EnrolledStudentsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  trainingSession: TrainingSession;\n  email: string;\n  onSuccess: () => void;\n}\n\nfunction EnrolledStudentsModal({ isOpen, onClose, trainingSession, email, onSuccess }: EnrolledStudentsModalProps) {\n  const [removingStudent, setRemovingStudent] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch detailed training session to get students list\n  const { data: sessionDetails } = useQuery({\n    queryKey: ['training-session-details', trainingSession.id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/training-sessions/${trainingSession.id}?email=${encodeURIComponent(email)}`);\n      return response.trainingSession;\n    },\n    enabled: isOpen && !!trainingSession.id,\n  });\n\n  const handleRemoveStudent = async (studentEmail: string) => {\n    const confirmMessage = `√ätes-vous s√ªr de vouloir d√©sinscrire ${studentEmail} de cette session de formation ?`;\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    setRemovingStudent(studentEmail);\n    try {\n      // Get current students and remove the selected one\n      const currentStudents = sessionDetails?.students || [];\n      const remainingStudents = currentStudents\n        .filter((student: any) => student.studentEmail !== studentEmail)\n        .map((student: any) => student.studentEmail);\n\n      await apiRequest('PUT', `/api/training-sessions/${trainingSession.id}`, {\n        email,\n        studentEmails: remainingStudents\n      });\n\n      queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n      queryClient.invalidateQueries({ queryKey: ['training-session-details'] });\n\n      alert(`${studentEmail} a √©t√© d√©sinscrit avec succ√®s !`);\n      onSuccess();\n    } catch (error: any) {\n      alert(\"Erreur lors de la suppression : \" + error.message);\n    } finally {\n      setRemovingStudent(null);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-6 rounded-lg max-w-lg w-full mx-4 max-h-[80vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">√âtudiants Inscrits</h3>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <p className=\"text-gray-600 mb-4\">\n          Session de formation : \"{trainingSession.title}\"\n        </p>\n\n        {sessionDetails?.students && sessionDetails.students.length > 0 ? (\n          <div className=\"space-y-3 mb-6\">\n            {sessionDetails.students.map((student: any) => (\n              <div key={student.studentEmail} className=\"flex items-center justify-between p-3 border rounded\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">\n                    {student.studentEmail}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Inscrit le {new Date(student.assignedAt).toLocaleDateString('fr-FR')}\n                  </p>\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleRemoveStudent(student.studentEmail)}\n                  disabled={removingStudent === student.studentEmail}\n                >\n                  <UserMinus className=\"w-4 h-4 mr-1\" />\n                  {removingStudent === student.studentEmail ? \"Suppression...\" : \"D√©sinscrire\"}\n                </Button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-gray-500 text-center py-8\">\n            Aucun √©tudiant inscrit √† cette session\n          </p>\n        )}\n\n        <div className=\"flex justify-end\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n          >\n            Fermer\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction RemoveStudentsModal({ isOpen, onClose, trainingSession, email, onSuccess }: RemoveStudentsModalProps) {\n  const [selectedStudents, setSelectedStudents] = useState<string[]>([]);\n  const [isRemoving, setIsRemoving] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Fetch detailed training session to get students list\n  const { data: sessionDetails } = useQuery({\n    queryKey: ['training-session-details', trainingSession.id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/training-sessions/${trainingSession.id}?email=${encodeURIComponent(email)}`);\n      return response.trainingSession;\n    },\n    enabled: isOpen && !!trainingSession.id,\n  });\n\n  const handleRemoveStudents = async () => {\n    if (selectedStudents.length === 0) {\n      alert(\"Veuillez s√©lectionner au moins un √©tudiant √† supprimer\");\n      return;\n    }\n\n    const confirmMessage = `√ätes-vous s√ªr de vouloir d√©sinscrire ${selectedStudents.length} √©tudiant(s) de cette session de formation ?`;\n    if (!confirm(confirmMessage)) {\n      return;\n    }\n\n    setIsRemoving(true);\n    try {\n      // Get current students and remove selected ones\n      const currentStudents = sessionDetails?.students || [];\n      const remainingStudents = currentStudents\n        .filter((student: any) => !selectedStudents.includes(student.studentEmail))\n        .map((student: any) => student.studentEmail);\n\n      await apiRequest('PUT', `/api/training-sessions/${trainingSession.id}`, {\n        email,\n        studentEmails: remainingStudents\n      });\n\n      queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n      queryClient.invalidateQueries({ queryKey: ['training-session-details'] });\n\n      alert(`${selectedStudents.length} √©tudiant(s) d√©sincrit(s) avec succ√®s !`);\n      setSelectedStudents([]);\n      onSuccess();\n      onClose();\n    } catch (error: any) {\n      alert(\"Erreur lors de la suppression : \" + error.message);\n    } finally {\n      setIsRemoving(false);\n    }\n  };\n\n  const toggleStudent = (studentEmail: string) => {\n    setSelectedStudents(prev => \n      prev.includes(studentEmail)\n        ? prev.filter(email => email !== studentEmail)\n        : [...prev, studentEmail]\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4 max-h-[80vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">Supprimer des Utilisateurs</h3>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <p className=\"text-gray-600 mb-4\">\n          S√©lectionnez les √©tudiants √† d√©sinscrire de la session \"{trainingSession.title}\"\n        </p>\n\n        {sessionDetails?.students && sessionDetails.students.length > 0 ? (\n          <div className=\"space-y-3 mb-6\">\n            {sessionDetails.students.map((student: any) => (\n              <div key={student.studentEmail} className=\"flex items-center space-x-2 p-3 border rounded\">\n                <Checkbox\n                  id={`student-${student.studentEmail}`}\n                  checked={selectedStudents.includes(student.studentEmail)}\n                  onCheckedChange={() => toggleStudent(student.studentEmail)}\n                />\n                <div className=\"flex-1\">\n                  <label htmlFor={`student-${student.studentEmail}`} className=\"text-sm font-medium cursor-pointer\">\n                    {student.studentEmail}\n                  </label>\n                  <p className=\"text-xs text-gray-500\">\n                    Inscrit le {new Date(student.assignedAt).toLocaleDateString('fr-FR')}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-gray-500 text-center py-8\">\n            Aucun √©tudiant inscrit √† cette session\n          </p>\n        )}\n\n        <div className=\"flex gap-3 justify-end\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isRemoving}\n          >\n            Annuler\n          </Button>\n          <Button\n            variant=\"destructive\"\n            onClick={handleRemoveStudents}\n            disabled={isRemoving || selectedStudents.length === 0}\n          >\n            <UserMinus className=\"w-4 h-4 mr-2\" />\n            {isRemoving ? \"Suppression...\" : `Supprimer (${selectedStudents.length})`}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction CreateTrainingSessionForm({ email, scenarios, onSuccess, editingSession, onCancelEdit }: CreateTrainingSessionFormProps) {\n  const [formData, setFormData] = useState({\n    title: editingSession?.title || \"\",\n    description: editingSession?.description || \"\",\n    startDate: editingSession?.startDate ? new Date(editingSession.startDate).toISOString().slice(0, 16) : \"\",\n    endDate: editingSession?.endDate ? new Date(editingSession.endDate).toISOString().slice(0, 16) : \"\",\n    selectedScenarios: editingSession?.scenarios?.map(s => s.id) || [],\n    studentEmails: [],\n  });\n\n  const [studentEmailsText, setStudentEmailsText] = useState(\"\");\n\n  const queryClient = useQueryClient();\n\n  const createMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingSession) {\n        return apiRequest('PUT', `/api/training-sessions/${editingSession.id}`, {\n          email,\n          ...data\n        });\n      } else {\n        return apiRequest('POST', '/api/training-sessions', {\n          email,\n          ...data\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n      setFormData({\n        title: \"\",\n        description: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        selectedScenarios: [],\n        studentEmails: [],\n      });\n      setStudentEmailsText(\"\");\n      if (onCancelEdit) onCancelEdit();\n      onSuccess();\n      alert(`Session de formation ${editingSession ? 'modifi√©e' : 'cr√©√©e'} avec succ√®s !`);\n    },\n    onError: (error: any) => {\n      alert(`Erreur lors de la ${editingSession ? 'modification' : 'cr√©ation'} de la session : ${error.message}`);\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!formData.title || !formData.startDate || !formData.endDate) {\n      alert(\"Veuillez remplir tous les champs obligatoires\");\n      return;\n    }\n\n    if (new Date(formData.startDate) >= new Date(formData.endDate)) {\n      alert(\"La date de fin doit √™tre post√©rieure √† la date de d√©but\");\n      return;\n    }\n\n    // Parse student emails\n    const newEmails = studentEmailsText\n      .split(/[,\\n]/)\n      .map(email => email.trim())\n      .filter(email => email.length > 0);\n\n    // Si on modifie une session existante, on ne met √† jour que les nouveaux emails\n    // Les utilisateurs existants sont pr√©serv√©s\n    let submitData = {\n      ...formData,\n      scenarioIds: formData.selectedScenarios,\n    };\n\n    if (editingSession) {\n      // En mode modification, on n'envoie les emails que s'il y en a de nouveaux √† ajouter\n      if (newEmails.length > 0) {\n        submitData.studentEmails = newEmails;\n      }\n    } else {\n      // En mode cr√©ation, on envoie tous les emails\n      submitData.studentEmails = newEmails;\n    }\n\n    createMutation.mutate(submitData);\n  };\n\n  const toggleScenario = (scenarioId: number) => {\n    setFormData(prev => ({\n      ...prev,\n      selectedScenarios: prev.selectedScenarios.includes(scenarioId)\n        ? prev.selectedScenarios.filter(id => id !== scenarioId)\n        : [...prev.selectedScenarios, scenarioId]\n    }));\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {editingSession ? \"Modifier la Session de Formation\" : \"Cr√©er une Nouvelle Session de Formation\"}\n        </CardTitle>\n        <CardDescription>\n          Une session de formation regroupe plusieurs sc√©narios ECOS disponibles pour un groupe d'√©tudiants pendant une p√©riode d√©finie\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"title\">Titre de la Session *</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Ex: Formation Cardiologie - Semaine 1\"\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Description de la session de formation...\"\n              rows={2}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"startDate\">Date et Heure de D√©but *</Label>\n            <Input\n              id=\"startDate\"\n              type=\"datetime-local\"\n              value={formData.startDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"endDate\">Date et Heure de Fin *</Label>\n            <Input\n              id=\"endDate\"\n              type=\"datetime-local\"\n              value={formData.endDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label>Sc√©narios ECOS √† Inclure</Label>\n          <div className=\"mt-2 grid grid-cols-1 md:grid-cols-2 gap-3 max-h-60 overflow-y-auto\">\n            {scenarios.map((scenario) => (\n              <div key={scenario.id} className=\"flex items-start space-x-2 p-3 border rounded\">\n                <Checkbox\n                  id={`scenario-${scenario.id}`}\n                  checked={formData.selectedScenarios.includes(scenario.id)}\n                  onCheckedChange={() => toggleScenario(scenario.id)}\n                />\n                <div className=\"flex-1\">\n                  <label htmlFor={`scenario-${scenario.id}`} className=\"text-sm font-medium cursor-pointer\">\n                    {scenario.title}\n                  </label>\n                  <p className=\"text-xs text-gray-600 mt-1\">{scenario.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">\n            {formData.selectedScenarios.length} sc√©nario(s) s√©lectionn√©(s)\n          </p>\n        </div>\n\n        <div>\n          <Label htmlFor=\"studentEmails\">Emails des √âtudiants (optionnel)</Label>\n          <Textarea\n            id=\"studentEmails\"\n            value={studentEmailsText}\n            onChange={(e) => setStudentEmailsText(e.target.value)}\n            placeholder=\"etudiant1@email.com, etudiant2@email.com&#10;ou un email par ligne...\"\n            rows={4}\n            className=\"mt-1\"\n          />\n          <p className=\"text-xs text-gray-500 mt-1\">\n            S√©parez les emails par des virgules ou des retours √† la ligne. Les √©tudiants pourront acc√©der aux sc√©narios pendant la p√©riode d√©finie.\n          </p>\n        </div>\n\n        {editingSession && (\n          <div className=\"mb-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setRemovingStudentsSession(editingSession)}\n              className=\"w-full\"\n            >\n              <UserMinus className=\"w-4 h-4 mr-2\" />\n              Supprimer des Utilisateurs\n            </Button>\n          </div>\n        )}\n\n        <div className=\"flex gap-3\">\n          <Button\n            onClick={handleSubmit}\n            disabled={createMutation.isPending}\n            className=\"flex-1\"\n          >\n            {createMutation.isPending \n              ? (editingSession ? \"Modification en cours...\" : \"Cr√©ation en cours...\") \n              : (editingSession ? \"Modifier la Session\" : \"Cr√©er la Session\")\n            }\n          </Button>\n\n          {editingSession && (\n            <Button\n              variant=\"outline\"\n              onClick={onCancelEdit}\n              disabled={createMutation.isPending}\n            >\n              Annuler\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function TrainingSessionsTab({ email }: TrainingSessionsTabProps) {\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [editingSession, setEditingSession] = useState<TrainingSession | null>(null);\n  const [deletingSession, setDeletingSession] = useState<TrainingSession | null>(null);\n  const [removingStudentsSession, setRemovingStudentsSession] = useState<TrainingSession | null>(null);\n  const [enrolledStudentsSession, setEnrolledStudentsSession] = useState<TrainingSession | null>(null);\n\n  // Fetch training sessions\n  const { data: trainingSessions, isLoading: sessionsLoading } = useQuery({\n    queryKey: ['training-sessions', email],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/training-sessions?email=${encodeURIComponent(email)}`);\n      return response.trainingSessions || [];\n    },\n    enabled: !!email,\n  });\n\n  // Fetch scenarios for the form\n  const { data: scenarios } = useQuery({\n    queryKey: ['ecos-scenarios', email],\n    queryFn: async () => {\n      try {\n        // Try admin endpoint first\n        const response = await apiRequest('GET', `/api/ecos/scenarios?email=${encodeURIComponent(email)}`);\n        return response.scenarios || [];\n      } catch (error) {\n        // Fallback to student endpoint\n        try {\n          const fallbackResponse = await apiRequest('GET', `/api/student/available-scenarios?email=${encodeURIComponent(email)}`);\n          return fallbackResponse.scenarios || [];\n        } catch (fallbackError) {\n          console.error('Both scenario endpoints failed:', error, fallbackError);\n          return [];\n        }\n      }\n    },\n    enabled: !!email,\n  });\n\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (sessionId: number) => {\n      return apiRequest('DELETE', `/api/training-sessions/${sessionId}?email=${encodeURIComponent(email)}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n      setDeletingSession(null);\n      alert(\"Session de formation supprim√©e avec succ√®s !\");\n    },\n    onError: (error: any) => {\n      alert(\"Erreur lors de la suppression : \" + error.message);\n    }\n  });\n\n  const isSessionActive = (session: TrainingSession) => {\n    const now = new Date();\n    const start = new Date(session.startDate);\n    const end = new Date(session.endDate);\n    return now >= start && now <= end;\n  };\n\n  const getSessionStatus = (session: TrainingSession) => {\n    const now = new Date();\n    const start = new Date(session.startDate);\n    const end = new Date(session.endDate);\n\n    if (now < start) return 'planned';\n    if (now > end) return 'completed';\n    return 'active';\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'planned':\n        return <Badge variant=\"secondary\">Planifi√©e</Badge>;\n      case 'active':\n        return <Badge variant=\"default\" className=\"bg-green-600\">Active</Badge>;\n      case 'completed':\n        return <Badge variant=\"outline\">Termin√©e</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Inconnue</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Sessions de Formation</h2>\n          <p className=\"text-gray-600\">G√©rez les sessions de formation regroupant plusieurs sc√©narios ECOS</p>\n        </div>\n        <Button \n          onClick={() => setShowCreateForm(true)}\n          disabled={!scenarios?.length}\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Nouvelle Session\n        </Button>\n      </div>\n\n      {/* Create/Edit Form */}\n      {(showCreateForm || editingSession) && (\n        <CreateTrainingSessionForm\n          email={email}\n          scenarios={scenarios || []}\n          onSuccess={() => {\n            setShowCreateForm(false);\n            setEditingSession(null);\n          }}\n          editingSession={editingSession}\n          onCancelEdit={() => {\n            setShowCreateForm(false);\n            setEditingSession(null);\n          }}\n        />\n      )}\n\n      {/* Training Sessions List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Sessions de Formation</CardTitle>\n          <CardDescription>\n            {trainingSessions?.length || 0} session(s) de formation cr√©√©e(s)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {sessionsLoading ? (\n            <p className=\"text-center py-8\">Chargement des sessions...</p>\n          ) : trainingSessions?.length > 0 ? (\n            <div className=\"space-y-4\">\n              {trainingSessions.map((session: TrainingSession) => {\n                const status = getSessionStatus(session);\n                return (\n                  <div key={session.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-lg\">{session.title}</h3>\n                          {getStatusBadge(status)}\n                        </div>\n                        {session.description && (\n                          <p className=\"text-gray-600 text-sm mb-2\">{session.description}</p>\n                        )}\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                          <span className=\"flex items-center gap-1\">\n                            <Calendar className=\"w-4 h-4\" />\n                            {new Date(session.startDate).toLocaleDateString('fr-FR')} - {new Date(session.endDate).toLocaleDateString('fr-FR')}\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <BookOpen className=\"w-4 h-4\" />\n                            {session.scenarios.length} sc√©nario(s)\n                          </span>\n                          <span className=\"flex items-center gap-1\">\n                            <Users className=\"w-4 h-4\" />\n                            {session.studentCount} √©tudiant(s)\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"secondary\"\n                          onClick={() => setEnrolledStudentsSession(session)}\n                        >\n                          <Users className=\"w-4 h-4 mr-1\" />\n                          Inscrits\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setEditingSession(session)}\n                        >\n                          <Edit className=\"w-4 h-4 mr-1\" />\n                          Modifier\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => setDeletingSession(session)}\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-1\" />\n                          Supprimer\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Scenarios list */}\n                    {session.scenarios.length > 0 && (\n                      <div className=\"mt-3\">\n                        <p className=\"text-sm font-medium mb-2\">Sc√©narios inclus :</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {session.scenarios.map((scenario) => (\n                            <Badge key={scenario.id} variant=\"outline\" className=\"text-xs\">\n                              {scenario.title}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucune session de formation</h3>\n              <p className=\"text-gray-600 mb-4\">Cr√©ez votre premi√®re session de formation pour regrouper des sc√©narios ECOS</p>\n              {scenarios?.length > 0 ? (\n                <Button onClick={() => setShowCreateForm(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Cr√©er une session\n                </Button>\n              ) : (\n                <p className=\"text-sm text-gray-500\">Vous devez d'abord cr√©er des sc√©narios ECOS</p>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Enrolled Students Modal */}\n      {enrolledStudentsSession && (\n        <EnrolledStudentsModal\n          isOpen={!!enrolledStudentsSession}\n          onClose={() => setEnrolledStudentsSession(null)}\n          trainingSession={enrolledStudentsSession}\n          email={email}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n          }}\n        />\n      )}\n\n      {/* Remove Students Modal */}\n      {removingStudentsSession && (\n        <RemoveStudentsModal\n          isOpen={!!removingStudentsSession}\n          onClose={() => setRemovingStudentsSession(null)}\n          trainingSession={removingStudentsSession}\n          email={email}\n          onSuccess={() => {\n            queryClient.invalidateQueries({ queryKey: ['training-sessions'] });\n          }}\n        />\n      )}\n\n      {/* Delete Confirmation Modal */}\n      {deletingSession && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Confirmer la suppression</h3>\n            <p className=\"text-gray-600 mb-6\">\n              √ätes-vous s√ªr de vouloir supprimer la session de formation \"{deletingSession.title}\" ? \n              Cette action est irr√©versible.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setDeletingSession(null)}\n                disabled={deleteMutation.isPending}\n              >\n                Annuler\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() => deleteMutation.mutate(deletingSession.id)}\n                disabled={deleteMutation.isPending}\n              >\n                {deleteMutation.isPending ? \"Suppression...\" : \"Supprimer\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":29324},"client/src/components/layout/AdminButton.tsx":{"content":"\nimport { Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AdminButtonProps {\n  email: string;\n}\n\nconst ADMIN_EMAILS = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n\nexport function AdminButton({ email }: AdminButtonProps) {\n  const isAdmin = ADMIN_EMAILS.includes(email.toLowerCase());\n\n  if (!isAdmin) {\n    return null;\n  }\n\n  const handleAdminClick = () => {\n    window.location.href = `/admin?email=${encodeURIComponent(email)}`;\n  };\n\n  return (\n    <Button\n      onClick={handleAdminClick}\n      variant=\"outline\"\n      className=\"flex items-center gap-2 text-sm\"\n    >\n      <Settings className=\"h-4 w-4\" />\n      Administration\n    </Button>\n  );\n}\n","size_bytes":714},"client/src/components/layout/MobileMenu.tsx":{"content":"import { UserStatus } from \"@/lib/api\";\nimport { DailyCounter } from \"@/components/chat/DailyCounter\";\nimport { AdminButton } from \"./AdminButton\";\n\ninterface MobileMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  email: string;\n  userStatus?: UserStatus;\n  isLoading?: boolean;\n}\n\nexport default function MobileMenu({ \n  isOpen, \n  onClose, \n  email, \n  userStatus,\n  isLoading = false \n}: MobileMenuProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 md:hidden\">\n      <div className=\"w-72 h-full bg-white shadow-xl flex flex-col\">\n        <div className=\"p-5 border-b border-neutral-100 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary flex items-center justify-center rounded-lg\">\n              <span className=\"material-icons text-white\">school</span>\n            </div>\n            <h1 className=\"font-heading font-semibold text-lg text-neutral-800\">LearnWorlds</h1>\n          </div>\n          <button onClick={onClose} className=\"p-2 rounded-full hover:bg-neutral-100\">\n            <span className=\"material-icons text-neutral-600\">close</span>\n          </button>\n        </div>\n\n        <div className=\"p-5 border-b border-neutral-100\">\n          {/* User profile */}\n          <p className=\"text-sm font-medium text-neutral-700\">Utilisateur connect√©</p>\n          <div className=\"flex items-center mt-2\">\n            <div className=\"w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center\">\n              <span className=\"material-icons text-sm\">person</span>\n            </div>\n            <span className=\"ml-2 text-neutral-600 text-sm\">{email}</span>\n          </div>\n        </div>\n\n        {/* Daily counter */}\n        <DailyCounter userStatus={userStatus} isLoading={isLoading} />\n\n        <div className=\"flex-grow p-5\">\n          <div className=\"space-y-4\">\n            <button className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg bg-primary-light bg-opacity-10 text-primary hover:bg-opacity-20 transition-all\">\n              <span className=\"material-icons\">forum</span>\n              <span className=\"font-medium\">Assistant Chat</span>\n            </button>\n\n            <button className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-neutral-600 hover:bg-neutral-100 transition-all\">\n              <span className=\"material-icons\">help_outline</span>\n              <span>Aide</span>\n            </button>\n\n            <button className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-neutral-600 hover:bg-neutral-100 transition-all\">\n              <span className=\"material-icons\">settings</span>\n              <span>Param√®tres</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-5 border-t border-neutral-100\">\n          <button className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-neutral-600 hover:bg-neutral-100 transition-all\">\n            <span className=\"material-icons\">logout</span>\n            <span>Se d√©connecter</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3199},"client/src/components/layout/Sidebar.tsx":{"content":"import { MessageCircle, User, HelpCircle } from \"lucide-react\";\nimport { UserStatus } from \"@/lib/api\";\nimport { DailyCounter } from \"../chat/DailyCounter\";\nimport { AdminButton } from \"./AdminButton\";\n\ninterface SidebarProps {\n  email: string;\n  userStatus?: UserStatus;\n  isLoading?: boolean;\n  className?: string;\n}\n\nexport default function Sidebar({ \n  email, \n  userStatus, \n  isLoading = false,\n  className = \"\" \n}: SidebarProps) {\n  return (\n    <div className={`md:w-72 bg-white shadow-card flex-shrink-0 flex-col ${className}`}>\n      <div className=\"p-5 border-b border-neutral-100\">\n        <div className=\"flex items-center space-x-3\">\n          {/* Logo */}\n          <div className=\"w-10 h-10 bg-primary flex items-center justify-center rounded-lg\">\n            <span className=\"material-icons text-white\">school</span>\n          </div>\n          <div>\n            <h1 className=\"font-heading font-semibold text-lg text-neutral-800\">CEERRFbot</h1>\n            <p className=\"text-sm text-neutral-500\">Assistant de Cours</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-5 border-b border-neutral-100\">\n        {/* User profile */}\n        <p className=\"text-sm font-medium text-neutral-700\">Utilisateur connect√©</p>\n        <div className=\"flex items-center mt-2\">\n          <div className=\"w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center\">\n            <span className=\"material-icons text-sm\">person</span>\n          </div>\n          <span className=\"ml-2 text-neutral-600 text-sm\">{email}</span>\n        </div>\n      </div>\n\n      {/* Daily counter */}\n      <DailyCounter userStatus={userStatus} isLoading={isLoading} />\n\n      <div className=\"flex-grow p-5\">\n        <div className=\"space-y-4\">\n        </div>\n      </div>\n\n      <div className=\"p-5 border-t border-neutral-100\">\n        <button className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-neutral-600 hover:bg-neutral-100 transition-all\">\n          <span className=\"material-icons\">logout</span>\n          <span>Se d√©connecter</span>\n        </button>\n\n        <div className=\"pt-4 border-t border-neutral-200\">\n          <AdminButton email={email} />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2247},"client/src/components/modals/ErrorModal.tsx":{"content":"interface ErrorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ErrorModal({ isOpen, onClose }: ErrorModalProps) {\n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center\">\n      <div className=\"bg-white rounded-xl p-6 max-w-md w-full mx-4\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"w-16 h-16 bg-accent bg-opacity-10 rounded-full flex items-center justify-center\">\n            <span className=\"material-icons text-accent text-3xl\">error_outline</span>\n          </div>\n        </div>\n        <h3 className=\"text-center font-heading font-semibold text-xl mb-2\">Service temporairement indisponible</h3>\n        <p className=\"text-center text-neutral-600 mb-6\">\n          Nous rencontrons actuellement des difficult√©s techniques. Veuillez r√©essayer dans quelques instants.\n        </p>\n        <button \n          onClick={onClose}\n          className=\"w-full py-3 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors\"\n        >\n          Fermer\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1176},"client/src/components/modals/LimitReachedModal.tsx":{"content":"interface LimitReachedModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function LimitReachedModal({ isOpen, onClose }: LimitReachedModalProps) {\n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center\">\n      <div className=\"bg-white rounded-xl p-6 max-w-md w-full mx-4\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"w-16 h-16 bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n            <span className=\"material-icons text-primary text-3xl\">hourglass_empty</span>\n          </div>\n        </div>\n        <h3 className=\"text-center font-heading font-semibold text-xl mb-2\">Limite quotidienne atteinte</h3>\n        <p className=\"text-center text-neutral-600 mb-6\">\n          Vous avez utilis√© vos 20 questions quotidiennes. Votre compteur sera r√©initialis√© √† minuit (UTC+2).\n        </p>\n        <button \n          onClick={onClose}\n          className=\"w-full py-3 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors\"\n        >\n          J'ai compris\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1200},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/ipv6-supabase.service.ts":{"content":"import postgres from 'postgres';\n\nexport class IPv6SupabaseService {\n  private sql: any = null;\n  private isConnected: boolean = false;\n  \n  private extractPasswordFromDatabaseUrl(): string {\n    const dbUrl = process.env.DATABASE_URL;\n    if (!dbUrl) throw new Error('DATABASE_URL not set');\n    const match = dbUrl.match(/postgresql:\\/\\/[^:]+:([^@]+)@/);\n    if (!match || !match[1]) throw new Error('Could not extract password from DATABASE_URL');\n    return match[1];\n  }\n  \n  async connect(): Promise<void> {\n    if (this.isConnected && this.sql) return;\n    \n    console.log('üîß Attempting IPv6 connection to Supabase...');\n    \n    try {\n      const password = this.extractPasswordFromDatabaseUrl();\n      // Use the IPv6 address we discovered\n      const ipv6Address = '2a05:d012:42e:5708:6587:d1da:68cb:40dc';\n      \n      this.sql = postgres(`postgresql://postgres:${password}@[${ipv6Address}]:5432/postgres`, {\n        ssl: { rejectUnauthorized: false },\n        max: 5,\n        connect_timeout: 30,\n        idle_timeout: 60,\n        prepare: false,\n      });\n      \n      // Test the connection\n      await this.sql`SELECT 1`;\n      console.log('‚úÖ Connected to Supabase via IPv6!');\n      this.isConnected = true;\n    } catch (error: any) {\n      console.error('‚ùå IPv6 connection failed:', error.message);\n      throw error;\n    }\n  }\n  \n  async getScenarios(): Promise<any[]> {\n    await this.connect();\n    \n    try {\n      const scenarios = await this.sql`\n        SELECT \n          id, \n          title, \n          description, \n          patient_prompt as \"patientPrompt\",\n          evaluation_criteria as \"evaluationCriteria\",\n          image_url as \"imageUrl\",\n          created_by as \"createdBy\",\n          created_at as \"createdAt\"\n        FROM ecos_scenarios \n        ORDER BY created_at DESC\n      `;\n      \n      console.log(`‚úÖ Retrieved ${scenarios.length} scenarios from database`);\n      return scenarios;\n    } catch (error: any) {\n      console.error('‚ùå Error fetching scenarios:', error.message);\n      throw error;\n    }\n  }\n  \n  async createScenario(scenarioData: any): Promise<any> {\n    await this.connect();\n    \n    try {\n      const [scenario] = await this.sql`\n        INSERT INTO ecos_scenarios (\n          title, \n          description, \n          patient_prompt, \n          evaluation_criteria, \n          image_url, \n          created_by,\n          created_at\n        ) VALUES (\n          ${scenarioData.title},\n          ${scenarioData.description},\n          ${scenarioData.patientPrompt},\n          ${scenarioData.evaluationCriteria},\n          ${scenarioData.imageUrl || null},\n          ${scenarioData.createdBy},\n          ${new Date()}\n        ) RETURNING *\n      `;\n      \n      return scenario;\n    } catch (error: any) {\n      console.error('‚ùå Error creating scenario:', error.message);\n      throw error;\n    }\n  }\n  \n  async updateScenario(id: string, updates: any): Promise<any> {\n    await this.connect();\n    \n    try {\n      const [scenario] = await this.sql`\n        UPDATE ecos_scenarios SET\n          title = COALESCE(${updates.title}, title),\n          description = COALESCE(${updates.description}, description),\n          patient_prompt = COALESCE(${updates.patientPrompt}, patient_prompt),\n          evaluation_criteria = COALESCE(${updates.evaluationCriteria}, evaluation_criteria),\n          image_url = COALESCE(${updates.imageUrl}, image_url),\n          updated_at = ${new Date()}\n        WHERE id = ${id}\n        RETURNING *\n      `;\n      \n      return scenario;\n    } catch (error: any) {\n      console.error('‚ùå Error updating scenario:', error.message);\n      throw error;\n    }\n  }\n  \n  async deleteScenario(id: string): Promise<void> {\n    await this.connect();\n    \n    try {\n      await this.sql`DELETE FROM ecos_scenarios WHERE id = ${id}`;\n    } catch (error: any) {\n      console.error('‚ùå Error deleting scenario:', error.message);\n      throw error;\n    }\n  }\n  \n  async disconnect(): Promise<void> {\n    if (this.sql) {\n      await this.sql.end();\n      this.sql = null;\n      this.isConnected = false;\n    }\n  }\n}","size_bytes":4112},"create-test-scenarios.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\nasync function createTestScenarios() {\n  console.log('üîß Creating test scenarios in Supabase...');\n  \n  // Convert PostgreSQL URL to Supabase HTTP URL if needed\n  let supabaseUrl = process.env.SUPABASE_URL;\n  const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;\n  \n  if (supabaseUrl && supabaseUrl.startsWith('postgresql://')) {\n    const match = supabaseUrl.match(/db\\.([^.]+)\\.supabase\\.co/);\n    if (match) {\n      const projectId = match[1];\n      supabaseUrl = `https://${projectId}.supabase.co`;\n    }\n  }\n  \n  const supabase = createClient(supabaseUrl, supabaseKey);\n  \n  try {\n    console.log('‚úÖ Connected to Supabase');\n    \n    const testScenarios = [\n      {\n        title: \"Examen d'un patient avec douleur √† l'√©paule\",\n        description: \"Le patient pr√©sente une douleur √† l'√©paule droite depuis 2 semaines apr√®s une chute\",\n        patientPrompt: \"Je suis un homme de 45 ans qui a chut√© de v√©lo il y a 2 semaines. Depuis, j'ai une douleur constante √† l'√©paule droite qui s'aggrave quand je l√®ve le bras.\",\n        evaluationCriteria: {\n          anamnese: [\"M√©canisme de la chute\", \"Localisation pr√©cise de la douleur\", \"Facteurs aggravants/soulageants\"],\n          examenClinique: [\"Inspection\", \"Palpation\", \"Tests de mobilit√©\", \"Tests sp√©cifiques de l'√©paule\"]\n        },\n        imageUrl: null,\n        createdBy: \"system\"\n      },\n      {\n        title: \"Consultation pour lombalgie aigu√´\",\n        description: \"Patient se pr√©sentant avec une lombalgie aigu√´ apparue brutalement\",\n        patientPrompt: \"J'ai 35 ans et j'ai ressenti une douleur intense dans le bas du dos ce matin en soulevant une bo√Æte. La douleur irradie parfois dans ma jambe gauche.\",\n        evaluationCriteria: {\n          anamnese: [\"Circonstances de survenue\", \"Irradiation\", \"Ant√©c√©dents de lombalgie\"],\n          examenClinique: [\"Test de Las√®gue\", \"Examen neurologique\", \"Palpation vert√©brale\"]\n        },\n        imageUrl: null,\n        createdBy: \"system\"\n      },\n      {\n        title: \"Urgence: Douleur thoracique\",\n        description: \"Patient aux urgences avec douleur thoracique √† √©valuer\",\n        patientPrompt: \"J'ai 58 ans et je ressens une douleur oppressante dans la poitrine depuis 30 minutes. Je suis essouffl√© et j'ai des sueurs froides.\",\n        evaluationCriteria: {\n          urgence: [\"Signes vitaux\", \"ECG\", \"Troponines\"],\n          anamnese: [\"Facteurs de risque cardiovasculaire\", \"Caract√©ristiques de la douleur\"],\n          examenClinique: [\"Auscultation cardiaque\", \"Examen pulmonaire\"]\n        },\n        imageUrl: null,\n        createdBy: \"system\"\n      }\n    ];\n    \n    for (const scenario of testScenarios) {\n      try {\n        const { data, error } = await supabase\n          .from('ecos_scenarios')\n          .insert({\n            title: scenario.title,\n            description: scenario.description,\n            patient_prompt: scenario.patientPrompt,\n            evaluation_criteria: scenario.evaluationCriteria,\n            image_url: scenario.imageUrl,\n            created_by: scenario.createdBy\n          })\n          .select()\n          .single();\n        \n        if (error) throw error;\n        console.log(`‚úÖ Created scenario: ${scenario.title}`);\n      } catch (error) {\n        console.error(`‚ùå Failed to create scenario \"${scenario.title}\":`, error.message);\n      }\n    }\n    \n    // List all scenarios\n    const { data: allScenarios, error } = await supabase\n      .from('ecos_scenarios')\n      .select('*')\n      .order('created_at', { ascending: false });\n    \n    if (error) throw error;\n    \n    console.log(`\\nüìã Total scenarios in database: ${allScenarios?.length || 0}`);\n    allScenarios?.forEach(s => {\n      console.log(`  - ${s.title} (ID: ${s.id})`);\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Error:', error.message);\n  }\n}\n\ncreateTestScenarios().catch(console.error);","size_bytes":3978},"server/services/supabase-client.service.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nexport class SupabaseClientService {\n  private supabase: any = null;\n  private isConnected: boolean = false;\n  \n  async connect(): Promise<void> {\n    if (this.isConnected && this.supabase) return;\n    \n    console.log('üîß Attempting Supabase client connection...');\n    \n    try {\n      let supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;\n      \n      if (!supabaseUrl || !supabaseKey) {\n        throw new Error('SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY/SUPABASE_ANON_KEY are required');\n      }\n      \n      // If SUPABASE_URL is a PostgreSQL URL, extract the project ID and construct the HTTP URL\n      if (supabaseUrl.startsWith('postgresql://')) {\n        const match = supabaseUrl.match(/db\\.([^.]+)\\.supabase\\.co/);\n        if (match) {\n          const projectId = match[1];\n          supabaseUrl = `https://${projectId}.supabase.co`;\n          console.log('üîÑ Converted PostgreSQL URL to Supabase HTTP URL:', supabaseUrl);\n        }\n      }\n      \n      console.log('üîå Creating Supabase client...');\n      this.supabase = createClient(supabaseUrl, supabaseKey);\n      \n      // Test the connection\n      const { data, error } = await this.supabase\n        .from('ecos_scenarios')\n        .select('count')\n        .limit(1);\n      \n      if (error && error.message.includes('relation') && error.message.includes('does not exist')) {\n        console.log('‚ö†Ô∏è Table ecos_scenarios does not exist, creating it...');\n        await this.createTables();\n      } else if (error) {\n        throw error;\n      }\n      \n      console.log('‚úÖ Connected to Supabase successfully!');\n      this.isConnected = true;\n    } catch (error: any) {\n      console.error('‚ùå Supabase client connection failed:', error.message);\n      throw error;\n    }\n  }\n  \n  private async createTables(): Promise<void> {\n    // Create ecos_scenarios table if it doesn't exist\n    const { error } = await this.supabase.rpc('exec_sql', {\n      sql: `\n        CREATE TABLE IF NOT EXISTS ecos_scenarios (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          title TEXT NOT NULL,\n          description TEXT,\n          patient_prompt TEXT,\n          evaluation_criteria TEXT,\n          image_url TEXT,\n          created_by TEXT,\n          created_at TIMESTAMPTZ DEFAULT NOW(),\n          updated_at TIMESTAMPTZ DEFAULT NOW()\n        );\n      `\n    }).catch(() => {\n      // If exec_sql doesn't exist, we'll handle it differently\n      console.log('‚ö†Ô∏è Cannot create table automatically');\n    });\n  }\n  \n  async getScenarios(): Promise<any[]> {\n    await this.connect();\n    \n    try {\n      const { data, error } = await this.supabase\n        .from('ecos_scenarios')\n        .select('*')\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        if (error.message.includes('does not exist')) {\n          console.log('‚ö†Ô∏è Scenarios table does not exist');\n          return [];\n        }\n        throw error;\n      }\n      \n      console.log(`‚úÖ Retrieved ${data?.length || 0} scenarios from database`);\n      return data || [];\n    } catch (error: any) {\n      console.error('‚ùå Error fetching scenarios:', error.message);\n      throw error;\n    }\n  }\n  \n  async createScenario(scenarioData: any): Promise<any> {\n    await this.connect();\n    \n    try {\n      const { data, error } = await this.supabase\n        .from('ecos_scenarios')\n        .insert({\n          title: scenarioData.title,\n          description: scenarioData.description,\n          patient_prompt: scenarioData.patientPrompt,\n          evaluation_criteria: scenarioData.evaluationCriteria,\n          image_url: scenarioData.imageUrl || null,\n          created_by: scenarioData.createdBy,\n        })\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      return data;\n    } catch (error: any) {\n      console.error('‚ùå Error creating scenario:', error.message);\n      throw error;\n    }\n  }\n  \n  async updateScenario(id: string, updates: any): Promise<any> {\n    await this.connect();\n    \n    try {\n      const updateData: any = {\n        updated_at: new Date().toISOString()\n      };\n      \n      if (updates.title) updateData.title = updates.title;\n      if (updates.description !== undefined) updateData.description = updates.description;\n      if (updates.patientPrompt) updateData.patient_prompt = updates.patientPrompt;\n      if (updates.evaluationCriteria) updateData.evaluation_criteria = updates.evaluationCriteria;\n      if (updates.imageUrl !== undefined) updateData.image_url = updates.imageUrl;\n      \n      const { data, error } = await this.supabase\n        .from('ecos_scenarios')\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      \n      return data;\n    } catch (error: any) {\n      console.error('‚ùå Error updating scenario:', error.message);\n      throw error;\n    }\n  }\n  \n  async deleteScenario(id: string): Promise<void> {\n    await this.connect();\n    \n    try {\n      const { error } = await this.supabase\n        .from('ecos_scenarios')\n        .delete()\n        .eq('id', id);\n      \n      if (error) throw error;\n    } catch (error: any) {\n      console.error('‚ùå Error deleting scenario:', error.message);\n      throw error;\n    }\n  }\n}","size_bytes":5421},"test-supabase-direct.js":{"content":"import pg from 'pg';\nconst { Client } = pg;\n\nasync function testConnection() {\n  console.log('üîß Testing Supabase connection...');\n  console.log('DATABASE_URL exists:', !!process.env.DATABASE_URL);\n  \n  if (!process.env.DATABASE_URL) {\n    console.error('‚ùå DATABASE_URL is not set');\n    return;\n  }\n  \n  // Extract host from DATABASE_URL\n  const url = process.env.DATABASE_URL;\n  const hostMatch = url.match(/postgresql:\\/\\/[^@]+@([^:\\/]+)/);\n  if (hostMatch) {\n    console.log('üîç Host extracted:', hostMatch[1]);\n  }\n  \n  // Try different connection methods\n  const methods = [\n    {\n      name: 'Direct URL',\n      config: {\n        connectionString: process.env.DATABASE_URL,\n        ssl: { rejectUnauthorized: false },\n        connectionTimeoutMillis: 10000,\n      }\n    },\n    {\n      name: 'Pooler (port 6543)',\n      config: {\n        connectionString: process.env.DATABASE_URL.replace(':5432', ':6543'),\n        ssl: { rejectUnauthorized: false },\n        connectionTimeoutMillis: 10000,\n      }\n    },\n    {\n      name: 'Without SSL',\n      config: {\n        connectionString: process.env.DATABASE_URL,\n        ssl: false,\n        connectionTimeoutMillis: 10000,\n      }\n    }\n  ];\n  \n  for (const method of methods) {\n    console.log(`\\nüîå Trying ${method.name}...`);\n    const client = new Client(method.config);\n    \n    try {\n      await client.connect();\n      const result = await client.query('SELECT NOW()');\n      console.log(`‚úÖ SUCCESS with ${method.name}!`);\n      console.log('Server time:', result.rows[0].now);\n      \n      // Try to query scenarios table\n      try {\n        const scenarios = await client.query('SELECT COUNT(*) FROM ecos_scenarios');\n        console.log('Scenarios count:', scenarios.rows[0].count);\n      } catch (e) {\n        console.log('Scenarios table query failed:', e.message);\n      }\n      \n      await client.end();\n      break;\n    } catch (error) {\n      console.error(`‚ùå ${method.name} failed:`, error.message);\n      if (error.code) {\n        console.error('Error code:', error.code);\n      }\n    }\n  }\n}\n\ntestConnection().catch(console.error);","size_bytes":2114}}}