name: ECOS Deployment Validation

on:
  deployment_status:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL to validate'
        required: true
        default: 'https://your-app.vercel.app'

jobs:
  validate-build:
    name: Validate Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run check
    
    - name: Build application
      run: npm run build
    
    - name: Validate build output
      run: |
        echo "üîç Validating build output..."
        
        # Check if dist directory exists
        if [ ! -d "dist/public" ]; then
          echo "‚ùå Build output directory not found"
          exit 1
        fi
        
        # Check if index.html exists
        if [ ! -f "dist/public/index.html" ]; then
          echo "‚ùå index.html not found in build output"
          exit 1
        fi
        
        # Check if assets directory exists
        if [ ! -d "dist/public/assets" ]; then
          echo "‚ùå Assets directory not found"
          exit 1
        fi
        
        echo "‚úÖ Build output validation passed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/
        retention-days: 7

  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --production=false
    
    - name: Determine deployment URL
      id: deployment-url
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "url=${{ github.event.inputs.deployment_url }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.deployment_status.target_url }}" != "" ]; then
          echo "url=${{ github.event.deployment_status.target_url }}" >> $GITHUB_OUTPUT
        else
          echo "url=https://your-default-app.vercel.app" >> $GITHUB_OUTPUT
        fi
    
    - name: Wait for deployment to be ready
      run: |
        echo "‚è≥ Waiting for deployment to be ready..."
        sleep 30
    
    - name: Validate deployment
      id: validate
      run: |
        echo "üöÄ Starting deployment validation..."
        npm run validate:deployment "${{ steps.deployment-url.outputs.url }}" || echo "validation_failed=true" >> $GITHUB_OUTPUT
    
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation-report
        path: deployment-validation-report.md
        retention-days: 30
    
    - name: Comment on PR with validation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './deployment-validation-report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const success = !steps.validate.outputs.validation_failed;
            
            const comment = `## üîç Deployment Validation Report
          
          **Status:** ${success ? '‚úÖ PASSED' : '‚ùå FAILED'}
          **URL:** ${{ steps.deployment-url.outputs.url }}
          
          <details>
          <summary>View detailed report</summary>
          
          \`\`\`
          ${report}
          \`\`\`
          
          </details>
          
          ${success ? 
            '‚úÖ **Deployment is ready for production**' : 
            '‚ùå **Deployment validation failed - review issues before proceeding**'
          }`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
    
    - name: Fail job if validation failed
      if: steps.validate.outputs.validation_failed == 'true'
      run: |
        echo "‚ùå Deployment validation failed"
        exit 1

  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    
    steps:
    - name: Setup monitoring alerts
      run: |
        echo "üìä Setting up monitoring alerts..."
        # In a real scenario, you would:
        # - Configure monitoring dashboards
        # - Set up alerting rules
        # - Update monitoring configurations
        echo "‚úÖ Monitoring alerts configured"
    
    - name: Health check monitoring
      run: |
        echo "üîç Configuring health check monitoring..."
        # Configure continuous health monitoring
        echo "‚úÖ Health check monitoring active"

  rollback-on-failure:
    name: Auto Rollback on Critical Failure
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: failure() && github.event.deployment_status.state == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Trigger rollback
      run: |
        echo "üö® Critical deployment failure detected"
        echo "üîÑ Triggering automatic rollback..."
        
        # In production, you would integrate with Vercel CLI:
        # npx vercel rollback --token ${{ secrets.VERCEL_TOKEN }}
        
        echo "‚ö†Ô∏è Manual rollback required - check deployment logs"
        
        # Notify team via webhook, Slack, etc.
        echo "üì¢ Team notification sent"
    
    - name: Create incident issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Deployment Failure - ${new Date().toISOString()}`,
            body: `## Deployment Failure Detected
            
            **Deployment URL:** ${{ github.event.deployment_status.target_url }}
            **Commit:** ${context.sha}
            **Branch:** ${context.ref}
            **Triggered by:** ${context.actor}
            **Timestamp:** ${new Date().toISOString()}
            
            ### Actions Taken
            - ‚úÖ Deployment validation failed
            - ‚è≥ Automatic rollback initiated
            - üì¢ Team notifications sent
            
            ### Next Steps
            1. Review deployment logs
            2. Verify rollback completion
            3. Investigate root cause
            4. Fix issues before next deployment
            
            ### Monitoring
            - Check health endpoints: /health, /ready, /live
            - Monitor error rates and performance metrics
            - Verify database connectivity
            `,
            labels: ['incident', 'deployment', 'urgent']
          });

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success'
    needs: validate-deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Record performance baseline
      run: |
        echo "üìà Recording performance baseline..."
        
        # In production, you would:
        # - Run load tests
        # - Record response time baselines
        # - Setup performance monitoring
        # - Configure alerting thresholds
        
        echo "‚úÖ Performance baseline recorded"