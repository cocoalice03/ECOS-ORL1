// Direct generate-criteria API endpoint for Vercel deployment
// Fixes the 400 error in scenario modification functionality

export default async function handler(req, res) {
  const startTime = Date.now();
  
  // Set comprehensive CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
  res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ 
      error: 'Method not allowed', 
      allowedMethods: ['POST', 'OPTIONS'],
      timestamp: new Date().toISOString()
    });
  }

  try {
    console.log(`[${new Date().toISOString()}] Generate-criteria request:`, req.body);
    
    // Extract parameters - handle both parameter naming conventions
    const { email, description, scenarioDescription } = req.body;
    const actualDescription = description || scenarioDescription;
    
    // Validate required parameters
    if (!email) {
      return res.status(400).json({ 
        error: 'Email is required',
        code: 'MISSING_EMAIL',
        timestamp: new Date().toISOString()
      });
    }

    // Simple admin authorization check
    const adminEmails = [
      'colombemadoungou@gmail.com',
      'david@cherubini.fr',
      'cherubindavid@gmail.com',
      'admin@ecos.fr'
    ];

    if (!adminEmails.includes(email.toLowerCase())) {
      return res.status(403).json({ 
        error: 'Acc√®s non autoris√©',
        code: 'UNAUTHORIZED',
        timestamp: new Date().toISOString()
      });
    }

    if (!actualDescription) {
      return res.status(400).json({ 
        error: 'Scenario description is required',
        code: 'MISSING_DESCRIPTION',
        timestamp: new Date().toISOString()
      });
    }

    console.log(`‚úÖ Generating criteria for description: ${actualDescription.substring(0, 100)}...`);

    // Environment validation
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      console.error('‚ùå OPENAI_API_KEY is missing');
      return res.status(500).json({
        error: 'OpenAI configuration missing',
        code: 'OPENAI_CONFIG_ERROR',
        timestamp: new Date().toISOString()
      });
    }

    // Generate evaluation criteria using OpenAI
    try {
      const systemPrompt = `Tu es un expert en √©valuation ECOS. Cr√©e des crit√®res d'√©valuation structur√©s pour ce sc√©nario clinique.

Les crit√®res doivent inclure:
1. Communication (√©coute, empathie, clart√©)
2. Anamn√®se (questions pertinentes, organisation)
3. Examen clinique (techniques, syst√©matique)
4. Raisonnement clinique (diagnostic diff√©rentiel, hypoth√®ses)
5. Prise en charge (plan th√©rapeutique, suivi)

Chaque crit√®re doit avoir:
- Un nom clair
- Une description d√©taill√©e
- Une √©chelle de notation (0-4 points)
- Des indicateurs de performance pour chaque niveau

Retourne le r√©sultat en format JSON structur√© avec une cl√© "evaluation_criteria" contenant un tableau d'objets.`;

      const userPrompt = `Cr√©e des crit√®res d'√©valuation pour ce sc√©nario ECOS:\n\n${actualDescription}`;

      console.log('ü§ñ Calling OpenAI API...');
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: "gpt-4o",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
          ],
          temperature: 0.3,
          max_tokens: 1500
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå OpenAI API error:', response.status, errorData);
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const openaiResponse = await response.json();
      const criteriaText = openaiResponse.choices[0].message.content;

      console.log('üìù Generated criteria text:', criteriaText.substring(0, 200) + '...');

      // Try to parse as JSON, fallback to structured object if it fails
      let criteria;
      try {
        const parsedCriteria = JSON.parse(criteriaText);
        // Ensure we have the right structure
        if (parsedCriteria.evaluation_criteria) {
          criteria = parsedCriteria;
        } else if (Array.isArray(parsedCriteria)) {
          criteria = { evaluation_criteria: parsedCriteria };
        } else {
          criteria = { evaluation_criteria: [parsedCriteria] };
        }
      } catch (parseError) {
        console.warn('‚ö†Ô∏è JSON parsing failed, creating structured fallback');
        // If JSON parsing fails, create a structured object from the text
        criteria = {
          evaluation_criteria: [
            {
              name: "Communication",
              description: "√âvaluation des comp√©tences de communication avec le patient",
              maxScore: 4,
              weight: 20,
              indicators: {
                "0": "Aucune communication effective",
                "1": "Communication minimale",
                "2": "Communication acceptable",
                "3": "Bonne communication",
                "4": "Communication excellente"
              }
            },
            {
              name: "Anamn√®se",
              description: "Capacit√© √† recueillir les informations pertinentes sur l'histoire du patient",
              maxScore: 4,
              weight: 25,
              indicators: {
                "0": "Aucune question pertinente pos√©e",
                "1": "Questions de base pos√©es",
                "2": "Anamn√®se correcte mais incompl√®te",
                "3": "Anamn√®se compl√®te et structur√©e",
                "4": "Anamn√®se exhaustive et cibl√©e"
              }
            },
            {
              name: "Raisonnement clinique",
              description: "Capacit√© d'analyse et de raisonnement diagnostique",
              maxScore: 4,
              weight: 30,
              indicators: {
                "0": "Aucun raisonnement apparent",
                "1": "Raisonnement √©l√©mentaire",
                "2": "Raisonnement acceptable",
                "3": "Bon raisonnement clinique",
                "4": "Raisonnement clinique excellent"
              }
            },
            {
              name: "Prise en charge",
              description: "Propositions de prise en charge appropri√©es",
              maxScore: 4,
              weight: 25,
              indicators: {
                "0": "Aucune prise en charge propos√©e",
                "1": "Prise en charge inad√©quate",
                "2": "Prise en charge partielle",
                "3": "Prise en charge appropri√©e",
                "4": "Prise en charge optimale"
              }
            }
          ],
          generatedText: criteriaText
        };
      }

      const responseTime = Date.now() - startTime;
      console.log(`‚úÖ Criteria generated successfully in ${responseTime}ms`);

      res.status(200).json({ 
        message: "Crit√®res d'√©valuation g√©n√©r√©s avec succ√®s",
        criteria,
        responseTime,
        timestamp: new Date().toISOString(),
        source: 'direct-openai-api'
      });

    } catch (openaiError) {
      console.error('‚ùå OpenAI error:', openaiError);
      res.status(500).json({ 
        error: "Erreur lors de la g√©n√©ration des crit√®res d'√©valuation",
        message: openaiError.message,
        code: 'OPENAI_ERROR',
        timestamp: new Date().toISOString(),
        responseTime: Date.now() - startTime
      });
    }

  } catch (error) {
    console.error('‚ùå Unexpected error in generate-criteria handler:', error);
    res.status(500).json({
      error: 'Failed to generate evaluation criteria',
      message: error.message,
      code: 'HANDLER_ERROR',
      timestamp: new Date().toISOString(),
      responseTime: Date.now() - startTime
    });
  }
}