{
  "version": 3,
  "sources": ["../../server/services/unified-database.service.ts", "../../server/services/firebase-admin.service.ts", "../../server/services/openai.service.ts", "../../server/services/pinecone.service.ts", "../../server/services/promptGen.service.ts", "../../server/services/conversation-memory.service.ts", "../../server/services/virtual-patient.service.ts", "../../server/serverless-app.ts", "../../server/routes.ts", "../../node_modules/zod/lib/index.mjs", "../../server/services/scenario-sync.service.ts", "../../server/middleware/auth.middleware.ts", "../../server/middleware/firebase-auth.middleware.ts", "../../server/middleware/validation.middleware.ts", "../../server/middleware/rate-limit.middleware.ts", "../../server/middleware/circuit-breaker.middleware.ts", "../../server/services/logger.service.ts", "../../server/middleware/error-handler.middleware.ts", "../../server/diagnostic-endpoint.ts", "../../server/debug.middleware.ts", "../../server/monitoring/performance-monitor.ts", "../../server/middleware/monitoring.middleware.ts"],
  "sourcesContent": ["import { createClient } from '@supabase/supabase-js';\n\ninterface DatabaseMetrics {\n  connectionAttempts: number;\n  successfulConnections: number;\n  failedConnections: number;\n  lastConnectionTime: Date;\n  isHealthy: boolean;\n  responseTime: number;\n}\n\n/**\n * Unified Database Service\n * \n * Single point of access for all database operations.\n * Uses Supabase REST API exclusively for stability.\n * Eliminates connection pooling conflicts and race conditions.\n */\nexport class UnifiedDatabaseService {\n  private supabase: any = null;\n  private isInitialized = false;\n  private initializationPromise: Promise<void> | null = null;\n  private metrics: DatabaseMetrics;\n  private startupTime: Date;\n  private fallbackSessions = new Map<string, any>();\n  private fallbackSessionMessages = new Map<string, any[]>();\n  private fallbackEvaluations = new Map<string, any>();\n  private ensuredUsers = new Set<string>();\n  \n  constructor() {\n    this.startupTime = new Date();\n    this.metrics = {\n      connectionAttempts: 0,\n      successfulConnections: 0,\n      failedConnections: 0,\n      lastConnectionTime: new Date(),\n      isHealthy: false,\n      responseTime: 0\n    };\n  }\n\n  /**\n   * Initialize the database service (called once)\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n    \n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n    \n    this.initializationPromise = this._performInitialization();\n    return this.initializationPromise;\n  }\n\n  private async _performInitialization(): Promise<void> {\n    this.metrics.connectionAttempts++;\n    const startTime = Date.now();\n    \n    try {\n      console.log('\uD83D\uDD27 Initializing Unified Database Service...');\n\n      let supabaseUrl = process.env.SUPABASE_URL;\n      const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY;\n\n      if (!supabaseUrl || !supabaseKey) {\n        throw new Error('SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are required');\n      }\n\n      // Convert PostgreSQL URL to HTTP URL if needed\n      if (supabaseUrl.startsWith('postgresql://')) {\n        const match = supabaseUrl.match(/db\\.([^.]+)\\.supabase\\.co/);\n        if (match) {\n          const projectId = match[1];\n          supabaseUrl = `https://${projectId}.supabase.co`;\n          console.log('\uD83D\uDD04 Converted to Supabase HTTP URL');\n        }\n      }\n\n      this.supabase = createClient(supabaseUrl, supabaseKey);\n      \n      // Test connection with health check\n      await this._performHealthCheck();\n      \n      this.isInitialized = true;\n      this.metrics.successfulConnections++;\n      this.metrics.responseTime = Date.now() - startTime;\n      this.metrics.isHealthy = true;\n      this.metrics.lastConnectionTime = new Date();\n      \n      console.log('\u2705 Unified Database Service initialized successfully');\n    } catch (error: any) {\n      this.metrics.failedConnections++;\n      this.metrics.isHealthy = false;\n      console.error('\u274C Database service initialization failed:', error.message);\n      throw error;\n    } finally {\n      this.initializationPromise = null;\n    }\n  }\n\n  private async _performHealthCheck(): Promise<void> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple health check query\n      const { error } = await this.supabase\n        .from('scenarios')\n        .select('id')\n        .limit(1);\n        \n      if (error && !error.message.includes('does not exist')) {\n        throw error;\n      }\n      \n      this.metrics.responseTime = Date.now() - startTime;\n      console.log(`\u2705 Health check passed (${this.metrics.responseTime}ms)`);\n    } catch (error: any) {\n      console.warn('\u26A0\uFE0F Health check warning:', error.message);\n      // Don't throw for table existence issues\n      if (!error.message.includes('does not exist')) {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Get database client (ensures initialization)\n   */\n  private async getClient(): Promise<any> {\n    await this.initialize();\n    \n    if (!this.supabase) {\n      throw new Error('Database service not initialized');\n    }\n    \n    return this.supabase;\n  }\n\n  /**\n   * Ensure a user record exists before inserting related rows that depend on email FK\n   */\n  private async ensureUserExists(email: string | null | undefined): Promise<void> {\n    if (!email) return;\n\n    const normalizedEmail = email.trim().toLowerCase();\n    if (!normalizedEmail || this.ensuredUsers.has(normalizedEmail)) {\n      return;\n    }\n\n    try {\n      const client = await this.getClient();\n      const timestamp = new Date().toISOString();\n\n      const { error } = await client\n        .from('users')\n        .upsert([\n          {\n            email: normalizedEmail,\n            updated_at: timestamp\n          }\n        ], { onConflict: 'email' });\n\n      if (error) {\n        // Duplicate inserts are safe to ignore; anything else should be logged for visibility\n        console.warn(`\u26A0\uFE0F Failed to ensure user ${normalizedEmail}:`, error.message);\n        return;\n      }\n\n      this.ensuredUsers.add(normalizedEmail);\n      console.log(`\uD83D\uDC64 Ensured user record exists for ${normalizedEmail}`);\n    } catch (error: any) {\n      console.warn(`\u26A0\uFE0F Error ensuring user ${normalizedEmail}:`, error.message);\n    }\n  }\n\n  /**\n   * Get all scenarios\n   */\n  async getScenarios(): Promise<any[]> {\n    try {\n      const client = await this.getClient();\n      \n      const { data, error } = await client\n        .from('scenarios')\n        .select(`\n          id,\n          title,\n          description,\n          patient_prompt,\n          evaluation_criteria,\n          image_url,\n          created_by,\n          created_at,\n          updated_at\n        `)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        if (error.message.includes('does not exist')) {\n          console.log('\u26A0\uFE0F Scenarios table does not exist, returning empty array');\n          return [];\n        }\n        throw error;\n      }\n\n      console.log(`\u2705 Retrieved ${data?.length || 0} scenarios`);\n      \n      // Map database column names to expected property names\n      const mappedData = (data || []).map(scenario => ({\n        ...scenario,\n        patient_prompt: scenario.patient_prompt || null,\n        evaluation_criteria: scenario.evaluation_criteria || null\n      }));\n      \n      return mappedData;\n    } catch (error: any) {\n      console.error('\u274C Error fetching scenarios:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get dashboard statistics\n   */\n  async getDashboardStats(): Promise<any> {\n    try {\n      const client = await this.getClient();\n      \n      // Get scenarios count using the same method as getScenarios()\n      const scenarios = await this.getScenarios();\n      const totalScenarios = scenarios.length;\n\n      console.log(`\uD83D\uDCCA Dashboard stats: ${totalScenarios} scenarios found`);\n\n      // For now, return basic stats - expand as needed\n      return {\n        totalScenarios,\n        activeSessions: 0,\n        completedSessions: 0,\n        totalStudents: 0\n      };\n    } catch (error: any) {\n      console.error('\u274C Error fetching dashboard stats:', error.message);\n      return {\n        totalScenarios: 0,\n        activeSessions: 0,\n        completedSessions: 0,\n        totalStudents: 0\n      };\n    }\n  }\n\n  /**\n   * Get students (placeholder for future implementation)\n   */\n  async getStudents(): Promise<any[]> {\n    try {\n      const client = await this.getClient();\n      \n      // For now, return empty array - implement based on your needs\n      return [];\n    } catch (error: any) {\n      console.error('\u274C Error fetching students:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Health check method\n   */\n  async healthCheck(): Promise<{ status: string; metrics: DatabaseMetrics; uptime: number }> {\n    try {\n      await this._performHealthCheck();\n      \n      return {\n        status: 'healthy',\n        metrics: { ...this.metrics },\n        uptime: Date.now() - this.startupTime.getTime()\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        metrics: { ...this.metrics, isHealthy: false },\n        uptime: Date.now() - this.startupTime.getTime()\n      };\n    }\n  }\n\n  /**\n   * Create a new scenario\n   */\n  async createScenario(scenarioData: any): Promise<any> {\n    const client = await this.getClient();\n\n    // Guarantee creator exists to satisfy foreign key constraints on scenarios.created_by\n    await this.ensureUserExists(scenarioData.createdBy);\n    \n    const { data, error } = await client\n      .from('scenarios')\n      .insert({\n        title: scenarioData.title,\n        description: scenarioData.description,\n        patient_prompt: scenarioData.patientPrompt,\n        evaluation_criteria: scenarioData.evaluationCriteria,\n        image_url: scenarioData.imageUrl || null,\n        created_by: scenarioData.createdBy,\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  }\n\n  /**\n   * Update scenario\n   */\n  async updateScenario(id: string, updates: any): Promise<any> {\n    const client = await this.getClient();\n    \n    // First, check if scenario exists\n    const { data: existingScenario, error: findError } = await client\n      .from('scenarios')\n      .select('id, title')\n      .eq('id', id)\n      .single();\n\n    if (findError) {\n      if (findError.code === 'PGRST116') {\n        // No rows found\n        console.error(`\u274C Scenario ${id} not found in database`);\n        throw new Error(`Scenario with ID ${id} does not exist`);\n      }\n      console.error(`\u274C Error checking scenario ${id}:`, findError);\n      throw findError;\n    }\n\n    console.log(`\u2705 Scenario ${id} exists: \"${existingScenario.title}\"`);\n    \n    const updateData: any = {\n      updated_at: new Date().toISOString()\n    };\n\n    if (updates.title) updateData.title = updates.title;\n    if (updates.description !== undefined) updateData.description = updates.description;\n    if (updates.patientPrompt !== undefined) updateData.patient_prompt = updates.patientPrompt;\n    if (updates.evaluationCriteria !== undefined) updateData.evaluation_criteria = updates.evaluationCriteria;\n    if (updates.imageUrl !== undefined) updateData.image_url = updates.imageUrl;\n    if (updates.pineconeIndex !== undefined) updateData.pinecone_index = updates.pineconeIndex;\n\n    console.log(`\uD83D\uDCCA Updating scenario ${id} with data:`, updateData);\n\n    const { data, error } = await client\n      .from('scenarios')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`\u274C Error updating scenario ${id}:`, error);\n      throw error;\n    }\n\n    console.log(`\u2705 Scenario ${id} updated successfully:`, data);\n    return data;\n  }\n\n  /**\n   * Update scenario criteria specifically (convenience method)\n   */\n  async updateScenarioCriteria(id: string, criteria: any): Promise<any> {\n    console.log(`\uD83D\uDCCA Updating criteria for scenario ${id}`);\n    return this.updateScenario(id, { evaluationCriteria: criteria });\n  }\n\n  /**\n   * Get available scenario IDs and titles for validation\n   */\n  async getAvailableScenarioIds(): Promise<Array<{id: number, title: string}>> {\n    try {\n      const client = await this.getClient();\n      \n      const { data, error } = await client\n        .from('scenarios')\n        .select('id, title')\n        .order('id', { ascending: true });\n\n      if (error) {\n        if (error.message.includes('does not exist')) {\n          console.log('\u26A0\uFE0F Scenarios table does not exist, returning empty array');\n          return [];\n        }\n        throw error;\n      }\n\n      console.log(`\uD83D\uDCCB Available scenarios: ${(data || []).map(s => `ID ${s.id}: \"${s.title}\"`).join(', ')}`);\n      return data || [];\n    } catch (error: any) {\n      console.error('\u274C Error fetching available scenario IDs:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Delete scenario\n   */\n  async deleteScenario(id: string): Promise<void> {\n    const client = await this.getClient();\n    \n    const { error } = await client\n      .from('scenarios')\n      .delete()\n      .eq('id', id);\n\n    if (error) throw error;\n  }\n\n  /**\n   * Store conversation exchange in database\n   */\n  async storeConversationExchange(exchange: {\n    email: string;\n    question: string;\n    response: string;\n    sessionId?: string;\n    scenarioId?: number;\n    studentRole?: string;\n    contextData?: any;\n  }): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      let sessionDbId: number | null = null;\n      if (exchange.sessionId) {\n        const session = await this.getSessionByStringId(exchange.sessionId);\n        sessionDbId = session?.id ?? null;\n      }\n\n      const { data, error } = await client\n        .from('exchanges')\n        .insert({\n          session_id: sessionDbId,\n          question: exchange.question,\n          response: exchange.response,\n          role: 'system',\n          timestamp: new Date().toISOString(),\n          metadata: {\n            email: exchange.email,\n            scenarioId: exchange.scenarioId,\n            studentRole: exchange.studentRole,\n            contextData: exchange.contextData,\n            source: 'patient_simulator'\n          }\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('\u274C Error storing conversation exchange:', error);\n        throw error;\n      }\n\n      console.log(`\uD83D\uDCBE Stored conversation exchange for session ${exchange.sessionId}`);\n      if (exchange.sessionId) {\n        const timestamp = new Date().toISOString();\n        this.addFallbackSessionMessage(exchange.sessionId, {\n          role: 'user',\n          question: exchange.question,\n          response: '',\n          timestamp,\n          isFallback: !sessionDbId\n        });\n        this.addFallbackSessionMessage(exchange.sessionId, {\n          role: 'assistant',\n          question: '',\n          response: exchange.response,\n          timestamp,\n          isFallback: !sessionDbId\n        });\n      }\n      return data;\n    } catch (error: any) {\n      console.error('\u274C Failed to store conversation exchange:', error);\n      if (exchange.sessionId) {\n        const timestamp = new Date().toISOString();\n        this.addFallbackSessionMessage(exchange.sessionId, {\n          role: 'user',\n          question: exchange.question,\n          response: '',\n          timestamp,\n          isFallback: true\n        });\n        this.addFallbackSessionMessage(exchange.sessionId, {\n          role: 'assistant',\n          question: '',\n          response: exchange.response,\n          timestamp,\n          isFallback: true\n        });\n      }\n      // Don't throw - conversation storage failure shouldn't break the flow\n      return null;\n    }\n  }\n\n  /**\n   * Get conversation history for a session\n   */\n  async getConversationHistory(sessionId: string, limit: number = 50): Promise<any[]> {\n    try {\n      const client = await this.getClient();\n\n      const session = await this.getSessionByStringId(sessionId);\n      if (!session) {\n        console.warn(`\u26A0\uFE0F Session ${sessionId} not found, returning empty conversation history`);\n        return [];\n      }\n\n      const { data, error } = await client\n        .from('exchanges')\n        .select('*')\n        .eq('session_id', session.id)\n        .order('timestamp', { ascending: true })\n        .limit(limit);\n\n      if (error) {\n        console.error('\u274C Error fetching conversation history:', error);\n        return [];\n      }\n\n      console.log(`\uD83D\uDCDA Retrieved ${data?.length || 0} conversation exchanges for session ${sessionId}`);\n      return data || [];\n    } catch (error: any) {\n      console.error('\u274C Error fetching conversation history:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Get recent conversations for a student\n   */\n  async getStudentConversations(email: string, limit: number = 100): Promise<any[]> {\n    try {\n      const client = await this.getClient();\n      \n      const { data, error } = await client\n        .from('exchanges')\n        .select('*')\n        .contains('metadata', { email })\n        .order('timestamp', { ascending: false })\n        .limit(limit);\n\n      if (error) throw error;\n\n      console.log(`\uD83D\uDCDA Retrieved ${data?.length || 0} conversations for student ${email}`);\n      return data || [];\n    } catch (error: any) {\n      console.error('\u274C Error fetching student conversations:', error.message);\n      return [];\n    }\n  }\n\n  // ====================================\n  // TRAINING SESSIONS MANAGEMENT\n  // ====================================\n\n  /**\n   * Create a new training session\n   */\n  async createTrainingSession(sessionData: {\n    title: string;\n    description?: string;\n    createdBy: string;\n    scenarioIds: number[];\n    studentEmails: string[];\n    startDate?: string;\n    endDate?: string;\n  }): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      // Create the main training session\n      const { data: trainingSession, error: sessionError } = await client\n        .from('training_sessions')\n        .insert({\n          title: sessionData.title,\n          description: sessionData.description,\n          created_by: sessionData.createdBy,\n          scenario_ids: sessionData.scenarioIds,\n          status: 'active',\n          start_date: sessionData.startDate || new Date().toISOString(),\n          end_date: sessionData.endDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (sessionError) throw sessionError;\n\n      // Add students to the training session\n      if (sessionData.studentEmails && sessionData.studentEmails.length > 0) {\n        const studentAssignments = sessionData.studentEmails.map(email => ({\n          training_session_id: trainingSession.id,\n          student_email: email.trim().toLowerCase(),\n          assigned_at: new Date().toISOString(),\n          status: 'assigned'\n        }));\n\n        const { error: studentsError } = await client\n          .from('training_session_students')\n          .insert(studentAssignments);\n\n        if (studentsError) throw studentsError;\n      }\n\n      console.log(`\u2705 Created training session: ${trainingSession.title} with ID: ${trainingSession.id}`);\n      \n      return {\n        ...trainingSession,\n        studentEmails: sessionData.studentEmails,\n        scenarioIds: sessionData.scenarioIds\n      };\n    } catch (error: any) {\n      console.error('\u274C Error creating training session:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all training sessions for an admin\n   */\n  async getTrainingSessions(createdBy: string): Promise<any[]> {\n    try {\n      const client = await this.getClient();\n\n      const { data: sessions, error } = await client\n        .from('training_sessions')\n        .select('*')\n        .eq('created_by', createdBy)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Get associated students for each session\n      const sessionsWithDetails = await Promise.all(\n        (sessions || []).map(async (session) => {\n          // Get students\n          const { data: students, error: studentsError } = await client\n            .from('training_session_students')\n            .select('student_email, assigned_at, status')\n            .eq('training_session_id', session.id);\n\n          if (studentsError) {\n            console.warn(`Warning: Could not fetch students for session ${session.id}:`, studentsError.message);\n          }\n\n          // Get scenario details\n          let scenarioDetails = [];\n          if (session.scenario_ids && session.scenario_ids.length > 0) {\n            const { data: scenarios, error: scenariosError } = await client\n              .from('scenarios')\n              .select('id, title, description')\n              .in('id', session.scenario_ids);\n\n            if (scenariosError) {\n              console.warn(`Warning: Could not fetch scenarios for session ${session.id}:`, scenariosError.message);\n            } else {\n              scenarioDetails = scenarios || [];\n            }\n          }\n\n          return {\n            ...session,\n            students: students || [],\n            scenarios: scenarioDetails,\n            studentCount: (students || []).length,\n            scenarioCount: scenarioDetails.length\n          };\n        })\n      );\n\n      console.log(`\uD83D\uDCDA Retrieved ${sessionsWithDetails.length} training sessions for ${createdBy}`);\n      return sessionsWithDetails;\n    } catch (error: any) {\n      console.error('\u274C Error fetching training sessions:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Get a specific training session by ID\n   */\n  async getTrainingSessionById(id: string, createdBy: string): Promise<any | null> {\n    try {\n      const client = await this.getClient();\n\n      const { data: session, error } = await client\n        .from('training_sessions')\n        .select('*')\n        .eq('id', parseInt(id))\n        .eq('created_by', createdBy)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // Not found\n        }\n        throw error;\n      }\n\n      // Get associated students\n      const { data: students, error: studentsError } = await client\n        .from('training_session_students')\n        .select('student_email, assigned_at, status')\n        .eq('training_session_id', session.id);\n\n      if (studentsError) {\n        console.warn(`Warning: Could not fetch students for session ${id}:`, studentsError.message);\n      }\n\n      // Get scenario details\n      let scenarioDetails = [];\n      if (session.scenario_ids && session.scenario_ids.length > 0) {\n        const { data: scenarios, error: scenariosError } = await client\n          .from('scenarios')\n          .select('id, title, description')\n          .in('id', session.scenario_ids);\n\n        if (scenariosError) {\n          console.warn(`Warning: Could not fetch scenarios for session ${id}:`, scenariosError.message);\n        } else {\n          scenarioDetails = scenarios || [];\n        }\n      }\n\n      console.log(`\uD83D\uDCDA Retrieved training session ${id} for ${createdBy}`);\n      return {\n        ...session,\n        students: students || [],\n        scenarios: scenarioDetails,\n        studentCount: (students || []).length,\n        scenarioCount: scenarioDetails.length\n      };\n    } catch (error: any) {\n      console.error('\u274C Error fetching training session:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Update a training session\n   */\n  async updateTrainingSession(id: string, updates: any, createdBy: string): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      console.log(`\uD83D\uDD0D Updating training session - ID: ${id}, createdBy: ${createdBy}, updates:`, JSON.stringify(updates));\n\n      const { data: session, error } = await client\n        .from('training_sessions')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', parseInt(id))\n        .eq('created_by', createdBy)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('\u274C Supabase error updating training session:', error);\n        throw error;\n      }\n\n      if (!session) {\n        console.error('\u274C No training session found with id:', id, 'and created_by:', createdBy);\n        throw new Error(`Training session ${id} not found or you don't have permission to modify it`);\n      }\n\n      console.log(`\u2705 Updated training session ${id}`);\n      return session;\n    } catch (error: any) {\n      console.error('\u274C Error updating training session:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a training session\n   */\n  async deleteTrainingSession(id: string, createdBy: string): Promise<void> {\n    try {\n      const client = await this.getClient();\n\n      // First delete associated students\n      await client\n        .from('training_session_students')\n        .delete()\n        .eq('training_session_id', parseInt(id));\n\n      // Then delete the training session\n      const { error } = await client\n        .from('training_sessions')\n        .delete()\n        .eq('id', parseInt(id))\n        .eq('created_by', createdBy);\n\n      if (error) throw error;\n\n      console.log(`\u2705 Deleted training session ${id}`);\n    } catch (error: any) {\n      console.error('\u274C Error deleting training session:', error.message);\n      throw error;\n    }\n  }\n\n  // ====================================\n  // ECOS SESSION MANAGEMENT\n  // ====================================\n\n  /**\n   * Create a new ECOS session in database\n   */\n  async createSession(sessionData: {\n    sessionId: string;\n    studentEmail: string;\n    scenarioId: number;\n    status?: string;\n  }): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      // Ensure student exists to satisfy sessions.student_email foreign key\n      await this.ensureUserExists(sessionData.studentEmail);\n\n      const { data, error } = await client\n        .from('sessions')\n        .insert({\n          session_id: sessionData.sessionId,\n          student_email: sessionData.studentEmail,\n          scenario_id: sessionData.scenarioId,\n          status: sessionData.status || 'active',\n          start_time: new Date().toISOString(),\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('\u274C Error creating ECOS session:', error);\n        throw error;\n      }\n\n      console.log(`\u2705 Created ECOS session ${sessionData.sessionId} for student ${sessionData.studentEmail}`);\n      const record = {\n        ...data,\n        isFallback: false\n      };\n      this.fallbackSessions.set(sessionData.sessionId, record);\n      return record;\n    } catch (error: any) {\n      console.error('\u274C Failed to create ECOS session:', error.message);\n      const fallbackRecord = {\n        id: `fallback-session-${Date.now()}`,\n        session_id: sessionData.sessionId,\n        student_email: sessionData.studentEmail,\n        scenario_id: sessionData.scenarioId,\n        status: sessionData.status || 'active',\n        start_time: new Date().toISOString(),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        isFallback: true\n      };\n      this.fallbackSessions.set(sessionData.sessionId, fallbackRecord);\n      console.warn(`\u26A0\uFE0F Stored session ${sessionData.sessionId} in fallback memory store`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get ECOS session by string session ID\n   */\n  async getSessionByStringId(sessionId: string): Promise<any> {\n    const fallbackSession = this.fallbackSessions.get(sessionId) || null;\n\n    try {\n      const client = await this.getClient();\n\n      const { data, error } = await client\n        .from('sessions')\n        .select('*')\n        .eq('session_id', sessionId)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No rows found\n          return fallbackSession;\n        }\n        throw error;\n      }\n\n      const record = {\n        ...data,\n        isFallback: false\n      };\n      this.fallbackSessions.set(sessionId, record);\n      return record;\n    } catch (error: any) {\n      console.error('\u274C Error getting session by string ID:', error.message);\n      if (fallbackSession) {\n        console.warn(`\u26A0\uFE0F Using fallback session for ${sessionId}`);\n      }\n      return fallbackSession;\n    }\n  }\n\n  /**\n   * Store message in ECOS session\n   */\n  async storeSessionMessage(messageData: {\n    sessionId: string;\n    role: 'user' | 'assistant';\n    question?: string;\n    response?: string;\n    content?: string;\n  }): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      // First get the session to get the database ID\n      const session = await this.getSessionByStringId(messageData.sessionId);\n      if (!session) {\n        console.warn(`\u26A0\uFE0F Session ${messageData.sessionId} not found, cannot store message`);\n        this.addFallbackSessionMessage(messageData.sessionId, {\n          role: messageData.role,\n          question: messageData.question || messageData.content || '',\n          response: messageData.response || '',\n          timestamp: new Date().toISOString(),\n          isFallback: true\n        });\n        return null;\n      }\n\n      const timestamp = new Date().toISOString();\n      const { data, error } = await client\n        .from('exchanges')\n        .insert({\n          session_id: session.id, // Use database integer ID\n          role: messageData.role,\n          question: messageData.question || messageData.content || '',\n          response: messageData.response || '',\n          timestamp\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('\u274C Error storing session message:', error);\n        throw error;\n      }\n\n      console.log(`\uD83D\uDCBE Stored ${messageData.role} message for session ${messageData.sessionId}`);\n      this.addFallbackSessionMessage(messageData.sessionId, {\n        role: messageData.role,\n        question: messageData.question || messageData.content || '',\n        response: messageData.response || '',\n        timestamp,\n        isFallback: false\n      });\n      return data;\n    } catch (error: any) {\n      console.error('\u274C Failed to store session message:', error.message);\n      this.addFallbackSessionMessage(messageData.sessionId, {\n        role: messageData.role,\n        question: messageData.question || messageData.content || '',\n        response: messageData.response || '',\n        timestamp: new Date().toISOString(),\n        isFallback: true\n      });\n      // Don't throw - message storage failure shouldn't break the flow\n      return null;\n    }\n  }\n\n  /**\n   * Get messages for an ECOS session\n   */\n  async getSessionMessages(sessionId: string, limit: number = 50): Promise<any[]> {\n    const fallbackMessages = this.fallbackSessionMessages.get(sessionId) || [];\n\n    try {\n      const client = await this.getClient();\n\n      // First get the session to get the database ID\n      const session = await this.getSessionByStringId(sessionId);\n      if (!session) {\n        console.warn(`\u26A0\uFE0F Session ${sessionId} not found, returning empty messages`);\n        return fallbackMessages;\n      }\n\n      const { data, error } = await client\n        .from('exchanges')\n        .select('*')\n        .eq('session_id', session.id) // Use database integer ID\n        .order('timestamp', { ascending: true })\n        .limit(limit);\n\n      if (error) {\n        console.error('\u274C Error fetching session messages:', error);\n        return fallbackMessages;\n      }\n\n      console.log(`\uD83D\uDCDA Retrieved ${data?.length || 0} messages for session ${sessionId}`);\n      const messages = data || [];\n      if (messages.length) {\n        this.fallbackSessionMessages.set(sessionId, messages);\n      }\n      return messages;\n    } catch (error: any) {\n      console.error('\u274C Error fetching session messages:', error.message);\n      return fallbackMessages;\n    }\n  }\n\n  /**\n   * Update ECOS session status\n   */\n  async updateSessionStatus(sessionId: string, status: string): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      const { data, error } = await client\n        .from('sessions')\n        .update({\n          status: status,\n          end_time: status === 'completed' ? new Date().toISOString() : null,\n          updated_at: new Date().toISOString()\n        })\n        .eq('session_id', sessionId)\n        .select()\n        .single();\n\n      if (error) {\n        console.error('\u274C Error updating session status:', error);\n        throw error;\n      }\n\n      console.log(`\u2705 Updated session ${sessionId} status to ${status}`);\n      const record = {\n        ...data,\n        isFallback: false\n      };\n      this.fallbackSessions.set(sessionId, record);\n      return record;\n    } catch (error: any) {\n      console.error('\u274C Failed to update session status:', error.message);\n      const fallbackSession = this.fallbackSessions.get(sessionId);\n      if (fallbackSession) {\n        const updatedFallback = {\n          ...fallbackSession,\n          status,\n          updated_at: new Date().toISOString(),\n          end_time: status === 'completed' ? new Date().toISOString() : fallbackSession?.end_time\n        };\n        this.fallbackSessions.set(sessionId, updatedFallback);\n        console.warn(`\u26A0\uFE0F Updated session ${sessionId} status in fallback memory store`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Create ECOS evaluation\n   */\n  async createEvaluation(evalData: {\n    sessionId: string;\n    scenarioId: number;\n    studentEmail: string;\n    scores: any;\n    globalScore: number;\n    strengths: string[];\n    weaknesses: string[];\n    recommendations: string[];\n    feedback?: string;\n    heuristic?: any;\n    llmScorePercent?: number | null;\n    criteriaDetails?: any;\n  }): Promise<any> {\n    try {\n      const client = await this.getClient();\n\n      // Ensure student exists to satisfy evaluations.student_email foreign key\n      await this.ensureUserExists(evalData.studentEmail);\n\n      // Get session database ID\n      const session = await this.getSessionByStringId(evalData.sessionId);\n      if (!session || session.isFallback) {\n        throw new Error(`Session ${evalData.sessionId} not available in primary database`);\n      }\n\n      console.log(`\uD83D\uDCE4 Attempting to store evaluation for session ${evalData.sessionId}`);\n\n      const insertPayload = {\n        session_id: session.id,\n        scenario_id: evalData.scenarioId,\n        student_email: evalData.studentEmail,\n        scores: evalData.scores,\n        global_score: evalData.globalScore,\n        strengths: evalData.strengths,\n        weaknesses: evalData.weaknesses,\n        recommendations: evalData.recommendations,\n        feedback: evalData.feedback,\n        heuristic: evalData.heuristic,\n        llm_score_percent: typeof evalData.llmScorePercent === 'number' ? evalData.llmScorePercent : null,\n        criteria_details: evalData.criteriaDetails,\n        evaluated_at: new Date().toISOString(),\n        created_at: new Date().toISOString()\n      };\n\n      console.log(`\uD83D\uDD0D [DEBUG] Insert payload columns:`, Object.keys(insertPayload));\n      console.log(`\uD83D\uDD0D [DEBUG] Session DB ID:`, session.id, `String ID:`, evalData.sessionId);\n\n      const { data, error } = await client\n        .from('evaluations')\n        .insert(insertPayload)\n        .select()\n        .single();\n\n      console.log(`\uD83D\uDD0D [DEBUG] Supabase response - data:`, data ? 'EXISTS' : 'NULL', `error:`, error ? error.code : 'NONE');\n\n      if (error) {\n        console.error('\u274C Error creating evaluation:', {\n          message: error.message,\n          code: error.code,\n          details: error.details,\n          hint: error.hint\n        });\n        throw error;\n      }\n\n      if (!data) {\n        const errorMsg = 'Supabase returned null data despite no error - possible schema mismatch';\n        console.error(`\u274C ${errorMsg}`);\n        throw new Error(errorMsg);\n      }\n\n      console.log(`\u2705 Created evaluation for session ${evalData.sessionId} - DB record ID:`, data.id);\n      const record = {\n        ...data,\n        isFallback: false\n      };\n      this.fallbackEvaluations.set(evalData.sessionId, record);\n      return record;\n    } catch (error: any) {\n      console.error('\u274C Failed to create evaluation:', {\n        message: error?.message,\n        code: error?.code,\n        details: error?.details,\n        hint: error?.hint\n      });\n      const fallbackSession = this.fallbackSessions.get(evalData.sessionId);\n      const fallbackRecord = {\n        session_id: fallbackSession?.id ?? null,\n        scenario_id: evalData.scenarioId,\n        student_email: evalData.studentEmail,\n        scores: evalData.scores,\n        global_score: evalData.globalScore,\n        strengths: evalData.strengths,\n        weaknesses: evalData.weaknesses,\n        recommendations: evalData.recommendations,\n        feedback: evalData.feedback,\n        heuristic: evalData.heuristic,\n        llm_score_percent: typeof evalData.llmScorePercent === 'number' ? evalData.llmScorePercent : null,\n        criteria_details: evalData.criteriaDetails,\n        evaluated_at: new Date().toISOString(),\n        created_at: new Date().toISOString(),\n        summary: Array.isArray(evalData.feedback)\n          ? evalData.feedback.join(' ')\n          : (evalData.feedback || ''),\n        isFallback: true\n      };\n      this.fallbackEvaluations.set(evalData.sessionId, fallbackRecord);\n      console.warn(`\u26A0\uFE0F Stored evaluation for session ${evalData.sessionId} in fallback memory store`);\n      throw error;\n    }\n  }\n\n  /**\n   * Get evaluation for a session\n   */\n  async getEvaluation(sessionId: string): Promise<any> {\n    const fallbackEvaluation = this.fallbackEvaluations.get(sessionId) || null;\n    try {\n      const client = await this.getClient();\n\n      // Get session database ID\n      const session = await this.getSessionByStringId(sessionId);\n      if (!session || session.isFallback) {\n        return fallbackEvaluation;\n      }\n\n      const { data, error } = await client\n        .from('evaluations')\n        .select('*')\n        .eq('session_id', session.id)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No evaluation found\n          return fallbackEvaluation;\n        }\n        throw error;\n      }\n\n      const record = {\n        ...data,\n        isFallback: false\n      };\n      this.fallbackEvaluations.set(sessionId, record);\n      return record;\n    } catch (error: any) {\n      console.error('\u274C Error getting evaluation:', error.message);\n      if (fallbackEvaluation) {\n        console.warn(`\u26A0\uFE0F Using fallback evaluation for session ${sessionId}`);\n      }\n      return fallbackEvaluation;\n    }\n  }\n\n  /**\n   * Firebase Authentication Methods\n   */\n\n  /**\n   * Get user by Firebase UID\n   */\n  async getUserByFirebaseUid(firebaseUid: string): Promise<any | null> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('firebase_uid', firebaseUid)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No user found\n          return null;\n        }\n        throw error;\n      }\n\n      return data;\n    } catch (error: any) {\n      console.error('\u274C Error getting user by Firebase UID:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Get user by email\n   */\n  async getUserByEmail(email: string): Promise<any | null> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('email', email.toLowerCase().trim())\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No user found\n          return null;\n        }\n        throw error;\n      }\n\n      return data;\n    } catch (error: any) {\n      console.error('\u274C Error getting user by email:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Create new user\n   */\n  async createUser(userData: {\n    email: string;\n    firebaseUid: string;\n    firstName?: string | null;\n    lastName?: string | null;\n    profileImageUrl?: string | null;\n  }): Promise<any> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      // Only insert minimal fields that exist in actual Supabase schema\n      // Let Supabase auto-generate the integer ID\n      const { data, error } = await this.supabase\n        .from('users')\n        .insert([{\n          email: userData.email.toLowerCase().trim(),\n          firebase_uid: userData.firebaseUid\n        }])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      console.log('\u2705 User created in Supabase:', { id: data.id, email: data.email });\n      return data;\n    } catch (error: any) {\n      console.error('\u274C Error creating user:', error.message);\n      throw new Error('Failed to create user in database');\n    }\n  }\n\n  /**\n   * Update user's Firebase UID\n   */\n  async updateUserFirebaseUid(userId: string, firebaseUid: string): Promise<void> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      const { error } = await this.supabase\n        .from('users')\n        .update({\n          firebase_uid: firebaseUid,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userId);\n\n      if (error) throw error;\n\n      console.log('\u2705 User Firebase UID updated:', { userId, firebaseUid });\n    } catch (error: any) {\n      console.error('\u274C Error updating user Firebase UID:', error.message);\n      throw new Error('Failed to update user Firebase UID');\n    }\n  }\n\n  /**\n   * Get user role\n   */\n  async getUserRole(userId: string): Promise<string> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      const { data, error } = await this.supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          // No role found, default to student\n          return 'student';\n        }\n        throw error;\n      }\n\n      return data.role;\n    } catch (error: any) {\n      console.error('\u274C Error getting user role:', error.message);\n      // Default to student on error\n      return 'student';\n    }\n  }\n\n  /**\n   * Set user role\n   */\n  async setUserRole(userId: string, role: 'admin' | 'student'): Promise<void> {\n    try {\n      if (!this.supabase) await this.initialize();\n\n      // First, try to update existing role\n      const { error: updateError } = await this.supabase\n        .from('user_roles')\n        .update({\n          role,\n          updated_at: new Date().toISOString()\n        })\n        .eq('user_id', userId);\n\n      // If no rows were updated, insert new role\n      if (updateError || updateError?.code === 'PGRST116') {\n        const { error: insertError } = await this.supabase\n          .from('user_roles')\n          .insert([{\n            user_id: userId,\n            role,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }]);\n\n        if (insertError) {\n          // Check if it's a duplicate key error (role already exists)\n          if (!insertError.message.includes('duplicate')) {\n            throw insertError;\n          }\n        }\n      }\n\n      console.log('\u2705 User role set:', { userId, role });\n    } catch (error: any) {\n      console.error('\u274C Error setting user role:', error.message);\n      throw new Error('Failed to set user role');\n    }\n  }\n\n  /**\n   * Get metrics for monitoring\n   */\n  getMetrics(): DatabaseMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Check if service is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.metrics.isHealthy;\n  }\n\n  private addFallbackSessionMessage(sessionId: string, message: any) {\n    if (!sessionId) return;\n    const existing = this.fallbackSessionMessages.get(sessionId) || [];\n    existing.push({ ...message, sessionId });\n    this.fallbackSessionMessages.set(sessionId, existing);\n  }\n}\n\n// Export singleton instance\nexport const unifiedDb = new UnifiedDatabaseService();\n", "/**\n * Firebase Admin Service\n *\n * Handles server-side Firebase operations:\n * - ID token verification\n * - User management\n * - Custom claims (roles)\n *\n * Uses dynamic imports to avoid crashing if firebase-admin is not available\n */\n\ntype App = any;\ntype DecodedIdToken = any;\ntype UserRecord = any;\n\nclass FirebaseAdminService {\n  private initialized: boolean = false;\n  private app: App | null = null;\n  private initializationPromise: Promise<void> | null = null;\n  private firebaseAdmin: any = null;\n  private firebaseAuth: any = null;\n\n  constructor() {\n    // Don't initialize immediately - wait for first use\n  }\n\n  /**\n   * Lazy load Firebase Admin modules\n   */\n  private async loadFirebaseModules() {\n    if (this.firebaseAdmin && this.firebaseAuth) {\n      return;\n    }\n\n    try {\n      this.firebaseAdmin = await import('firebase-admin/app');\n      this.firebaseAuth = await import('firebase-admin/auth');\n      console.log('\u2705 Firebase Admin modules loaded successfully');\n    } catch (error) {\n      console.error('\u274C Failed to load Firebase Admin modules:', error);\n      throw new Error('Firebase Admin SDK not available in this environment');\n    }\n  }\n\n  /**\n   * Initialize Firebase Admin SDK (lazy initialization)\n   */\n  private async initialize(): Promise<void> {\n    // Return existing initialization promise if in progress\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    // Already initialized\n    if (this.initialized) {\n      return;\n    }\n\n    // Start initialization\n    this.initializationPromise = (async () => {\n      try {\n        console.log('\uD83D\uDD25 Initializing Firebase Admin SDK...');\n\n        // Load Firebase modules dynamically\n        await this.loadFirebaseModules();\n\n        const projectId = process.env.FIREBASE_PROJECT_ID;\n        const clientEmail = process.env.FIREBASE_CLIENT_EMAIL;\n        const privateKey = process.env.FIREBASE_PRIVATE_KEY;\n\n        if (!projectId || !clientEmail || !privateKey) {\n          throw new Error('Missing Firebase Admin SDK credentials in environment variables');\n        }\n\n        // Replace escaped newlines in private key\n        const formattedPrivateKey = privateKey.replace(/\\\\n/g, '\\n');\n\n        // Check if already initialized\n        const existingApps = this.firebaseAdmin.getApps();\n        if (existingApps.length === 0) {\n          this.app = this.firebaseAdmin.initializeApp({\n            credential: this.firebaseAdmin.cert({\n              projectId,\n              clientEmail,\n              privateKey: formattedPrivateKey,\n            }),\n          });\n        } else {\n          this.app = existingApps[0];\n        }\n\n        this.initialized = true;\n        console.log('\u2705 Firebase Admin SDK initialized successfully');\n      } catch (error) {\n        console.error('\u274C Failed to initialize Firebase Admin SDK:', error);\n        this.initializationPromise = null; // Allow retry\n        throw error;\n      }\n    })();\n\n    return this.initializationPromise;\n  }\n\n  /**\n   * Verify Firebase ID token\n   * @param idToken - Firebase ID token from client\n   * @returns Decoded token with user info\n   */\n  async verifyIdToken(idToken: string): Promise<DecodedIdToken> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const decodedToken = await auth.verifyIdToken(idToken);\n      console.log('\u2705 Firebase ID token verified:', { uid: decodedToken.uid, email: decodedToken.email });\n      return decodedToken;\n    } catch (error) {\n      console.error('\u274C Firebase ID token verification failed:', error);\n      throw new Error('Invalid or expired Firebase ID token');\n    }\n  }\n\n  /**\n   * Get user by email\n   * @param email - User email\n   * @returns Firebase user record\n   */\n  async getUserByEmail(email: string): Promise<UserRecord | null> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const user = await auth.getUserByEmail(email);\n      return user;\n    } catch (error: any) {\n      if (error.code === 'auth/user-not-found') {\n        return null;\n      }\n      console.error('\u274C Error fetching user by email:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get user by UID\n   * @param uid - Firebase UID\n   * @returns Firebase user record\n   */\n  async getUserByUid(uid: string): Promise<UserRecord | null> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const user = await auth.getUser(uid);\n      return user;\n    } catch (error: any) {\n      if (error.code === 'auth/user-not-found') {\n        return null;\n      }\n      console.error('\u274C Error fetching user by UID:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new Firebase user\n   * @param email - User email\n   * @param password - User password\n   * @returns Created user record\n   */\n  async createUser(email: string, password: string): Promise<UserRecord> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const user = await auth.createUser({\n        email,\n        password,\n        emailVerified: false,\n      });\n      console.log('\u2705 Firebase user created:', { uid: user.uid, email: user.email });\n      return user;\n    } catch (error) {\n      console.error('\u274C Error creating Firebase user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Set custom user claims (roles)\n   * @param uid - Firebase UID\n   * @param claims - Custom claims object (e.g., { role: 'admin' })\n   */\n  async setCustomClaims(uid: string, claims: Record<string, any>): Promise<void> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      await auth.setCustomUserClaims(uid, claims);\n      console.log('\u2705 Custom claims set for user:', { uid, claims });\n    } catch (error) {\n      console.error('\u274C Error setting custom claims:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get custom claims for a user\n   * @param uid - Firebase UID\n   * @returns Custom claims object\n   */\n  async getCustomClaims(uid: string): Promise<Record<string, any>> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const user = await auth.getUser(uid);\n      return user.customClaims || {};\n    } catch (error) {\n      console.error('\u274C Error getting custom claims:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send password reset email\n   * @param email - User email\n   */\n  async sendPasswordResetEmail(email: string): Promise<void> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      const link = await auth.generatePasswordResetLink(email);\n      console.log('\u2705 Password reset link generated for:', email);\n      console.log('\uD83D\uDD17 Reset link:', link);\n      // In production, you would send this via your email service\n    } catch (error) {\n      console.error('\u274C Error generating password reset link:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a Firebase user\n   * @param uid - Firebase UID\n   */\n  async deleteUser(uid: string): Promise<void> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      await auth.deleteUser(uid);\n      console.log('\u2705 Firebase user deleted:', uid);\n    } catch (error) {\n      console.error('\u274C Error deleting Firebase user:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update user email\n   * @param uid - Firebase UID\n   * @param newEmail - New email address\n   */\n  async updateUserEmail(uid: string, newEmail: string): Promise<void> {\n    await this.initialize();\n    try {\n      const auth = this.firebaseAuth.getAuth();\n      await auth.updateUser(uid, { email: newEmail });\n      console.log('\u2705 User email updated:', { uid, newEmail });\n    } catch (error) {\n      console.error('\u274C Error updating user email:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if Firebase Admin is initialized\n   */\n  isInitialized(): boolean {\n    return this.initialized;\n  }\n}\n\n// Export singleton instance\nexport const firebaseAdminService = new FirebaseAdminService();\n", "import OpenAI from \"openai\";\nimport { RAGContent } from '../types.js';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\",\n});\n\nexport class OpenAIService {\n  private systemPrompt = `You are an educational assistant for a LearnWorlds learning management system. Speak only in French.\nAnswer questions about the course content based on the context provided.\nBe helpful, precise, and concise. If you don't know the answer based on the provided context, say so clearly. If you don't know the answer based on the provided context, say so clearly.\nDo not make up information, NEVER. \n\nIMPORTANT: At the end of EVERY response, you MUST include this exact link in markdown format:\n[Cours d'arthrologie du membre sup\u00E9rieur](https://academy.ceerrf.fr/course/arthrologie-du-membre-superieur)\n\nThis link must appear at the end of the answer when usefull specially for the first answer.`;\n\n  /**\n   * Generates a response for the given question based on relevant content\n   */\n  async generateResponse(\n    question: string,\n    relevantContent: RAGContent[] | string,\n  ): Promise<string> {\n    try {\n      // Format the context for better prompt understanding\n      let contextText = \"\";\n      if (relevantContent && typeof relevantContent !== 'string' && relevantContent.length > 0) {\n        contextText = relevantContent\n          .map((item, index) => {\n            const source = item.metadata?.source\n              ? ` (Source: ${item.metadata.source})`\n              : \"\";\n            return `Context ${index + 1}${source}:\\n${item.content}\\n`;\n          })\n          .join(\"\\n\");\n      } else if (typeof relevantContent === 'string') {\n        contextText = relevantContent;\n      }\n\n      const userPrompt = `Question: ${question}\\n\\nRelevant Content:\\n${contextText}`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: this.systemPrompt },\n          { role: \"user\", content: userPrompt },\n        ],\n        temperature: 0.5,\n        max_tokens: 1000,\n      });\n\n      return (\n        response.choices[0].message.content ||\n        \"Je n'ai pas pu g\u00E9n\u00E9rer une r\u00E9ponse. Veuillez r\u00E9essayer.\"\n      );\n    } catch (error) {\n      console.error(\"Error generating OpenAI response:\", error);\n      throw new Error(\n        \"Impossible de g\u00E9n\u00E9rer une r\u00E9ponse. Service indisponible.\",\n      );\n    }\n  }\n\n  /**\n   * Create a completion with custom system prompt (for ECOS evaluation)\n   */\n  async createCompletion(params: {\n    model: string;\n    messages: Array<{ role: string; content: string }>;\n    temperature?: number;\n    max_tokens?: number;\n    max_completion_tokens?: number;\n    reasoning?: { effort: string };\n    text?: { verbosity: string };\n    response_format?: { type: string };\n  }): Promise<any> {\n    try {\n      // Build API params object dynamically based on what's provided\n      const apiParams: any = {\n        model: params.model,\n        messages: params.messages,\n      };\n\n      // Add optional parameters only if provided\n      if (params.temperature !== undefined) apiParams.temperature = params.temperature;\n      if (params.max_tokens !== undefined) apiParams.max_tokens = params.max_tokens;\n      if (params.max_completion_tokens !== undefined) apiParams.max_completion_tokens = params.max_completion_tokens;\n      if (params.reasoning !== undefined) apiParams.reasoning = params.reasoning;\n      if (params.text !== undefined) apiParams.text = params.text;\n      if (params.response_format !== undefined) apiParams.response_format = params.response_format;\n\n      const response = await openai.chat.completions.create(apiParams);\n\n      return response;\n    } catch (error) {\n      console.error(\"Error creating OpenAI completion:\", error);\n      throw new Error(\"Impossible de g\u00E9n\u00E9rer une r\u00E9ponse. Service indisponible.\");\n    }\n  }\n\n  /**\n   * Convert natural language question to SQL query\n   */\n  async convertToSQL(question: string, schema: string): Promise<string> {\n    try {\n      console.log(\"Conversion SQL - Question re\u00E7ue:\", question);\n      console.log(\"Conversion SQL - Sch\u00E9ma fourni:\", schema.substring(0, 200) + \"...\");\n\n      const prompt = `Tu es un expert en bases de donn\u00E9es PostgreSQL. Convertis cette question en langage naturel en requ\u00EAte SQL valide.\n\nBase de donn\u00E9es PostgreSQL avec le sch\u00E9ma suivant :\n${schema}\n\nQuestion en fran\u00E7ais : ${question}\n\nInstructions importantes :\n- G\u00E9n\u00E8re uniquement une requ\u00EAte SELECT (pas d'INSERT, UPDATE, DELETE)\n- Utilise la syntaxe PostgreSQL\n- Utilise UNIQUEMENT les tables et colonnes list\u00E9es dans le sch\u00E9ma ci-dessus\n- ATTENTION: Dans la table 'exchanges' la colonne utilisateur s'appelle 'utilisateur_email' (PAS 'email')\n- ATTENTION: Dans la table 'daily_counters' la colonne utilisateur s'appelle 'utilisateur_email' (PAS 'email')\n- Pour les questions sur les utilisateurs connect\u00E9s/actifs, utilise la table 'exchanges' avec la colonne 'utilisateur_email'\n- Pour les compteurs quotidiens, utilise la table 'daily_counters' avec la colonne 'utilisateur_email'\n- Pour les dates, utilise DATE(timestamp) = CURRENT_DATE pour aujourd'hui\n- Pour compter les utilisateurs uniques: COUNT(DISTINCT utilisateur_email)\n- Inclus les alias de tables si n\u00E9cessaire\n- R\u00E9ponds uniquement avec la requ\u00EAte SQL, sans explication ni markdown\n\nRequ\u00EAte SQL :`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"Tu es un expert en conversion de langage naturel vers SQL. R\u00E9ponds uniquement avec la requ\u00EAte SQL demand\u00E9e, sans formatage markdown.\"\n          },\n          { role: \"user\", content: prompt }\n        ],\n        max_tokens: 300,\n        temperature: 0.1,\n      });\n\n      let sqlQuery = response.choices[0].message.content?.trim() || \"\";\n      console.log(\"R\u00E9ponse OpenAI brute:\", sqlQuery);\n\n      // Clean up the response - remove markdown if present\n      sqlQuery = sqlQuery.replace(/```sql\\s*/gi, '').replace(/```\\s*/gi, '');\n\n      // Extract SQL from response if it's wrapped in explanations\n      const sqlMatch = sqlQuery.match(/(SELECT[\\s\\S]*?)(?:\\n\\s*$|$)/i);\n      if (sqlMatch) {\n        sqlQuery = sqlMatch[1].trim();\n        console.log(\"SQL extrait:\", sqlQuery);\n      }\n\n      // Remove trailing semicolon if present\n      sqlQuery = sqlQuery.replace(/;\\s*$/, '');\n\n      // Basic validation\n      if (!sqlQuery.toLowerCase().includes(\"select\")) {\n        console.log(\"\u00C9chec validation - pas de SELECT trouv\u00E9 dans:\", sqlQuery);\n        throw new Error(\"Aucune requ\u00EAte SELECT valide trouv\u00E9e dans la r\u00E9ponse\");\n      }\n\n      // Additional validation - check if it starts with SELECT\n      if (!sqlQuery.toLowerCase().trim().startsWith(\"select\")) {\n        console.log(\"\u00C9chec validation - ne commence pas par SELECT:\", sqlQuery);\n        throw new Error(\"La requ\u00EAte doit commencer par SELECT\");\n      }\n\n      console.log(\"SQL final valid\u00E9:\", sqlQuery);\n      return sqlQuery;\n    } catch (error) {\n      console.error(\"Error converting to SQL:\", error);\n      if (error instanceof Error) {\n        throw new Error(`Impossible de convertir la question en requ\u00EAte SQL: ${error.message}`);\n      }\n      throw new Error(\"Impossible de convertir la question en requ\u00EAte SQL\");\n    }\n  }\n}\n\nexport const openaiService = new OpenAIService();", "import { Pinecone } from '@pinecone-database/pinecone';\nimport OpenAI from \"openai\";\nimport { RAGContent } from '../types.js';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\"\n});\n\nexport class PineconeService {\n  private pinecone;\n  private index;\n  private indexName: string = '';\n  private namespace: string = '';\n\n  constructor() {\n    try {\n      // Get Pinecone credentials from environment variables\n      const apiKey = process.env.PINECONE_API_KEY;\n      this.indexName = process.env.PINECONE_INDEX_NAME || 'arthrologie-du-membre-superieur';\n      this.namespace = process.env.PINECONE_NAMESPACE || 'default';\n\n      if (!apiKey) {\n        console.warn('Missing Pinecone API key - running in fallback mode');\n        this.pinecone = null;\n        this.index = null;\n        return;\n      }\n\n      // Initialize Pinecone client\n      this.pinecone = new Pinecone({\n        apiKey,\n      });\n\n      // Get the index\n      this.index = this.pinecone.index(this.indexName);\n      console.log(`Connected to Pinecone index: ${this.indexName}`);\n    } catch (error) {\n      console.error('Error initializing Pinecone service:', error);\n      console.warn('Running in fallback mode without Pinecone');\n      this.pinecone = null;\n      this.index = null;\n    }\n  }\n\n  /**\n   * Gets the vector embedding for a text string using OpenAI\n   */\n  public async getEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await openai.embeddings.create({\n        model: \"text-embedding-3-small\",\n        input: text,\n        encoding_format: \"float\",\n      });\n\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error(\"Error getting embedding:\", error);\n      throw new Error(\"Failed to generate embedding for query\");\n    }\n  }\n\n  /**\n   * Search for relevant content based on the question\n   */\n  async searchRelevantContent(question: string, topK: number = 3): Promise<RAGContent[]> {\n    try {\n      // Check if Pinecone is available\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - returning empty results');\n        return [];\n      }\n\n      // Get embedding for the question\n      const embedding = await this.getEmbedding(question);\n\n      // Query Pinecone\n      const queryResponse = await this.index.query({\n        vector: embedding,\n        topK,\n        includeMetadata: true,\n      });\n\n      // Process and return the results\n      const results: RAGContent[] = [];\n\n      for (const match of queryResponse.matches) {\n        if (match.metadata && typeof match.metadata.text === 'string') {\n          results.push({\n            content: match.metadata.text,\n            metadata: {\n              source: typeof match.metadata.source === 'string' ? match.metadata.source : undefined,\n            }\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error(\"Error searching Pinecone:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Bulk upsert vectors to Pinecone\n   */\n  async upsertVectors(vectors: any[]): Promise<void> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - skipping upsert');\n        return;\n      }\n\n      await this.index.upsert(vectors);\n      console.log(`Successfully upserted ${vectors.length} vectors to Pinecone`);\n    } catch (error) {\n      console.error(\"Error upserting vectors:\", error);\n      throw new Error(\"Failed to store vectors in knowledge base\");\n    }\n  }\n\n  /**\n   * Get all document sources from Pinecone\n   */\n  async getAllSources(): Promise<string[]> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - returning empty sources');\n        return [];\n      }\n\n      // Query with empty vector to get random samples and extract sources\n      const dummyVector = new Array(1536).fill(0); // text-embedding-3-small dimension\n      const queryResponse = await this.index.query({\n        vector: dummyVector,\n        topK: 100,\n        includeMetadata: true,\n      });\n\n      const sources = new Set<string>();\n      queryResponse.matches.forEach(match => {\n        if (match.metadata && match.metadata.source) {\n          sources.add(match.metadata.source as string);\n        }\n      });\n\n      return Array.from(sources);\n    } catch (error) {\n      console.error(\"Error getting sources:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete all vectors for a specific document\n   */\n  async deleteDocument(documentTitle: string): Promise<void> {\n    try {\n      if (!this.pinecone || !this.index) {\n        console.warn('Pinecone not available - skipping delete');\n        return;\n      }\n\n      // Find all vector IDs for this document\n      const dummyVector = new Array(1536).fill(0);\n      const queryResponse = await this.index.query({\n        vector: dummyVector,\n        topK: 1000,\n        includeMetadata: true,\n        filter: { source: documentTitle }\n      });\n\n      const idsToDelete = queryResponse.matches.map(match => match.id);\n\n      if (idsToDelete.length > 0) {\n        await this.index.deleteMany(idsToDelete);\n        console.log(`Deleted ${idsToDelete.length} vectors for document: ${documentTitle}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting document:\", error);\n      throw new Error(\"Failed to delete document from knowledge base\");\n    }\n  }\n\n  /**\n   * Create a new Pinecone index\n   */\n  async createIndex(indexName: string, dimension: number = 1536): Promise<void> {\n    if (!this.pinecone) {\n      throw new Error('Pinecone not initialized - please check your API key');\n    }\n\n    try {\n      console.log(`Attempting to create Pinecone index: ${indexName} with dimension: ${dimension}`);\n\n      const result = await this.pinecone.createIndex({\n        name: indexName,\n        dimension: dimension,\n        metric: 'cosine',\n        spec: {\n          serverless: {\n            cloud: 'aws',\n            region: 'us-east-1'\n          }\n        }\n      });\n\n      console.log(`Successfully created Pinecone index: ${indexName}`, result);\n    } catch (error: any) {\n      console.error('Detailed error creating Pinecone index:', {\n        message: error.message,\n        status: error.status,\n        response: error.response?.data,\n        indexName,\n        dimension\n      });\n\n      // Provide more specific error messages\n      if (error.message && error.message.includes('ALREADY_EXISTS')) {\n        throw new Error(`L'index \"${indexName}\" existe d\u00E9j\u00E0. Veuillez choisir un nom diff\u00E9rent ou attendre quelques minutes si vous venez de le supprimer.`);\n      } else if (error.status === 403) {\n        throw new Error('Permission denied. Please check your Pinecone API key.');\n      } else if (error.status === 400) {\n        throw new Error(`Invalid index configuration: ${error.message}`);\n      } else {\n        throw new Error(`Failed to create index: ${error.message || 'Unknown error'}`);\n      }\n    }\n  }\n\n  /**\n   * List all available Pinecone indexes\n   */\n  async listIndexes(): Promise<Array<{name: string, status?: string, dimension?: number}>> {\n\n    if (!this.pinecone) {\n      console.error('\u274C Pinecone not initialized');\n      throw new Error('Pinecone not initialized');\n    }\n\n    try {\n      console.log('\uD83D\uDCE1 Calling Pinecone listIndexes API...');\n      const indexesList = await this.pinecone.listIndexes();\n      console.log('\u2705 Pinecone API response received:', JSON.stringify(indexesList, null, 2));\n\n      if (!indexesList || !indexesList.indexes) {\n        console.log('\u26A0\uFE0F No indexes found in response or empty response');\n        return [];\n      }\n\n      console.log('\uD83D\uDCDD Processing indexes data...');\n      const indexes = indexesList.indexes.map((index, idx) => {\n        console.log(`Processing index ${idx}:`, JSON.stringify(index, null, 2));\n        return {\n          name: index.name,\n          status: index.status?.ready ? 'ready' : 'not ready',\n          dimension: index.dimension\n        };\n      });\n\n      console.log('\u2705 Successfully processed indexes:', JSON.stringify(indexes, null, 2));\n      return indexes;\n    } catch (error) {\n      console.error('\u274C Error in listIndexes:', error);\n      console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n      console.error('Error details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        name: error instanceof Error ? error.name : 'Unknown',\n        code: (error as any)?.code,\n        status: (error as any)?.status\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch to a different index\n   */\n  async switchIndex(indexName: string): Promise<void> {\n    if (!this.pinecone) {\n      throw new Error('Pinecone not initialized');\n    }\n\n    try {\n      this.indexName = indexName;\n      this.index = this.pinecone.index(indexName);\n      console.log(`Switched to Pinecone index: ${indexName}`);\n    } catch (error) {\n      console.error('Error switching Pinecone index:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process PDF content into chunks and upload to Pinecone\n   */\n  async processPDFContent(\n    content: string, \n    title: string, \n    category: string,\n    chunkSize: number = 1000,\n    overlap: number = 200\n  ): Promise<void> {\n    if (!this.index) {\n      throw new Error('Pinecone not available');\n    }\n\n    try {\n      // Split content into chunks\n      const chunks = this.splitIntoChunks(content, chunkSize, overlap);\n\n      // Create embeddings for all chunks\n      const embeddings = await this.getEmbeddingsForChunks(chunks);\n\n      // Prepare vectors for upsert\n      const vectors = chunks.map((chunk, index) => ({\n        id: `${title}_chunk_${index}`,\n        values: embeddings[index],\n        metadata: {\n          source: title,\n          text: chunk,\n          category: category,\n          chunk_index: index,\n          total_chunks: chunks.length\n        }\n      }));\n\n      // Upload to Pinecone in batches\n      await this.upsertVectors(vectors);\n      console.log(`Processed PDF: ${title} with ${chunks.length} chunks`);\n    } catch (error) {\n      console.error('Error processing PDF content:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Split text into chunks with overlap\n   */\n  private splitIntoChunks(text: string, chunkSize: number, overlap: number): string[] {\n    const chunks = [];\n    let start = 0;\n\n    while (start < text.length) {\n      const end = Math.min(start + chunkSize, text.length);\n      const chunk = text.slice(start, end);\n      chunks.push(chunk.trim());\n\n      if (end === text.length) break;\n      start = end - overlap;\n    }\n\n    return chunks.filter(chunk => chunk.length > 0);\n  }\n\n  /**\n   * Get embeddings for multiple text chunks\n   */\n  private async getEmbeddingsForChunks(chunks: string[]): Promise<number[][]> {\n    const embeddings = [];\n\n    // Process in batches to avoid rate limits\n    const batchSize = 10;\n    for (let i = 0; i < chunks.length; i += batchSize) {\n      const batch = chunks.slice(i, i + batchSize);\n      const batchEmbeddings = await Promise.all(\n        batch.map(chunk => this.getEmbedding(chunk))\n      );\n      embeddings.push(...batchEmbeddings);\n\n      // Small delay between batches\n      if (i + batchSize < chunks.length) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    return embeddings;\n  }\n\n  async queryVectors(query: string, indexName: string, topK: number = 5): Promise<RAGContent[]> {\n    try {\n      if (!this.pinecone) {\n        console.warn('Pinecone not available - returning empty results');\n        return [];\n      }\n      // Get embedding for the question\n      const embedding = await this.getEmbedding(query);\n\n      // Get specific index\n      const targetIndex = this.pinecone.index(indexName);\n\n      const queryResponse = await targetIndex.query({\n        vector: embedding,\n        topK,\n        includeMetadata: true,\n      });\n\n      // Process and return the results\n      const results: RAGContent[] = [];\n\n      for (const match of queryResponse.matches) {\n        if (match.metadata && typeof match.metadata.text === 'string') {\n          results.push({\n            content: match.metadata.text,\n            metadata: {\n              source: typeof match.metadata.source === 'string' ? match.metadata.source : undefined,\n            }\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      console.error(`Error querying Pinecone index ${indexName}:`, error);\n      return [];\n    }\n  }\n}\n\nexport const pineconeService = new PineconeService();", "import { openaiService } from './openai.service.js';\nimport { pineconeService } from './pinecone.service.js';\n\nexport class PromptGenService {\n  async generatePatientPrompt(teacherInput: string, contextDocs: string[] = []): Promise<string> {\n    try {\n      // Use existing Pinecone service to find relevant medical content\n      let embeddedDocs = [];\n      try {\n        embeddedDocs = await pineconeService.searchRelevantContent(teacherInput);\n      } catch (error) {\n        console.log('Pinecone not available, using base prompt generation');\n      }\n\n      // Combine context documents\n      const allContext = [...contextDocs, ...embeddedDocs].join('\\n\\n');\n\n      const systemPrompt = `Tu es un expert en cr\u00E9ation de sc\u00E9narios ECOS (Examen Clinique Objectif Structur\u00E9). \nTu dois cr\u00E9er un prompt d\u00E9taill\u00E9 et r\u00E9aliste pour simuler un patient virtuel.\n\nLe prompt doit:\n1. D\u00E9finir clairement l'identit\u00E9 du patient (\u00E2ge, sexe, profession, etc.)\n2. D\u00E9crire les sympt\u00F4mes actuels et l'histoire de la maladie\n3. Inclure les ant\u00E9c\u00E9dents m\u00E9dicaux pertinents\n4. Pr\u00E9ciser l'\u00E9tat \u00E9motionnel et le comportement du patient\n5. D\u00E9finir ce que le patient sait et ne sait pas sur sa condition\n6. Inclure des d\u00E9tails sur la personnalit\u00E9 du patient\n7. Sp\u00E9cifier comment le patient doit r\u00E9agir aux diff\u00E9rents types de questions\n\nLe prompt r\u00E9sultant sera utilis\u00E9 pour faire jouer le r\u00F4le du patient \u00E0 une IA lors d'un ECOS avec un \u00E9tudiant en m\u00E9decine.`;\n\n      const userPrompt = `Cr\u00E9e un prompt d\u00E9taill\u00E9 pour un patient virtuel bas\u00E9 sur cette description du sc\u00E9nario clinique:\n\n${teacherInput}\n\n${allContext ? `Utilise \u00E9galement ces informations contextuelles pour enrichir le sc\u00E9nario:\\n${allContext}` : ''}\n\nAssure-toi que le prompt soit suffisamment d\u00E9taill\u00E9 pour permettre une interaction r\u00E9aliste et p\u00E9dagogique de 15-20 minutes.`;\n\n      const response = await openaiService.generateResponse(\n        `G\u00E9n\u00E8re un prompt d\u00E9taill\u00E9 pour un patient virtuel bas\u00E9 sur cette description de sc\u00E9nario ECOS:\\n\\n${teacherInput}\\n\\nDocuments de r\u00E9f\u00E9rence:\\n${contextDocs.join('\\n\\n')}`,\n        allContext\n      );\n\n      return response;\n    } catch (error) {\n      console.error('Error generating patient prompt:', error);\n      throw new Error('Failed to generate patient prompt');\n    }\n  }\n\n  async generateEvaluationCriteria(scenarioDescription: string): Promise<any> {\n    try {\n      const systemPrompt = `Tu es un expert en \u00E9valuation ECOS. Cr\u00E9e des crit\u00E8res d'\u00E9valuation structur\u00E9s pour ce sc\u00E9nario clinique.\n\nLes crit\u00E8res doivent inclure:\n1. Communication (\u00E9coute, empathie, clart\u00E9)\n2. Anamn\u00E8se (questions pertinentes, organisation)\n3. Examen clinique (techniques, syst\u00E9matique)\n4. Raisonnement clinique (diagnostic diff\u00E9rentiel, hypoth\u00E8ses)\n5. Prise en charge (plan th\u00E9rapeutique, suivi)\n\nChaque crit\u00E8re doit avoir:\n- Un nom clair\n- Une description d\u00E9taill\u00E9e\n- Une \u00E9chelle de notation (0-4 points)\n- Des indicateurs de performance pour chaque niveau\n\nRetourne le r\u00E9sultat en format JSON structur\u00E9.`;\n\n      const response = await openaiService.createCompletion({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: `Cr\u00E9e des crit\u00E8res d'\u00E9valuation pour ce sc\u00E9nario ECOS:\\n\\n${scenarioDescription}` }\n        ],\n        temperature: 0.3,\n        max_tokens: 1500\n      });\n\n      const criteriaText = response.choices[0].message.content;\n\n      // Try to parse as JSON, fallback to structured text if it fails\n      try {\n        return JSON.parse(criteriaText);\n      } catch {\n        // If JSON parsing fails, create a structured object\n        return {\n          criteria: [\n            {\n              name: \"Communication\",\n              description: \"\u00C9valuation des comp\u00E9tences de communication\",\n              maxScore: 4,\n              details: criteriaText\n            }\n          ]\n        };\n      }\n    } catch (error) {\n      console.error('Error generating evaluation criteria:', error);\n      throw new Error('Failed to generate evaluation criteria');\n    }\n  }\n}\n\nexport const promptGenService = new PromptGenService();", "/**\n * Conversation Memory Service\n * \n * Manages short-term memory for virtual patient conversations\n * - In-memory cache for active sessions\n * - Context preservation and role recognition\n * - TTL-based cleanup for inactive conversations\n */\n\ninterface ConversationMessage {\n  content: string;\n  role: 'student' | 'patient';\n  timestamp: Date;\n  metadata?: {\n    messageType?: string;\n    medicalContext?: string;\n  };\n}\n\ninterface ConversationMemory {\n  sessionId: string;\n  studentEmail: string;\n  scenarioId: number;\n  studentRole: 'infirmier' | 'docteur' | '\u00E9tudiant';\n  patientPersona?: string;\n  conversationHistory: ConversationMessage[];\n  contextSummary?: string;\n  lastActivity: Date;\n  medicalContext?: {\n    symptomsDiscussed: string[];\n    proceduresPerformed: string[];\n    questionsAsked: string[];\n  };\n}\n\nexport class ConversationMemoryService {\n  private cache: Map<string, ConversationMemory> = new Map();\n  private readonly CACHE_TTL = 30 * 60 * 1000; // 30 minutes\n  private readonly MAX_HISTORY_MESSAGES = 20; // Keep last 20 messages\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Start cleanup timer - every 5 minutes\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredSessions();\n    }, 5 * 60 * 1000);\n  }\n\n  /**\n   * Initialize or retrieve conversation memory\n   */\n  async initializeConversation(\n    sessionId: string,\n    studentEmail: string,\n    scenarioId: number,\n    patientPrompt?: string\n  ): Promise<ConversationMemory> {\n    const existing = this.cache.get(sessionId);\n    \n    if (existing) {\n      existing.lastActivity = new Date();\n      return existing;\n    }\n\n    const memory: ConversationMemory = {\n      sessionId,\n      studentEmail,\n      scenarioId,\n      studentRole: 'infirmier', // Default to infirmier for ECOS-infirmier platform\n      patientPersona: patientPrompt,\n      conversationHistory: [],\n      lastActivity: new Date(),\n      medicalContext: {\n        symptomsDiscussed: [],\n        proceduresPerformed: [],\n        questionsAsked: []\n      }\n    };\n\n    this.cache.set(sessionId, memory);\n    console.log(`\uD83D\uDCAD Initialized conversation memory for session ${sessionId}`);\n    return memory;\n  }\n\n  /**\n   * Add message to conversation history\n   */\n  addMessage(\n    sessionId: string,\n    content: string,\n    role: 'student' | 'patient',\n    metadata?: any\n  ): void {\n    const memory = this.cache.get(sessionId);\n    if (!memory) {\n      console.warn(`\u26A0\uFE0F No memory found for session ${sessionId}`);\n      return;\n    }\n\n    const message: ConversationMessage = {\n      content,\n      role,\n      timestamp: new Date(),\n      metadata\n    };\n\n    memory.conversationHistory.push(message);\n    memory.lastActivity = new Date();\n\n    // Keep only recent messages to prevent memory bloat\n    if (memory.conversationHistory.length > this.MAX_HISTORY_MESSAGES) {\n      memory.conversationHistory = memory.conversationHistory.slice(-this.MAX_HISTORY_MESSAGES);\n    }\n\n    // Extract medical context from student messages\n    if (role === 'student') {\n      this.extractMedicalContext(memory, content);\n    }\n\n    console.log(`\uD83D\uDCAD Added ${role} message to session ${sessionId} memory`);\n  }\n\n  /**\n   * Detect student role from introduction\n   */\n  detectStudentRole(content: string): 'infirmier' | 'docteur' | '\u00E9tudiant' {\n    const lowerContent = content.toLowerCase();\n    \n    if (lowerContent.includes('infirmier') || lowerContent.includes('infirmi\u00E8re')) {\n      return 'infirmier';\n    }\n    \n    if (lowerContent.includes('docteur') || lowerContent.includes('m\u00E9decin')) {\n      return 'docteur';\n    }\n    \n    return '\u00E9tudiant';\n  }\n\n  /**\n   * Update student role in conversation memory\n   */\n  updateStudentRole(sessionId: string, content: string): void {\n    const memory = this.cache.get(sessionId);\n    if (!memory) return;\n\n    const detectedRole = this.detectStudentRole(content);\n    if (detectedRole !== '\u00E9tudiant') {\n      memory.studentRole = detectedRole;\n      console.log(`\uD83C\uDFAD Detected student role: ${detectedRole} for session ${sessionId}`);\n    }\n  }\n\n  /**\n   * Get conversation memory\n   */\n  getConversationMemory(sessionId: string): ConversationMemory | null {\n    const memory = this.cache.get(sessionId);\n    if (memory) {\n      memory.lastActivity = new Date();\n    }\n    return memory || null;\n  }\n\n  /**\n   * Get conversation context for AI prompt\n   */\n  getConversationContext(sessionId: string): {\n    history: string;\n    role: string;\n    medicalContext: string;\n  } {\n    const memory = this.cache.get(sessionId);\n    if (!memory) {\n      return { history: '', role: 'infirmier', medicalContext: '' };\n    }\n\n    // Build conversation history summary\n    const recentMessages = memory.conversationHistory.slice(-10); // Last 10 messages\n    const history = recentMessages.map(msg =>\n      `${msg.role === 'student' ? '\u00C9tudiant' : 'Patient'}: ${msg.content}`\n    ).join('\\n');\n\n    // Build medical context summary\n    const medicalContext = [\n      memory.medicalContext?.symptomsDiscussed.length ?\n        `Sympt\u00F4mes discut\u00E9s: ${memory.medicalContext.symptomsDiscussed.join(', ')}` : '',\n      memory.medicalContext?.questionsAsked.length ?\n        `Questions pos\u00E9es: ${memory.medicalContext.questionsAsked.join(', ')}` : ''\n    ].filter(Boolean).join('\\n');\n\n    return {\n      history,\n      role: memory.studentRole,\n      medicalContext\n    };\n  }\n\n  /**\n   * Get conversation history in OpenAI message format\n   * Returns array of messages ready to be sent to OpenAI API\n   */\n  getConversationMessages(sessionId: string, maxMessages: number = 10): Array<{\n    role: 'user' | 'assistant';\n    content: string;\n  }> {\n    const memory = this.cache.get(sessionId);\n    if (!memory) {\n      return [];\n    }\n\n    // Get recent messages\n    const recentMessages = memory.conversationHistory.slice(-maxMessages);\n\n    // Convert to OpenAI format\n    return recentMessages.map(msg => ({\n      role: msg.role === 'student' ? 'user' as const : 'assistant' as const,\n      content: msg.content\n    }));\n  }\n\n  /**\n   * Get appropriate addressing for student role\n   */\n  getStudentAddressing(sessionId: string): string {\n    const memory = this.cache.get(sessionId);\n    if (!memory) return 'infirmier'; // Default for ECOS-infirmier platform\n\n    switch (memory.studentRole) {\n      case 'infirmier':\n        return 'infirmier';\n      case 'docteur':\n        return 'docteur';\n      default:\n        return 'infirmier'; // Default for ECOS-infirmier platform\n    }\n  }\n\n  /**\n   * Extract medical context from conversation\n   */\n  private extractMedicalContext(memory: ConversationMemory, content: string): void {\n    const lowerContent = content.toLowerCase();\n    \n    // Extract symptoms mentioned\n    const symptomKeywords = ['douleur', 'mal', 'sympt\u00F4me', 'fi\u00E8vre', 'naus\u00E9e', 'fatigue', 'toux'];\n    symptomKeywords.forEach(symptom => {\n      if (lowerContent.includes(symptom) && !memory.medicalContext?.symptomsDiscussed.includes(symptom)) {\n        memory.medicalContext?.symptomsDiscussed.push(symptom);\n      }\n    });\n\n    // Extract questions asked\n    if (lowerContent.includes('?') || lowerContent.startsWith('comment') || lowerContent.startsWith('pourquoi')) {\n      const question = content.substring(0, 50) + (content.length > 50 ? '...' : '');\n      if (memory.medicalContext && !memory.medicalContext.questionsAsked.includes(question)) {\n        memory.medicalContext.questionsAsked.push(question);\n      }\n    }\n  }\n\n  /**\n   * Clean up expired sessions\n   */\n  private cleanupExpiredSessions(): void {\n    const now = new Date().getTime();\n    let cleanedCount = 0;\n\n    for (const [sessionId, memory] of this.cache.entries()) {\n      const lastActivity = memory.lastActivity.getTime();\n      if (now - lastActivity > this.CACHE_TTL) {\n        this.cache.delete(sessionId);\n        cleanedCount++;\n      }\n    }\n\n    if (cleanedCount > 0) {\n      console.log(`\uD83E\uDDF9 Cleaned up ${cleanedCount} expired conversation sessions`);\n    }\n  }\n\n  /**\n   * Get memory stats for monitoring\n   */\n  getMemoryStats(): {\n    activeSessions: number;\n    totalMessages: number;\n    oldestSession: Date | null;\n  } {\n    let totalMessages = 0;\n    let oldestSession: Date | null = null;\n\n    for (const memory of this.cache.values()) {\n      totalMessages += memory.conversationHistory.length;\n      if (!oldestSession || memory.lastActivity < oldestSession) {\n        oldestSession = memory.lastActivity;\n      }\n    }\n\n    return {\n      activeSessions: this.cache.size,\n      totalMessages,\n      oldestSession\n    };\n  }\n\n  /**\n   * Clear specific session\n   */\n  clearSession(sessionId: string): boolean {\n    const result = this.cache.delete(sessionId);\n    if (result) {\n      console.log(`\uD83D\uDDD1\uFE0F Cleared conversation memory for session ${sessionId}`);\n    }\n    return result;\n  }\n\n  /**\n   * Cleanup service\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.cache.clear();\n    console.log('\uD83D\uDED1 Conversation memory service destroyed');\n  }\n}\n\n// Export singleton instance\nexport const conversationMemoryService = new ConversationMemoryService();", "/**\n * Virtual Patient Service\n * \n * AI-powered virtual patient for ECOS medical training scenarios\n * - Uses OpenAI for intelligent responses\n * - Integrates with conversation memory\n * - Role-aware interactions (infirmier vs docteur)\n * - Scenario-specific patient personas\n */\n\nimport OpenAI from \"openai\";\nimport { conversationMemoryService } from './conversation-memory.service.js';\nimport { unifiedDb } from './unified-database.service.js';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\",\n});\n\nexport interface PatientResponse {\n  response: string;\n  addressing: string; // How to address the student\n  medicalContext?: {\n    symptomsRevealed: string[];\n    questionsAnswered: string[];\n    nextSteps: string[];\n  };\n}\n\nexport class VirtualPatientService {\n  \n  /**\n   * Generate virtual patient response using AI\n   */\n  async generatePatientResponse(\n    sessionId: string,\n    studentEmail: string,\n    query: string,\n    scenarioId?: number\n  ): Promise<PatientResponse> {\n    console.log(`\uD83D\uDE80 [generatePatientResponse] Starting patient response generation:`, {\n      sessionId,\n      studentEmail,\n      scenarioId,\n      queryPreview: query.substring(0, 50) + '...'\n    });\n    \n    try {\n      // Initialize or get conversation memory\n      const memory = await conversationMemoryService.initializeConversation(\n        sessionId,\n        studentEmail,\n        scenarioId || 1\n      );\n\n      // Detect and update student role from query\n      conversationMemoryService.updateStudentRole(sessionId, query);\n\n      // Get scenario-specific patient prompt\n      console.log(`\uD83D\uDD04 [generatePatientResponse] About to fetch patient prompt for scenario ${scenarioId}`);\n      const patientPrompt = await this.getScenarioPatientPrompt(scenarioId);\n      const isFallbackPrompt = patientPrompt.includes('Ce prompt g\u00E9n\u00E9rique doit \u00EAtre remplac\u00E9');\n      \n      // Get conversation context\n      const context = conversationMemoryService.getConversationContext(sessionId);\n      \n      // Get appropriate addressing\n      const addressing = conversationMemoryService.getStudentAddressing(sessionId);\n\n      // Build AI system prompt\n      const systemPrompt = this.buildSystemPrompt(patientPrompt, context, addressing);\n\n      // Get conversation history in OpenAI format\n      const conversationMessages = conversationMemoryService.getConversationMessages(sessionId, 8);\n\n      // Generate AI response\n      const aiResponse = await this.callOpenAI(systemPrompt, query, conversationMessages);\n\n      // Add messages to memory\n      conversationMemoryService.addMessage(sessionId, query, 'student');\n      conversationMemoryService.addMessage(sessionId, aiResponse, 'patient');\n\n      // Extract medical context from response\n      const medicalContext = this.extractMedicalContext(aiResponse);\n\n      return {\n        response: aiResponse,\n        addressing: addressing || '\u00E9tudiant',\n        medicalContext,\n        message: isFallbackPrompt\n          ? 'AI patient response generated with fallback prompt'\n          : 'AI patient response generated with scenario prompt and memory awareness'\n      };\n\n    } catch (error) {\n      console.error('\u274C Error generating patient response:', error);\n      \n      // Fallback response\n      const addressing = conversationMemoryService.getStudentAddressing(sessionId);\n      const fallbackMessage =\n        error instanceof Error ? error.message : 'Unknown error generating patient response';\n\n      return {\n        response: `Excusez-moi ${addressing || ''}, pourriez-vous r\u00E9p\u00E9ter votre question ? Je n'ai pas bien compris.`,\n        addressing: addressing || '\u00E9tudiant',\n        message: `AI patient fallback response due to error: ${fallbackMessage}`\n      };\n    }\n  }\n\n  /**\n   * Get scenario-specific patient prompt from database\n   */\n  private async getScenarioPatientPrompt(scenarioId?: number): Promise<string> {\n    console.log(`\uD83D\uDD0D [getScenarioPatientPrompt] Called with scenarioId: ${scenarioId}`);\n    \n    if (!scenarioId) {\n      console.warn(`\u26A0\uFE0F [getScenarioPatientPrompt] No scenarioId provided, using default prompt`);\n      return this.getDefaultPatientPrompt();\n    }\n\n    try {\n      console.log(`\uD83D\uDD04 [getScenarioPatientPrompt] Fetching scenarios from database...`);\n      const scenarios = await unifiedDb.getScenarios();\n      console.log(`\uD83D\uDCCA [getScenarioPatientPrompt] Found ${scenarios.length} scenarios in database`);\n\n      const parsedScenarioId =\n        typeof scenarioId === 'string' ? parseInt(scenarioId, 10) : scenarioId;\n\n      const normalizedScenarioId =\n        typeof parsedScenarioId === 'number' && !Number.isNaN(parsedScenarioId)\n          ? parsedScenarioId\n          : null;\n\n      const scenario = normalizedScenarioId !== null\n        ? scenarios.find(s => {\n            const scenarioDbId = typeof s.id === 'string' ? parseInt(s.id, 10) : s.id;\n            return !Number.isNaN(scenarioDbId) && scenarioDbId === normalizedScenarioId;\n          })\n        : undefined;\n      console.log(`\uD83D\uDD0D [getScenarioPatientPrompt] Scenario ${scenarioId} found:`, scenario ? 'YES' : 'NO');\n      \n      if (scenario?.patient_prompt && scenario.patient_prompt.trim()) {\n        console.log(`\u2705 [getScenarioPatientPrompt] Using scenario-specific prompt for scenario ${normalizedScenarioId ?? scenarioId}`);\n        console.log(`\uD83D\uDCDD [getScenarioPatientPrompt] Prompt preview: \"${scenario.patient_prompt.substring(0, 100)}...\"`);\n        return scenario.patient_prompt;\n      }\n      \n      if (scenario) {\n        console.warn(`\u26A0\uFE0F [getScenarioPatientPrompt] Scenario ${normalizedScenarioId ?? scenarioId} exists but has no patient_prompt (${scenario.patient_prompt})`);\n      } else {\n        console.warn(`\u26A0\uFE0F [getScenarioPatientPrompt] Scenario ${normalizedScenarioId ?? scenarioId} not found in database`);\n        console.log(`\uD83D\uDCCB [getScenarioPatientPrompt] Available scenario IDs:`, scenarios.map(s => s.id));\n      }\n      \n      console.warn(`\u26A0\uFE0F [getScenarioPatientPrompt] Using fallback prompt for scenario ${scenarioId}`);\n      return this.getDefaultPatientPrompt();\n      \n    } catch (error) {\n      console.error('\u274C [getScenarioPatientPrompt] Error fetching scenario prompt:', error);\n      console.warn('\u26A0\uFE0F [getScenarioPatientPrompt] Using emergency fallback prompt due to database error');\n      return this.getDefaultPatientPrompt();\n    }\n  }\n\n  /**\n   * Build comprehensive system prompt for AI\n   */\n  private buildSystemPrompt(\n    patientPrompt: string,\n    context: { history: string; role: string; medicalContext: string },\n    addressing: string\n  ): string {\n    const roleInstruction = this.getRoleInstruction(addressing);\n    \n    return `Tu es un patient virtuel dans un exercice de formation m\u00E9dicale ECOS (Examen Clinique Objectif Structur\u00E9).\n\nPERSONNALIT\u00C9 ET CONTEXTE DU PATIENT (\u00C0 RESPECTER ABSOLUMENT):\n${patientPrompt}\n\nINSTRUCTIONS COMPORTEMENTALES CRITIQUES:\n- Parle uniquement en fran\u00E7ais\n- RESPECTE STRICTEMENT le contexte et les sympt\u00F4mes d\u00E9crits dans ton prompt de patient\n- NE JAMAIS inventer ou mentionner des sympt\u00F4mes qui ne sont PAS dans ton contexte\n- NE JAMAIS nier des sympt\u00F4mes qui SONT explicitement mentionn\u00E9s dans ton contexte\n- Si ton prompt mentionne des sympt\u00F4mes sp\u00E9cifiques, tu DOIS les avoir\n- Tu es le patient. Ne bascule JAMAIS dans le r\u00F4le de l'infirmier ou d'un soignant.\n- N'emploie jamais des phrases comme \"je suis l\u00E0 pour vous aider/\u00E9couter\" ou toute formulation qui implique que tu prends en charge l'\u00E9tudiant.\n- ${roleInstruction}\n- R\u00E9ponds de mani\u00E8re r\u00E9aliste et coh\u00E9rente avec EXACTEMENT tes sympt\u00F4mes d\u00E9crits\n- Sois coop\u00E9ratif mais r\u00E9aliste (certaines informations peuvent n\u00E9cessiter des questions sp\u00E9cifiques)\n- Exprime tes \u00E9motions et pr\u00E9occupations comme un vrai patient\n- R\u00E9f\u00E9rence les informations d\u00E9j\u00E0 \u00E9chang\u00E9es dans la conversation\n\nCONTEXTE M\u00C9DICAL ACTUEL:\n${context.medicalContext}\n\nR\u00C8GLES D'OR:\n1. RESTE FID\u00C8LE \u00E0 ton prompt de patient - ne jamais en d\u00E9vier\n2. Si ton contexte mentionne des sympt\u00F4mes, tu les as R\u00C9ELLEMENT\n3. Ne mentionne JAMAIS de sympt\u00F4mes non inclus dans ton contexte\n4. Utilise l'historique de conversation (messages pr\u00E9c\u00E9dents) pour maintenir la continuit\u00E9\n5. Si l'\u00E9tudiant a d\u00E9j\u00E0 pos\u00E9 une question similaire, fais r\u00E9f\u00E9rence \u00E0 ta r\u00E9ponse pr\u00E9c\u00E9dente\n\nIMPORTANT: Respecte ton contexte m\u00E9dical \u00E0 100%. L'historique complet de la conversation t'est fourni dans les messages pr\u00E9c\u00E9dents - utilise-le pour assurer la coh\u00E9rence.`;\n  }\n\n  /**\n   * Get role-specific instruction\n   */\n  private getRoleInstruction(addressing: string): string {\n    console.log(`\uD83C\uDFAD Generating role instruction for addressing: \"${addressing}\"`);\n    \n    switch (addressing) {\n      case 'infirmier':\n        return 'Adresse-toi \u00E0 l\\'infirmier(\u00E8re) de mani\u00E8re appropri\u00E9e. Tu peux demander \"Que faites-vous comme soins infirmier?\" ou dire \"Merci infirmier/infirmi\u00E8re\" quand c\\'est appropri\u00E9.';\n      case 'docteur':\n        return 'Adresse-toi au docteur de mani\u00E8re formelle. Tu peux dire \"Docteur, qu\\'est-ce que j\\'ai?\" ou \"Merci docteur\" quand c\\'est appropri\u00E9.';\n      default:\n        // Default to infirmier for ECOS-infirmier platform if no role detected yet\n        console.log('\uD83C\uDFAD No specific role detected, defaulting to infirmier addressing for ECOS-infirmier platform');\n        return 'Adresse-toi \u00E0 l\\'infirmier(\u00E8re) de mani\u00E8re appropri\u00E9e. Tu peux demander \"Que faites-vous comme soins infirmier?\" ou dire \"Merci infirmier/infirmi\u00E8re\" quand c\\'est appropri\u00E9.';\n    }\n  }\n\n  /**\n   * Call OpenAI API with conversation history\n   */\n  private async callOpenAI(\n    systemPrompt: string,\n    query: string,\n    conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>\n  ): Promise<string> {\n    // Build messages array with system prompt, history, and current query\n    const messages: Array<{ role: 'system' | 'user' | 'assistant'; content: string }> = [\n      { role: \"system\", content: systemPrompt },\n      ...conversationHistory,\n      { role: \"user\", content: query }\n    ];\n\n    console.log(`\uD83D\uDCAC Sending ${messages.length} messages to OpenAI (1 system + ${conversationHistory.length} history + 1 current)`);\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages,\n      temperature: 0.7,          // Balanced creativity and coherence\n      max_tokens: 300,\n      top_p: 0.95,               // Controlled diversity in responses\n      frequency_penalty: 0.5,    // Reduce repetitive phrases\n      presence_penalty: 0.5      // Encourage introducing new relevant elements\n    });\n\n    return response.choices[0]?.message?.content || \"Je ne me sens pas bien...\";\n  }\n\n  /**\n   * Extract medical context from AI response\n   * NOTE: Sympt\u00F4mes g\u00E9r\u00E9s par le LLM + RAG, pas de hardcode\n   */\n  private extractMedicalContext(response: string): PatientResponse['medicalContext'] {\n    // Extraction simplifi\u00E9e - le LLM g\u00E8re les sympt\u00F4mes selon ses connaissances\n    // Pas de liste hardcod\u00E9e de sympt\u00F4mes\n    \n    return {\n      symptomsRevealed: [], // LLM + RAG g\u00E8rent les sympt\u00F4mes dynamiquement\n      questionsAnswered: [], // Pourrait \u00EAtre am\u00E9lior\u00E9 avec NLP\n      nextSteps: [] // Pourrait sugg\u00E9rer les prochaines \u00E9tapes diagnostiques\n    };\n  }\n\n  /**\n   * Default patient prompt - Emergency fallback only\n   * This should only be used if database scenarios are missing patient prompts\n   */\n  private getDefaultPatientPrompt(): string {\n    console.warn('\u26A0\uFE0F Using emergency fallback patient prompt - this indicates missing patient_prompt in database');\n    return `Tu es un patient virtuel dans un exercice de formation m\u00E9dicale ECOS.\n\nCONTEXTE G\u00C9N\u00C9RAL :\n- Tu es un patient qui consulte pour un probl\u00E8me de sant\u00E9\n- Tu ressens des sympt\u00F4mes que tu peux d\u00E9crire quand on te pose les bonnes questions\n- Tu es coop\u00E9ratif mais r\u00E9aliste dans tes r\u00E9ponses\n- Tu peux exprimer de l'inqui\u00E9tude ou des \u00E9motions appropri\u00E9es\n\nCOMPORTEMENT :\n- R\u00E9ponds aux questions m\u00E9dicales de mani\u00E8re coh\u00E9rente\n- Ne mentionne que les sympt\u00F4mes qu'on t'a d\u00E9j\u00E0 demand\u00E9s ou qui sont \u00E9vidents\n- Sois patient et poli avec le personnel soignant\n- Si on te demande des d\u00E9tails sp\u00E9cifiques, tu peux les fournir graduellement\n- Exprime tes pr\u00E9occupations de sant\u00E9 de mani\u00E8re naturelle\n\nIMPORTANT : Ce prompt g\u00E9n\u00E9rique doit \u00EAtre remplac\u00E9 par un prompt sp\u00E9cifique au sc\u00E9nario dans la base de donn\u00E9es.`;\n  }\n\n  /**\n   * Get conversation memory for a session\n   */\n  getConversationMemory(sessionId: string): any {\n    return conversationMemoryService.getConversationMemory(sessionId);\n  }\n\n  /**\n   * Get memory statistics for monitoring\n   */\n  getServiceStats(): {\n    memoryStats: any;\n    totalSessions: number;\n  } {\n    return {\n      memoryStats: conversationMemoryService.getMemoryStats(),\n      totalSessions: conversationMemoryService.getMemoryStats().activeSessions\n    };\n  }\n\n  /**\n   * Clear specific session data\n   */\n  clearPatientSession(sessionId: string): boolean {\n    return conversationMemoryService.clearSession(sessionId);\n  }\n\n  /**\n   * Validate patient simulator input\n   */\n  validateInput(input: {\n    sessionId?: string;\n    email?: string;\n    query?: string;\n    scenarioId?: number;\n  }): { valid: boolean; error?: string } {\n    if (!input.sessionId) {\n      return { valid: false, error: 'Session ID is required' };\n    }\n\n    if (!input.email) {\n      return { valid: false, error: 'Student email is required' };\n    }\n\n    if (!input.query || input.query.trim().length === 0) {\n      return { valid: false, error: 'Query cannot be empty' };\n    }\n\n    if (input.query.length > 500) {\n      return { valid: false, error: 'Query is too long (max 500 characters)' };\n    }\n\n    return { valid: true };\n  }\n}\n\n// Export singleton instance\nexport const virtualPatientService = new VirtualPatientService();\n", "import express, { type Express, type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { addDiagnosticRoutes } from \"./diagnostic-endpoint.js\";\nimport { createDebugMiddleware, createDatabaseErrorHandler } from \"./debug.middleware.js\";\nimport { db, users, testDatabaseConnection, checkDatabaseHealth } from \"./db.js\";\nimport { \n  createMonitoringMiddleware, \n  createMonitoringRoutes, \n  createErrorTrackingMiddleware \n} from \"./middleware/monitoring.middleware.js\";\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\n\ninterface ServerlessAppConfig {\n  environment: 'development' | 'production';\n  enableDebug: boolean;\n  maxResponseTime: number;\n  enableHealthChecks: boolean;\n}\n\nclass ServerlessApplication {\n  private app: Express | null = null;\n  private initialized = false;\n  private initializationPromise: Promise<Express> | null = null;\n  private config: ServerlessAppConfig;\n  \n  constructor(config?: Partial<ServerlessAppConfig>) {\n    this.config = {\n      environment: (process.env.NODE_ENV as 'development' | 'production') || 'production',\n      enableDebug: process.env.NODE_ENV !== 'production',\n      maxResponseTime: 25000, // 25s for Vercel timeout buffer\n      enableHealthChecks: true,\n      ...config\n    };\n  }\n\n  private validateEnvironment(): { isValid: boolean; missing: string[] } {\n    const required = ['DATABASE_URL'];\n    const optional = ['OPENAI_API_KEY', 'PINECONE_API_KEY'];\n    const missing = required.filter(v => !process.env[v]);\n    \n    if (missing.length > 0) {\n      console.error(`\u274C Missing critical environment variables: ${missing.join(', ')}`);\n    }\n    \n    const optionalMissing = optional.filter(v => !process.env[v]);\n    if (optionalMissing.length > 0) {\n      console.warn(`\u26A0\uFE0F Missing optional environment variables: ${optionalMissing.join(', ')}`);\n    }\n    \n    return { isValid: missing.length === 0, missing };\n  }\n\n  private setupMiddleware(app: Express): void {\n    // Basic middleware\n    app.use(express.json({ limit: '10mb' }));\n    app.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n    // Performance monitoring middleware (must be early)\n    app.use(createMonitoringMiddleware());\n\n    // Security middleware\n    app.use((req, res, next) => {\n      // Prevent sensitive file access\n      const sensitivePaths = [\n        '/.env', '/package.json', '/.replit', '/server', '/shared', '/scripts',\n        '/node_modules', '/.git', '/dist/index.js'\n      ];\n\n      if (sensitivePaths.some(path => req.path.startsWith(path))) {\n        return res.status(404).json({ error: \"Not Found\" });\n      }\n      next();\n    });\n\n    // Debug middleware in development\n    if (this.config.enableDebug) {\n      app.use(createDebugMiddleware());\n    }\n    \n    // Database error handling\n    app.use(createDatabaseErrorHandler());\n\n    // Request timeout middleware\n    app.use((req, res, next) => {\n      const timeout = setTimeout(() => {\n        if (!res.headersSent) {\n          res.status(504).json({ \n            error: 'Request timeout',\n            message: 'The request took too long to process'\n          });\n        }\n      }, this.config.maxResponseTime);\n\n      res.on('finish', () => clearTimeout(timeout));\n      next();\n    });\n  }\n\n  private setupHealthChecks(app: Express): void {\n    if (!this.config.enableHealthChecks) return;\n\n    // Get monitoring routes\n    const monitoringRoutes = createMonitoringRoutes();\n\n    // Enhanced health check with monitoring integration\n    app.get('/health', monitoringRoutes.healthCheck);\n\n    // Readiness check\n    app.get('/ready', (req: Request, res: Response) => {\n      res.status(200).json({\n        status: 'ready',\n        timestamp: new Date().toISOString(),\n        initialized: this.initialized,\n        environment: this.config.environment\n      });\n    });\n\n    // Liveness check (always returns 200 if the process is running)\n    app.get('/live', (req: Request, res: Response) => {\n      res.status(200).json({\n        status: 'alive',\n        timestamp: new Date().toISOString(),\n        pid: process.pid,\n        uptime: process.uptime()\n      });\n    });\n\n    // Performance metrics endpoint\n    app.get('/metrics', monitoringRoutes.metrics);\n\n    // Performance report endpoint\n    app.get('/report', monitoringRoutes.report);\n\n    // Custom metric recording endpoint\n    app.post('/metrics', monitoringRoutes.recordMetric);\n  }\n\n  private setupErrorHandling(app: Express): void {\n    // Error tracking middleware (must be before error handlers)\n    app.use(createErrorTrackingMiddleware());\n\n    // 404 handler for unknown routes\n    app.use('*', (req: Request, res: Response) => {\n      res.status(404).json({ \n        error: 'Not Found',\n        message: `Route ${req.method} ${req.originalUrl} not found`,\n        timestamp: new Date().toISOString()\n      });\n    });\n\n    // Global error handler\n    app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      const errorId = Math.random().toString(36).substr(2, 9);\n      \n      console.error(`[${errorId}] Serverless Error [${status}]:`, {\n        message,\n        stack: err.stack,\n        url: req.url,\n        method: req.method,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.status(status).json({ \n        error: this.config.environment === 'production' ? 'Internal Server Error' : message,\n        message: this.config.environment === 'production' ? 'An error occurred processing your request' : message,\n        errorId,\n        timestamp: new Date().toISOString()\n      });\n    });\n  }\n\n  private async initializeApplication(): Promise<Express> {\n    if (this.initialized && this.app) {\n      return this.app;\n    }\n\n    console.log(`\uD83D\uDE80 Initializing ECOS serverless application (${this.config.environment})`);\n    \n    // Validate environment\n    const { isValid, missing } = this.validateEnvironment();\n    if (!isValid) {\n      throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n    }\n\n    // Create Express app\n    const app = express();\n    \n    // Setup middleware\n    this.setupMiddleware(app);\n    \n    // Setup health checks\n    this.setupHealthChecks(app);\n\n    // Setup diagnostic routes (for debugging)\n    if (this.config.enableDebug) {\n      addDiagnosticRoutes(app);\n    }\n\n    // Register API routes\n    try {\n      await registerRoutes(app);\n      console.log('\u2705 API routes registered successfully');\n    } catch (error) {\n      console.error('\u274C Failed to register routes:', error);\n      throw error;\n    }\n\n    // Setup error handling (must be last)\n    this.setupErrorHandling(app);\n\n    this.app = app;\n    this.initialized = true;\n    \n    console.log('\u2705 ECOS serverless application initialized successfully');\n    return app;\n  }\n\n  async getApplication(): Promise<Express> {\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    if (this.initialized && this.app) {\n      return this.app;\n    }\n\n    this.initializationPromise = this.initializeApplication();\n    return this.initializationPromise;\n  }\n\n  async handleRequest(req: VercelRequest, res: VercelResponse): Promise<void> {\n    try {\n      const app = await this.getApplication();\n      \n      return new Promise<void>((resolve, reject) => {\n        const timeoutId = setTimeout(() => {\n          reject(new Error('Request handling timeout'));\n        }, this.config.maxResponseTime);\n\n        app(req as any, res as any, (err: any) => {\n          clearTimeout(timeoutId);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Critical serverless handler error:', error);\n      \n      if (!res.headersSent) {\n        res.status(500).json({\n          error: 'Internal Server Error',\n          message: 'Application initialization failed',\n          timestamp: new Date().toISOString()\n        });\n      }\n    }\n  }\n}\n\n// Create singleton instance\nconst serverlessApp = new ServerlessApplication();\n\nexport { ServerlessApplication, serverlessApp };", "import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { users, ecosScenarios, ecosSessions, ecosMessages, ecosEvaluations, trainingSessions, trainingSessionStudents, trainingSessionScenarios } from '../shared/schema.js';\nimport { unifiedDb } from './services/unified-database.service.js';\nimport { eq, and } from 'drizzle-orm';\nimport { scenarioSyncService } from './services/scenario-sync.service.js';\nimport {\n  authService,\n  authenticateToken,\n  requireAdmin,\n  isAdminAuthorized,\n  authorizeByEmail,\n  type AuthenticatedRequest\n} from './middleware/auth.middleware.js';\nimport { verifyFirebaseToken } from './middleware/firebase-auth.middleware.js';\nimport {\n  validateLogin,\n  validateCreateStudent,\n  validateCreateEcosSession,\n  validateEcosMessage,\n  validateEcosEvaluation,\n  validateEmailQuery,\n  validateSessionIdParam,\n  validateRequestSize,\n  validateContentType,\n  validateCreateTrainingSession,\n  type ValidatedRequest\n} from './middleware/validation.middleware.js';\nimport {\n  authRateLimit,\n  firebaseAuthRateLimit,\n  apiRateLimit,\n  strictRateLimit,\n  emailBasedRateLimit,\n  ecosSessionRateLimit,\n  ecosEvaluationRateLimit\n} from './middleware/rate-limit.middleware.js';\nimport { APIError, asyncHandler, sendErrorResponse } from './middleware/error-handler.middleware.js';\nimport { apiLogger } from './services/logger.service.js';\nimport { openaiService } from './services/openai.service.js';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Database initialization is now handled by startup sequencer\n  // No async initialization needed here - all handled by UnifiedDatabaseService\n\n  // In-memory user storage for demonstration\n  const inMemoryUsers = new Map<string, { userId: string; createdAt: Date }>();\n\n  async function findOrCreateStudent(email: string): Promise<{ userId: string; isNewUser: boolean }> {\n    try {\n      // Try database first - functionality temporarily disabled\n      try {\n        // Database operations temporarily disabled due to schema migration\n        // Fallback to in-memory storage directly\n        if (inMemoryUsers.has(email)) {\n          const user = inMemoryUsers.get(email)!;\n          return { userId: user.userId, isNewUser: false };\n        }\n\n        const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        inMemoryUsers.set(email, { userId, createdAt: new Date() });\n        return { userId, isNewUser: true };\n      } catch (dbError) {\n        console.log('Database not available, using in-memory storage');\n        \n        // Fallback to in-memory storage\n        if (inMemoryUsers.has(email)) {\n          const user = inMemoryUsers.get(email)!;\n          return { userId: user.userId, isNewUser: false };\n        }\n\n        const userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        inMemoryUsers.set(email, { userId, createdAt: new Date() });\n        return { userId, isNewUser: true };\n      }\n    } catch (error) {\n      console.error('Error in findOrCreateStudent:', error);\n      throw error;\n    }\n  }\n\n  // Health check endpoint for diagnostics\n  app.get(\"/api/health\", (req: Request, res: Response) => {\n    res.status(200).json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      service: \"ecos-api\",\n      version: \"1.0.0\"\n    });\n  });\n\n  // Teacher auth check endpoint for diagnostics\n  app.get(\"/api/teacher/auth-check\", (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    // ROBUST AUTHENTICATION - Force admin email acceptance\n    const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n    const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n    \n    if (!emailStr) {\n      return res.status(400).json({ message: \"Email required\" });\n    }\n    \n    if (!adminEmails.includes(emailStr)) {\n      return res.status(403).json({ message: \"Not authorized as teacher\" });\n    }\n    \n    res.status(200).json({\n      message: \"Teacher authentication successful\",\n      email: email,\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  // Authentication endpoints\n  app.post(\"/api/auth/login\", authRateLimit.middleware(), validateContentType(), validateRequestSize(), validateLogin, async (req: ValidatedRequest, res: Response) => {\n    try {\n      const { email, password } = req.validatedBody || req.body;\n\n      // For now, we'll use simple email-based auth during transition\n      // In production, you'd verify the password against a database\n      if (!isAdminAuthorized(email)) {\n        return res.status(401).json({ \n          error: 'Invalid credentials',\n          code: 'INVALID_CREDENTIALS'\n        });\n      }\n\n      const token = authService.generateToken(email);\n      \n      res.status(200).json({\n        message: 'Login successful',\n        token,\n        user: {\n          email,\n          isAdmin: true\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ \n        error: 'Login failed',\n        code: 'LOGIN_FAILED'\n      });\n    }\n  });\n\n  app.post(\"/api/auth/verify\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    res.status(200).json({\n      message: 'Token valid',\n      user: req.user\n    });\n  });\n\n  app.get(\"/api/auth/profile\", authenticateToken, async (req: AuthenticatedRequest, res: Response) => {\n    res.status(200).json({\n      user: req.user,\n      adminEmails: authService.getAdminEmails()\n    });\n  });\n\n  // Check if email has admin privileges\n  app.get(\"/api/auth/check-admin\", asyncHandler(async (req: Request, res: Response) => {\n    const email = req.query.email as string;\n\n    if (!email) {\n      throw APIError.badRequest('Email parameter required');\n    }\n\n    const isAdmin = authService.isAdmin(email);\n    res.status(200).json({\n      isAdmin,\n      email: email.toLowerCase().trim()\n    });\n  }));\n\n  // Firebase Authentication endpoints\n  app.post(\"/api/auth/firebase-login\", firebaseAuthRateLimit.middleware(), async (req: Request, res: Response) => {\n    try {\n      // Use the statically imported middleware\n      const firebaseReq = req as any;\n\n      await new Promise<void>((resolve, reject) => {\n        verifyFirebaseToken(firebaseReq, res, (err?: any) => {\n          if (err) reject(err);\n          else resolve();\n        });\n      });\n\n      // Return user data and JWT token\n      res.status(200).json({\n        user: {\n          uid: firebaseReq.firebaseUser.uid,\n          email: firebaseReq.firebaseUser.email,\n          role: firebaseReq.firebaseUser.role,\n          emailVerified: firebaseReq.firebaseUser.emailVerified\n        },\n        jwtToken: firebaseReq.jwtToken,\n        message: 'Firebase authentication successful'\n      });\n    } catch (error: any) {\n      console.error('\u274C Firebase login error:', error);\n      res.status(403).json({\n        error: error.message || 'Firebase authentication failed',\n        code: 'FIREBASE_LOGIN_FAILED'\n      });\n    }\n  });\n\n  app.post(\"/api/auth/firebase-register\", firebaseAuthRateLimit.middleware(), validateContentType(), validateRequestSize(), async (req: Request, res: Response) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({\n          error: 'Email and password are required',\n          code: 'MISSING_CREDENTIALS'\n        });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({\n          error: 'Invalid email format',\n          code: 'INVALID_EMAIL'\n        });\n      }\n\n      // Validate password strength\n      if (password.length < 6) {\n        return res.status(400).json({\n          error: 'Password must be at least 6 characters',\n          code: 'WEAK_PASSWORD'\n        });\n      }\n\n      // Import Firebase Admin service\n      const { firebaseAdminService } = await import('./services/firebase-admin.service.js');\n\n      // Check if user already exists\n      const existingUser = await firebaseAdminService.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({\n          error: 'Email already in use',\n          code: 'EMAIL_IN_USE'\n        });\n      }\n\n      // Create Firebase user\n      const firebaseUser = await firebaseAdminService.createUser(email, password);\n\n      // Create user in Supabase\n      const supabaseUser = await unifiedDb.createUser({\n        email,\n        firebaseUid: firebaseUser.uid,\n        firstName: firstName || null,\n        lastName: lastName || null,\n        profileImageUrl: null\n      });\n\n      // Assign student role by default\n      await unifiedDb.setUserRole(supabaseUser.id, 'student');\n\n      // Generate JWT token\n      const jwtToken = authService.generateToken(email);\n\n      res.status(201).json({\n        user: {\n          uid: firebaseUser.uid,\n          email: firebaseUser.email,\n          role: 'student',\n          emailVerified: false\n        },\n        jwtToken,\n        message: 'User registered successfully'\n      });\n\n    } catch (error: any) {\n      console.error('\u274C Firebase registration error:', error);\n      res.status(500).json({\n        error: error.message || 'Registration failed',\n        code: 'REGISTRATION_FAILED'\n      });\n    }\n  });\n\n  // Route to sync scenarios from Pinecone - supports both auth methods during transition\n  app.post(\"/api/admin/sync-scenarios\", asyncHandler(async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      throw APIError.forbidden(\"Acc\u00E8s non autoris\u00E9\");\n    }\n\n    await scenarioSyncService.syncScenariosFromPinecone();\n    res.status(200).json({ message: \"Synchronisation des sc\u00E9narios termin\u00E9e avec succ\u00E8s\" });\n  }));\n\n  // Route to test direct database connection and fetch scenarios\n  app.get(\"/api/admin/test-db\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      console.log('\uD83D\uDD27 Testing database connection via unified service...');\n      await unifiedDb.initialize(); // Ensure database is initialized\n      \n      const scenarios = await unifiedDb.getScenarios();\n      \n      res.status(200).json({ \n        connected: true,\n        scenarios,\n        count: scenarios.length,\n        message: `Connexion Supabase r\u00E9ussie - ${scenarios.length} sc\u00E9narios trouv\u00E9s`\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error connecting to Supabase:\", error);\n      res.status(500).json({ \n        message: \"Erreur de connexion \u00E0 la base de donn\u00E9es Supabase\",\n        error: error.message,\n        connected: false\n      });\n    }\n  });\n\n  // Route to get available scenarios for students\n  app.get(\"/api/student/available-scenarios\", async (req: Request, res: Response) => {\n    try {\n      console.log('\uD83D\uDD27 Fetching student scenarios from database only...');\n      const scenarios = await scenarioSyncService.getAvailableScenarios();\n      \n      res.status(200).json({ \n        scenarios,\n        connected: true,\n        source: 'database'\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching student scenarios:\", error);\n      res.status(500).json({ \n        message: \"Erreur de connexion \u00E0 la base de donn\u00E9es\",\n        error: error.message,\n        connected: false\n      });\n    }\n  });\n\n  // Route to get scenarios for teacher dashboard\n  app.get(\"/api/teacher/scenarios\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    // ROBUST AUTHENTICATION - Force admin email acceptance\n    const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n    const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n    \n    if (!emailStr || !adminEmails.includes(emailStr)) {\n      // Silent rejection for unauthorized emails (no spam logs)\n      if (emailStr && !adminEmails.includes(emailStr)) {\n        console.log('\u26A0\uFE0F [SILENT-REJECT] Non-admin email attempted access:', emailStr);\n      }\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n    \n    console.log('\u2705 [ADMIN-ACCESS] Authorized admin email:', emailStr);\n\n    try {\n      console.log('\uD83D\uDD27 Fetching teacher scenarios using unified database...');\n      \n      const scenarios = await unifiedDb.getScenarios();\n      \n      res.status(200).json({ \n        scenarios,\n        connected: true,\n        source: 'unified-database'\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching teacher scenarios:\", error);\n      \n      // Fallback response\n      res.status(200).json({ \n        scenarios: [],\n        connected: false,\n        source: 'error-fallback',\n        message: 'Service temporarily unavailable',\n        error: error.message\n      });\n    }\n  });\n\n  // Route to get scenarios (GET /api/ecos/scenarios) - using UnifiedDatabaseService\n  app.get(\"/api/ecos/scenarios\", async (req: Request, res: Response) => {\n    try {\n      console.log('\uD83D\uDD27 Fetching scenarios via /api/ecos/scenarios using unified database...');\n      \n      const scenarios = await unifiedDb.getScenarios();\n      \n      res.status(200).json({ \n        scenarios,\n        connected: true,\n        source: 'unified-database-ecos-endpoint'\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching scenarios via /api/ecos/scenarios:\", error);\n      \n      // Fallback response\n      res.status(200).json({ \n        scenarios: [],\n        connected: false,\n        source: 'error-fallback-ecos-endpoint',\n        message: 'Service temporarily unavailable',\n        error: error.message\n      });\n    }\n  });\n\n  // Route to create a new scenario\n  app.post(\"/api/ecos/scenarios\", async (req: Request, res: Response) => {\n    const { email, title, description, patientPrompt, evaluationCriteria, pineconeIndex } = req.body;\n    \n    if (!email || !isAdminAuthorized(email)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    if (!title || !description) {\n      return res.status(400).json({ message: \"Titre et description requis\" });\n    }\n\n    try {\n      // Parse and validate evaluation criteria if provided\n      let parsedCriteria = null;\n      if (evaluationCriteria) {\n        try {\n          // Handle both string and object formats\n          if (typeof evaluationCriteria === 'string') {\n            parsedCriteria = JSON.parse(evaluationCriteria);\n          } else if (typeof evaluationCriteria === 'object') {\n            parsedCriteria = evaluationCriteria;\n          }\n          \n          // Validate criteria structure\n          if (!parsedCriteria || typeof parsedCriteria !== 'object') {\n            throw new Error('Evaluation criteria must be a valid object');\n          }\n        } catch (parseError) {\n          return res.status(400).json({ \n            message: \"Format JSON invalide pour les crit\u00E8res d'\u00E9valuation\",\n            error: (parseError as Error).message \n          });\n        }\n      }\n\n      // Use unified database service for scenario creation\n      await unifiedDb.initialize(); // Ensure database is initialized\n\n      const newScenario = await unifiedDb.createScenario({\n        title,\n        description,\n        patientPrompt: patientPrompt || null,\n        evaluationCriteria: parsedCriteria,\n        imageUrl: null,\n        createdBy: email\n      });\n\n      res.status(200).json({ \n        message: \"Sc\u00E9nario cr\u00E9\u00E9 avec succ\u00E8s\",\n        scenario: newScenario\n      });\n\n    } catch (error: any) {\n      console.error(\"Error creating scenario:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la cr\u00E9ation du sc\u00E9nario\",\n        error: error.message\n      });\n    }\n  });\n\n  // Route to update a scenario\n  app.put(\"/api/ecos/scenarios/:id\", async (req: Request, res: Response) => {\n    const { id } = req.params;\n    const { email, title, description, patientPrompt, evaluationCriteria, pineconeIndex } = req.body;\n    \n    if (!email || !isAdminAuthorized(email)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      // Parse and validate evaluation criteria if provided\n      let parsedCriteria = null;\n      if (evaluationCriteria) {\n        try {\n          // Handle both string and object formats\n          if (typeof evaluationCriteria === 'string') {\n            parsedCriteria = JSON.parse(evaluationCriteria);\n          } else if (typeof evaluationCriteria === 'object') {\n            parsedCriteria = evaluationCriteria;\n          }\n          \n          // Validate criteria structure\n          if (!parsedCriteria || typeof parsedCriteria !== 'object') {\n            throw new Error('Evaluation criteria must be a valid object');\n          }\n        } catch (parseError) {\n          return res.status(400).json({ \n            message: \"Format JSON invalide pour les crit\u00E8res d'\u00E9valuation\",\n            error: (parseError as Error).message \n          });\n        }\n      }\n\n      // Use unified database service for scenario updates\n      await unifiedDb.initialize(); // Ensure database is initialized\n\n      const updatedScenario = await unifiedDb.updateScenario(id, {\n        title,\n        description,\n        patientPrompt: patientPrompt || null,\n        evaluationCriteria: parsedCriteria,\n        pineconeIndex: pineconeIndex || null\n      });\n\n      res.status(200).json({ \n        message: \"Sc\u00E9nario modifi\u00E9 avec succ\u00E8s\",\n        scenario: updatedScenario\n      });\n\n    } catch (error: any) {\n      console.error(\"Error updating scenario:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la modification du sc\u00E9nario\",\n        error: error.message\n      });\n    }\n  });\n\n  // Route to delete a scenario\n  app.delete(\"/api/ecos/scenarios/:id\", async (req: Request, res: Response) => {\n    const { id } = req.params;\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      // Use unified database service for scenario deletion\n      await unifiedDb.initialize(); // Ensure database is initialized\n\n      await unifiedDb.deleteScenario(id);\n\n      res.status(200).json({ \n        message: \"Sc\u00E9nario supprim\u00E9 avec succ\u00E8s\"\n      });\n\n    } catch (error: any) {\n      console.error(\"Error deleting scenario:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la suppression du sc\u00E9nario\",\n        error: error.message\n      });\n    }\n  });\n\n  // Route to generate evaluation criteria for a scenario\n  app.post(\"/api/ecos/generate-criteria\", async (req: Request, res: Response) => {\n    const { email, scenarioDescription } = req.body;\n    \n    if (!email || !isAdminAuthorized(email)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    if (!scenarioDescription) {\n      return res.status(400).json({ message: \"Description du sc\u00E9nario requise\" });\n    }\n\n    try {\n      const { promptGenService } = await import('./services/promptGen.service.js');\n      \n      const criteria = await promptGenService.generateEvaluationCriteria(scenarioDescription);\n      \n      res.status(200).json({ \n        message: \"Crit\u00E8res d'\u00E9valuation g\u00E9n\u00E9r\u00E9s avec succ\u00E8s\",\n        criteria\n      });\n\n    } catch (error: any) {\n      console.error(\"Error generating evaluation criteria:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la g\u00E9n\u00E9ration des crit\u00E8res d'\u00E9valuation\",\n        error: error.message\n      });\n    }\n  });\n\n  // New dedicated teacher endpoint for generating and synchronizing criteria\n  app.post(\"/api/teacher/generate-criteria\", async (req: Request, res: Response) => {\n    const { email, textCriteria, scenarioId } = req.body;\n    \n    // Authentication check\n    if (!email || !isAdminAuthorized(email)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    // Validation\n    if (!textCriteria) {\n      return res.status(400).json({ message: \"Description des crit\u00E8res d'\u00E9valuation requise\" });\n    }\n\n    try {\n      console.log(`\uD83D\uDD04 Generating criteria for teacher ${email}`);\n      console.log(`\uD83D\uDCDD Text criteria: ${textCriteria.substring(0, 100)}...`);\n      \n      // Import prompt generation service\n      const { promptGenService } = await import('./services/promptGen.service.js');\n      \n      // Generate structured JSON criteria using AI\n      const generatedCriteria = await promptGenService.generateEvaluationCriteria(textCriteria);\n      console.log('\u2705 Generated criteria:', generatedCriteria);\n\n      // If scenarioId is provided, update the scenario in database\n      if (scenarioId) {\n        console.log(`\uD83D\uDCCA Updating scenario ${scenarioId} with generated criteria`);\n        \n        try {\n          await unifiedDb.initialize();\n          const updatedScenario = await unifiedDb.updateScenario(scenarioId, {\n            evaluationCriteria: generatedCriteria\n          });\n          \n          console.log(`\u2705 Scenario ${scenarioId} updated successfully`);\n          \n          // Return response with database sync confirmation\n          res.status(200).json({\n            message: \"Crit\u00E8res d'\u00E9valuation g\u00E9n\u00E9r\u00E9s et synchronis\u00E9s avec succ\u00E8s\",\n            criteria: generatedCriteria,\n            scenarioUpdated: true,\n            scenarioId: scenarioId,\n            scenarioTitle: updatedScenario.title\n          });\n        } catch (updateError: any) {\n          console.error(`\u274C Failed to update scenario ${scenarioId}:`, updateError.message);\n          \n          // Return criteria even if database sync failed\n          res.status(200).json({\n            message: \"Crit\u00E8res d'\u00E9valuation g\u00E9n\u00E9r\u00E9s avec succ\u00E8s, mais la synchronisation avec la base de donn\u00E9es a \u00E9chou\u00E9\",\n            criteria: generatedCriteria,\n            scenarioUpdated: false,\n            error: updateError.message,\n            warning: `Le sc\u00E9nario ${scenarioId} n'existe pas ou n'a pas pu \u00EAtre mis \u00E0 jour`\n          });\n        }\n      } else {\n        // Return response without database sync\n        res.status(200).json({\n          message: \"Crit\u00E8res d'\u00E9valuation g\u00E9n\u00E9r\u00E9s avec succ\u00E8s\",\n          criteria: generatedCriteria,\n          scenarioUpdated: false\n        });\n      }\n\n    } catch (error: any) {\n      console.error(\"Error in teacher generate-criteria:\", error);\n      res.status(500).json({\n        message: \"Erreur lors de la g\u00E9n\u00E9ration des crit\u00E8res d'\u00E9valuation\",\n        error: error.message,\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      });\n    }\n  });\n\n  // Route to update Pinecone index for a scenario\n  app.post(\"/api/teacher/update-pinecone-index\", async (req: Request, res: Response) => {\n    const { email, scenarioId, pineconeIndex } = req.body;\n    \n    // Authentication check\n    if (!email || !isAdminAuthorized(email)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n    \n    // Validation\n    if (!scenarioId) {\n      return res.status(400).json({ message: \"ID du sc\u00E9nario requis\" });\n    }\n    \n    if (!pineconeIndex) {\n      return res.status(400).json({ message: \"Index Pinecone requis\" });\n    }\n    \n    try {\n      console.log(`\uD83D\uDD04 Updating Pinecone index for scenario ${scenarioId} to ${pineconeIndex}`);\n      \n      await unifiedDb.initialize();\n      const updatedScenario = await unifiedDb.updateScenario(scenarioId, {\n        pineconeIndex: pineconeIndex\n      });\n      \n      console.log(`\u2705 Scenario ${scenarioId} Pinecone index updated successfully`);\n      \n      res.status(200).json({\n        message: \"Index Pinecone synchronis\u00E9 avec succ\u00E8s\",\n        scenarioId: scenarioId,\n        pineconeIndex: pineconeIndex,\n        scenarioTitle: updatedScenario.title,\n        success: true\n      });\n      \n    } catch (error: any) {\n      console.error(`\u274C Failed to update Pinecone index for scenario ${scenarioId}:`, error.message);\n      \n      res.status(500).json({\n        message: \"Erreur lors de la synchronisation de l'index Pinecone\",\n        error: error.message,\n        scenarioId: scenarioId,\n        pineconeIndex: pineconeIndex,\n        success: false\n      });\n    }\n  });\n\n  // Route to get dashboard stats for teachers\n  app.get(\"/api/teacher/dashboard\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    // ROBUST AUTHENTICATION - Force admin email acceptance\n    const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n    const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n    \n    if (!emailStr || !adminEmails.includes(emailStr)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      console.log('\uD83D\uDD27 Fetching teacher dashboard using unified database...');\n      \n      const stats = await unifiedDb.getDashboardStats();\n\n      res.status(200).json(stats);\n    } catch (error: any) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      \n      // Fallback response\n      res.status(200).json({\n        totalScenarios: 0,\n        activeSessions: 0,\n        completedSessions: 0,\n        totalStudents: 0,\n        message: \"Service temporarily unavailable\"\n      });\n    }\n  });\n\n  // Route to get available Pinecone indexes\n  app.get(\"/api/admin/indexes\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    if (!email || !isAdminAuthorized(email as string)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      const { pineconeService } = await import('./services/pinecone.service.js');\n      console.log('\uD83D\uDD04 Fetching Pinecone indexes...');\n      \n      const indexes = await pineconeService.listIndexes();\n      console.log('\u2705 Indexes fetched successfully:', indexes);\n      \n      res.status(200).json({ \n        indexes,\n        message: \"Index r\u00E9cup\u00E9r\u00E9s avec succ\u00E8s\" \n      });\n    } catch (error: any) {\n      console.error(\"Error fetching indexes:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la r\u00E9cup\u00E9ration des index Pinecone\",\n        error: error.message \n      });\n    }\n  });\n\n  // API route to create or verify a student account\n  app.post(\"/api/student\", validateContentType(), validateRequestSize(), validateCreateStudent, async (req: ValidatedRequest, res: Response) => {\n    const schema = z.object({\n      email: z.string().email(\"Format d'email invalide\"),\n    });\n\n    try {\n      const { email } = schema.parse(req.body);\n      const { userId, isNewUser } = await findOrCreateStudent(email);\n      res.status(200).json({ \n        message: \"Compte \u00E9tudiant trait\u00E9 avec succ\u00E8s\", \n        userId, \n        isNewUser \n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Donn\u00E9es invalides\", errors: error.errors });\n      }\n      console.error(\"Error in /api/student:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // Auto-register student endpoint (used by student page)\n  app.post(\"/api/student/auto-register\", validateContentType(), validateRequestSize(), async (req: Request, res: Response) => {\n    const schema = z.object({\n      email: z.string().email(\"Format d'email invalide\"),\n    });\n\n    try {\n      const { email } = schema.parse(req.body);\n      console.log('\uD83D\uDE80 Auto-registering student:', email);\n      \n      const { userId, isNewUser } = await findOrCreateStudent(email);\n      \n      res.status(200).json({ \n        message: \"Auto-registration successful\", \n        userId, \n        isNewUser,\n        email\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid email format\", errors: error.errors });\n      }\n      console.error(\"Error in /api/student/auto-register:\", error);\n      res.status(500).json({ message: \"Auto-registration failed\" });\n    }\n  });\n\n  // API route to start a simulation session (disabled for now - using fallback data)\n  app.post(\"/api/session/start\", async (req: Request, res: Response) => {\n    return res.status(501).json({ \n      message: \"Fonctionnalit\u00E9 temporairement d\u00E9sactiv\u00E9e\",\n      details: \"Cette fonctionnalit\u00E9 sera r\u00E9activ\u00E9e une fois la base de donn\u00E9es connect\u00E9e\"\n    });\n  });\n\n  // API route to get scenarios for a student\n  app.get(\"/api/student/scenarios\", async (req: Request, res: Response) => {\n    const schema = z.object({\n      email: z.string().email(),\n    });\n\n    try {\n      const { email } = schema.parse(req.query);\n      \n      // Use scenario sync service to get scenarios\n      try {\n        const scenarios = await scenarioSyncService.getAvailableScenarios();\n        \n        res.status(200).json({ \n          scenarios: scenarios,\n          training_sessions: [],\n          source: 'database'\n        });\n      } catch (dbError: any) {\n        console.error('Database error:', dbError);\n        // Return empty array if database error\n        res.status(200).json({ \n          scenarios: [],\n          training_sessions: [],\n          source: 'database',\n          error: 'Database connection issue'\n        });\n      }\n\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Donn\u00E9es invalides\", errors: error.errors });\n      }\n      console.error(\"Error in /api/student/scenarios:\", error);\n      res.status(500).json({ message: \"Erreur interne du serveur\" });\n    }\n  });\n\n  // Admin health check \n  app.get(\"/api/admin/health\", async (req: Request, res: Response) => {\n    try {\n      // Use unified database service for health check\n      const healthResult = await unifiedDb.healthCheck();\n      res.status(200).json({ \n        status: 'healthy', \n        message: 'Database connection is working.',\n        metrics: healthResult.metrics,\n        uptime: healthResult.uptime\n      });\n    } catch (error: any) {\n      console.error('Health check failed:', error);\n      res.status(500).json({ \n        status: 'unhealthy', \n        message: 'Database connection failed', \n        error: error.message \n      });\n    }\n  });\n\n  // Route to get students for teacher dashboard\n  app.get(\"/api/teacher/students\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n    \n    // ROBUST AUTHENTICATION - Force admin email acceptance\n    const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n    const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n    \n    if (!emailStr || !adminEmails.includes(emailStr)) {\n      return res.status(403).json({ message: \"Acc\u00E8s non autoris\u00E9\" });\n    }\n\n    try {\n      console.log('\uD83D\uDD27 Fetching teacher students using unified database...');\n      \n      const students = await unifiedDb.getStudents();\n      \n      res.status(200).json({ \n        students,\n        message: \"Student list retrieved successfully\",\n        connected: true\n      });\n      \n    } catch (error: any) {\n      console.error(\"Error fetching teacher students:\", error);\n      res.status(200).json({ \n        students: [],\n        message: \"Service temporarily unavailable\",\n        connected: false,\n        error: error.message\n      });\n    }\n  });\n\n  // Update a training session\n  app.put(\"/api/training-sessions/:id\", ecosSessionRateLimit.middleware(), validateContentType(), validateRequestSize(), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { email, ...updates } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Validate admin access\n      const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n      \n      if (!adminEmails.includes(emailStr)) {\n        return res.status(403).json({ \n          message: \"Acc\u00E8s non autoris\u00E9 - fonction r\u00E9serv\u00E9e aux administrateurs\" \n        });\n      }\n\n      console.log(`\uD83D\uDD04 Updating training session ${id} for admin: ${email}`);\n      \n      // Use unified database service to update training session\n      const updatedSession = await unifiedDb.updateTrainingSession(id, updates, emailStr);\n\n      res.status(200).json({\n        trainingSession: updatedSession,\n        message: \"Training session updated successfully\",\n        success: true\n      });\n      \n    } catch (error) {\n      console.error('Error updating training session:', error);\n      res.status(500).json({\n        error: 'Failed to update training session',\n        code: 'TRAINING_SESSION_UPDATE_FAILED'\n      });\n    }\n  });\n\n  // Delete a training session\n  app.delete(\"/api/training-sessions/:id\", ecosSessionRateLimit.middleware(), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { email } = req.query;\n      \n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Validate admin access\n      const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n      \n      if (!adminEmails.includes(emailStr)) {\n        return res.status(403).json({ \n          message: \"Acc\u00E8s non autoris\u00E9 - fonction r\u00E9serv\u00E9e aux administrateurs\" \n        });\n      }\n\n      console.log(`\uD83D\uDD04 Deleting training session ${id} for admin: ${email}`);\n      \n      // Use unified database service to delete training session\n      await unifiedDb.deleteTrainingSession(id, emailStr);\n\n      res.status(200).json({\n        message: \"Training session deleted successfully\",\n        success: true\n      });\n      \n    } catch (error) {\n      console.error('Error deleting training session:', error);\n      res.status(500).json({\n        error: 'Failed to delete training session',\n        code: 'TRAINING_SESSION_DELETE_FAILED'\n      });\n    }\n  });\n\n  // Get all training sessions\n  app.get(\"/api/training-sessions\", ecosSessionRateLimit.middleware(), async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      \n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Validate admin access\n      const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n      \n      if (!adminEmails.includes(emailStr)) {\n        return res.status(403).json({ \n          message: \"Acc\u00E8s non autoris\u00E9 - fonction r\u00E9serv\u00E9e aux administrateurs\" \n        });\n      }\n\n      console.log(`\uD83D\uDD04 Fetching training sessions for admin: ${email}`);\n      \n      // Use unified database service to get real training sessions\n      const trainingSessions = await unifiedDb.getTrainingSessions(emailStr);\n\n      res.status(200).json({\n        trainingSessions,\n        message: \"Training sessions retrieved successfully\",\n        count: trainingSessions.length\n      });\n      \n    } catch (error) {\n      console.error('Error fetching training sessions:', error);\n      res.status(500).json({\n        error: 'Failed to fetch training sessions',\n        code: 'TRAINING_SESSIONS_FETCH_FAILED'\n      });\n    }\n  });\n\n  // Get specific training session details\n  app.get(\"/api/training-sessions/:id\", ecosSessionRateLimit.middleware(), async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { email } = req.query;\n      \n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Validate admin access\n      const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n      \n      if (!adminEmails.includes(emailStr)) {\n        return res.status(403).json({ \n          message: \"Acc\u00E8s non autoris\u00E9 - fonction r\u00E9serv\u00E9e aux administrateurs\" \n        });\n      }\n\n      console.log(`\uD83D\uDD04 Fetching training session ${id} for admin: ${email}`);\n      \n      // Use unified database service to get real training session\n      const trainingSession = await unifiedDb.getTrainingSessionById(id, emailStr);\n\n      if (!trainingSession) {\n        return res.status(404).json({\n          error: 'Training session not found',\n          code: 'TRAINING_SESSION_NOT_FOUND'\n        });\n      }\n\n      res.status(200).json({\n        trainingSession,\n        message: \"Training session details retrieved successfully\"\n      });\n      \n    } catch (error) {\n      console.error('Error fetching training session details:', error);\n      res.status(500).json({\n        error: 'Failed to fetch training session details',\n        code: 'TRAINING_SESSION_DETAILS_FAILED'\n      });\n    }\n  });\n\n  // Create a new training session\n  app.post(\"/api/training-sessions\", ecosSessionRateLimit.middleware(), validateContentType(), validateRequestSize(), validateCreateTrainingSession, async (req: ValidatedRequest, res: Response) => {\n    try {\n      const { email } = req.body;\n      const { title, description, scenarioIds, studentEmails } = req.body;\n      \n      // Validate admin access\n      const adminEmails = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n      const emailStr = typeof email === 'string' ? email.trim().toLowerCase() : '';\n      \n      if (!adminEmails.includes(emailStr)) {\n        return res.status(403).json({ \n          message: \"Acc\u00E8s non autoris\u00E9 - fonction r\u00E9serv\u00E9e aux administrateurs\" \n        });\n      }\n\n      console.log(`\uD83D\uDD04 Creating training session for admin: ${email}`);\n      console.log(`\uD83D\uDCDD Session details:`, { title, description, scenarioIds, studentEmails });\n      \n      // Use unified database service to create real training session\n      const newTrainingSession = await unifiedDb.createTrainingSession({\n        title,\n        description,\n        createdBy: emailStr,\n        scenarioIds: scenarioIds || [],\n        studentEmails: studentEmails || []\n      });\n\n      res.status(201).json({\n        trainingSession: newTrainingSession,\n        message: \"Training session created successfully\",\n        success: true\n      });\n      \n    } catch (error) {\n      console.error('Error creating training session:', error);\n      res.status(500).json({\n        error: 'Failed to create training session',\n        code: 'TRAINING_SESSION_CREATE_FAILED'\n      });\n    }\n  });\n\n\n  // ECOS Core Functionality Endpoints\n\n  // Get ECOS sessions for a student\n  app.get(\"/api/ecos/sessions\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      \n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Return empty array for now since database operations are disabled\n      // In a real implementation, this would query the database for sessions by email\n      res.status(200).json({\n        sessions: [],\n        message: 'Sessions retrieved successfully'\n      });\n    } catch (error) {\n      console.error('Error getting ECOS sessions:', error);\n      res.status(500).json({\n        error: 'Failed to get ECOS sessions',\n        code: 'SESSIONS_GET_FAILED'\n      });\n    }\n  });\n\n  // Start a new ECOS session\n  app.post(\"/api/ecos/sessions\", ecosSessionRateLimit.middleware(), validateContentType(), validateRequestSize(), validateCreateEcosSession, async (req: ValidatedRequest, res: Response) => {\n    try {\n      const { studentEmail, scenarioId } = req.validatedBody || req.body;\n      \n      if (!studentEmail || !scenarioId) {\n        return res.status(400).json({ \n          error: \"StudentEmail and scenarioId are required\",\n          code: \"MISSING_REQUIRED_FIELDS\"\n        });\n      }\n\n      // Generate session ID that includes scenario ID for easy retrieval\n      const sessionId = `session_${scenarioId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store session in database using UnifiedDatabaseService\n      try {\n        const sessionData = await unifiedDb.createSession({\n          sessionId,\n          studentEmail,\n          scenarioId: parseInt(scenarioId),\n          status: 'active'\n        });\n\n        console.log('\u2705 Created and stored ECOS session:', sessionId, 'in database');\n      } catch (dbError: any) {\n        console.error('\u274C Failed to store session in database:', dbError.message);\n        // Continue with response even if DB storage fails\n        console.warn('\u26A0\uFE0F Session created in memory only due to database error');\n      }\n\n      res.status(201).json({\n        sessionId,\n        scenarioId: parseInt(scenarioId),\n        studentEmail,\n        status: 'active',\n        startTime: new Date(),\n        message: 'ECOS session created successfully'\n      });\n    } catch (error) {\n      console.error('Error creating ECOS session:', error);\n      res.status(500).json({\n        error: 'Failed to create ECOS session',\n        code: 'SESSION_CREATE_FAILED'\n      });\n    }\n  });\n\n  // Get ECOS session details\n  app.get(\"/api/ecos/sessions/:sessionId\", async (req: Request, res: Response) => {\n    try {\n      const { sessionId } = req.params;\n      const { email } = req.query;\n\n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      // Try to get session from database and fetch actual scenario data\n      try {\n        // Extract scenario ID from session ID (format: session_SCENARIOID_timestamp_random)\n        let scenarioId = null;\n        if (sessionId.startsWith('session_')) {\n          const parts = sessionId.split('_');\n          if (parts.length >= 2 && !isNaN(parseInt(parts[1]))) {\n            scenarioId = parseInt(parts[1]);\n          }\n        }\n        \n        if (!scenarioId) {\n          return res.status(400).json({\n            error: 'Invalid session ID format - cannot extract scenario ID',\n            code: 'INVALID_SESSION_ID'\n          });\n        }\n        \n        // Get actual scenario data from database\n        const scenarios = await unifiedDb.getScenarios();\n        const scenario = scenarios.find(s => s.id === scenarioId);\n        \n        if (!scenario) {\n          return res.status(404).json({\n            error: `Scenario ${scenarioId} not found in database`,\n            code: 'SCENARIO_NOT_FOUND'\n          });\n        }\n\n        // Clean and normalize evaluation criteria format\n        const cleanEvaluationCriteria = (criteria: any) => {\n          if (!criteria) return null;\n          \n          // If criteria has both generatedText and evaluation_criteria, use only evaluation_criteria\n          if (criteria.evaluation_criteria && Array.isArray(criteria.evaluation_criteria)) {\n            console.log('\u2705 Using clean evaluation_criteria array format');\n            return criteria.evaluation_criteria;\n          }\n          \n          // If criteria is already a clean array or object, return as is\n          if (Array.isArray(criteria) || (typeof criteria === 'object' && !criteria.generatedText)) {\n            console.log('\u2705 Using existing clean criteria format');\n            return criteria;\n          }\n          \n          // If only generatedText exists, try to extract the proper format\n          if (criteria.generatedText && typeof criteria.generatedText === 'string') {\n            try {\n              console.log('\uD83D\uDD04 Parsing generatedText to extract evaluation criteria');\n              const parsed = JSON.parse(criteria.generatedText.replace(/```json\\n?|\\n?```/g, ''));\n              return parsed.evaluation_criteria || parsed;\n            } catch (e) {\n              console.warn('\u274C Failed to parse generatedText criteria, using original format');\n              return criteria;\n            }\n          }\n          \n          return criteria;\n        };\n\n        // Return session with actual scenario data\n        return res.status(200).json({\n          session: {\n            id: sessionId,\n            status: 'active',\n            startTime: new Date(),\n            studentEmail: email,\n            scenario: {\n              id: scenario.id,\n              title: scenario.title,\n              description: scenario.description,\n              patient_prompt: scenario.patient_prompt,\n              evaluation_criteria: cleanEvaluationCriteria(scenario.evaluation_criteria)\n            }\n          },\n          messages: [],\n          totalMessages: 0,\n          note: 'Session with complete scenario data from database'\n        });\n\n        // This code was moved above and is no longer needed here\n      } catch (dbError) {\n        console.error('\u274C Database error retrieving scenario:', dbError);\n        return res.status(500).json({\n          error: 'Database error - unable to retrieve scenario data',\n          code: 'DATABASE_ERROR',\n          details: process.env.NODE_ENV === 'development' ? dbError.message : 'Internal server error'\n        });\n      }\n    } catch (error) {\n      console.error('Error getting ECOS session:', error);\n      res.status(500).json({\n        error: 'Failed to get ECOS session',\n        code: 'SESSION_GET_FAILED'\n      });\n    }\n  });\n\n  // Update ECOS session (end session)\n  app.put(\"/api/ecos/sessions/:sessionId\", validateContentType(), validateRequestSize(), async (req: Request, res: Response) => {\n    try {\n      const { sessionId } = req.params;\n      const { email, status } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ \n          error: \"Email is required\",\n          code: \"MISSING_EMAIL\"\n        });\n      }\n\n      if (!status) {\n        return res.status(400).json({ \n          error: \"Status is required\",\n          code: \"MISSING_STATUS\"\n        });\n      }\n\n      console.log(`\uD83D\uDCDD Updating session ${sessionId} status to ${status} for ${email}`);\n\n      // Try to update session in database - temporarily disabled\n      try {\n        // Database updates temporarily disabled\n        console.log(`Session ${sessionId} marked as ${status}`);\n      } catch (dbError) {\n        console.warn('Database not available, session update not persisted');\n      }\n\n      res.status(200).json({\n        sessionId,\n        status,\n        updatedAt: new Date(),\n        message: 'Session updated successfully'\n      });\n    } catch (error) {\n      console.error('Error updating ECOS session:', error);\n      res.status(500).json({\n        error: 'Failed to update ECOS session',\n        code: 'SESSION_UPDATE_FAILED'\n      });\n    }\n  });\n\n  // Add message to ECOS session (Chat functionality)\n  app.post(\"/api/ecos/sessions/:sessionId/messages\", apiRateLimit.middleware(), validateContentType(), validateRequestSize(), validateEcosMessage, async (req: ValidatedRequest, res: Response) => {\n    const { email } = req.query;\n\n    // Students can send messages in their own sessions - no admin restriction\n    if (!email) {\n      return res.status(400).json({ message: \"Email requis\" });\n    }\n    try {\n      const { sessionId } = req.params;\n      const { email } = req.query;\n      const { message, role, type } = req.validatedBody || req.body;\n\n      const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store user message in database\n      try {\n        await unifiedDb.storeSessionMessage({\n          sessionId,\n          role: role || 'user',\n          question: message,\n          response: '',\n          content: message\n        });\n        console.log('\u2705 Stored user message in database for session:', sessionId);\n      } catch (dbError: any) {\n        console.warn('\u26A0\uFE0F Failed to store user message:', dbError.message);\n      }\n\n      // Generate AI response (placeholder for now)\n      const aiResponseContent = `I understand your message: \"${message}\". How can I assist you further in this medical scenario?`;\n\n      const aiResponse = {\n        id: `msg_ai_${Date.now()}`,\n        sessionId,\n        content: aiResponseContent,\n        role: 'assistant',\n        type: 'text',\n        senderEmail: 'system@ecos.ai',\n        createdAt: new Date()\n      };\n\n      // Store AI response in database\n      try {\n        await unifiedDb.storeSessionMessage({\n          sessionId,\n          role: 'assistant',\n          question: '',\n          response: aiResponseContent,\n          content: aiResponseContent\n        });\n        console.log('\u2705 Stored AI response in database for session:', sessionId);\n      } catch (dbError: any) {\n        console.warn('\u26A0\uFE0F Failed to store AI response:', dbError.message);\n      }\n\n      res.status(201).json({\n        userMessage: {\n          id: messageId,\n          sessionId,\n          content: message,\n          role: role || 'user',\n          type: type || 'text',\n          senderEmail: email,\n          createdAt: new Date()\n        },\n        aiResponse,\n        message: 'Message added to session successfully'\n      });\n    } catch (error) {\n      console.error('Error adding message to ECOS session:', error);\n      res.status(500).json({\n        error: 'Failed to add message to session',\n        code: 'MESSAGE_ADD_FAILED'\n      });\n    }\n  });\n\n  const slugifyId = (value: string, fallback: string) => {\n    if (!value) return fallback;\n    return value.toString().toLowerCase().replace(/\\s+/g, '_').replace(/[^a-z0-9_]/g, '') || fallback;\n  };\n\n  const normalizeText = (value: string) => {\n    return value\n      ? value\n          .toString()\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .toLowerCase()\n      : '';\n  };\n\n  /**\n   * Extract relevant message excerpts to justify evaluation scores\n   * Instead of keyword matching, we sample representative messages from the conversation\n   */\n  const extractRelevantExcerpts = (messages: any[], maxExcerpts: number = 3) => {\n    if (!Array.isArray(messages) || messages.length === 0) {\n      return [];\n    }\n\n    // Sample messages from different parts of the conversation\n    // to give a representative view: beginning, middle, end\n    const excerpts: any[] = [];\n    const totalMessages = messages.length;\n\n    if (totalMessages <= maxExcerpts) {\n      // If few messages, return all\n      excerpts.push(...messages);\n    } else {\n      // Sample from beginning, middle, and end\n      const indices = [\n        0, // First exchange\n        Math.floor(totalMessages / 2), // Middle\n        totalMessages - 1 // Last exchange\n      ].slice(0, maxExcerpts);\n\n      indices.forEach(index => {\n        if (messages[index]) {\n          excerpts.push(messages[index]);\n        }\n      });\n    }\n\n    return excerpts.map((msg: any) => ({\n      role: msg.role === 'user' ? '\u00C9tudiant' : 'Patient',\n      rawRole: msg.role,\n      excerpt: (msg.question || msg.response || msg.content || '').toString().slice(0, 220),\n      timestamp: msg.timestamp || msg.created_at || msg.updated_at || null\n    }));\n  };\n\n  // Evaluate ECOS session performance\n  app.post(\"/api/ecos/sessions/:sessionId/evaluate\", ecosEvaluationRateLimit.middleware(), validateContentType(), validateRequestSize(), validateEcosEvaluation, async (req: ValidatedRequest, res: Response) => {\n    const { email } = req.query;\n\n    // Students can evaluate their own sessions - no admin restriction\n    if (!email) {\n      return res.status(400).json({ message: \"Email requis\" });\n    }\n    try {\n      const { sessionId } = req.params;\n      const { criteria, responses } = req.validatedBody || req.body;\n\n      // Extract scenarioId from sessionId\n      const scenarioIdMatch = sessionId.match(/^session_(\\d+)_/);\n      const scenarioId = scenarioIdMatch ? parseInt(scenarioIdMatch[1]) : null;\n\n      // Load scenario to get evaluation_criteria from DB\n      const scenarios = await unifiedDb.getScenarios();\n      const scenario = scenarioId ? scenarios.find(s => s.id === scenarioId) : null;\n      console.log('\uD83D\uDD0D [TRACE] Loaded scenario:', scenario?.id, scenario?.title);\n      console.log('\uD83D\uDD0D [TRACE] Scenario has evaluation_criteria?', !!scenario?.evaluation_criteria);\n      const dbCriteria = scenario?.evaluation_criteria || null;\n\n      // Fetch conversation history using the correct method\n      const messages = await unifiedDb.getSessionMessages(sessionId, 50);\n\n      if (!messages || messages.length === 0) {\n        return res.status(400).json({\n          error: \"Pas assez d'\u00E9changes pour une \u00E9valuation - la session \u00E9tait vide\",\n          code: 'INSUFFICIENT_CONTENT',\n          sessionId: sessionId,\n          messagesFound: messages?.length || 0\n        });\n      }\n\n      // Build transcript from messages\n      const transcript = messages.map((msg: any, idx: number) => {\n        const content = msg.question || msg.response || msg.content || '';\n        const role = msg.role === 'user' ? '\u00C9tudiant' : 'Patient';\n        return `${role}: ${content.toString().trim()}`;\n      }).join('\\n---\\n');\n\n      console.log(`\uD83D\uDCCA Building evaluation from ${messages.length} messages for session ${sessionId}`);\n      console.log(`\uD83D\uDCDD Transcript preview:`, transcript.substring(0, 200) + '...');\n\n      // Normalize criteria from DB\n      const normalizeCriteria = (raw: any) => {\n        try {\n          if (!raw) return [] as any[];\n\n          // Handle nested structure: { evaluation_criteria: [...] }\n          if (raw.evaluation_criteria && Array.isArray(raw.evaluation_criteria)) {\n            return raw.evaluation_criteria.map((c: any, i: number) => ({\n              id: (c.id || c.key || c.name || c.label || `crit_${i}`).toString().toLowerCase().replace(/\\s+/g,'_'),\n              name: c.name || c.label || c.id || `Crit\u00E8re ${i+1}`,\n              description: c.description || '',\n              maxScore: typeof c.maxScore === 'number' ? c.maxScore : 4,\n              weight: typeof c.weight === 'number' ? c.weight : (typeof c.poids === 'number' ? c.poids : null),\n              indicators: Array.isArray(c.indicators) ? c.indicators.map((ind: any) => ind.description || ind.name || ind).filter(Boolean) :\n                          Array.isArray(c.elements) ? c.elements.map((el: any) => typeof el === 'string' ? el : el.description || el.name || '').filter(Boolean) :\n                          c.description ? [c.description] : []\n            }));\n          }\n\n          if (Array.isArray(raw)) {\n            return raw.map((c: any, i: number) => ({\n              id: (c.id || c.key || c.name || c.label || `crit_${i}`).toString().toLowerCase().replace(/\\s+/g,'_'),\n              name: c.name || c.label || c.id || `Crit\u00E8re ${i+1}`,\n              description: c.description || '',\n              maxScore: typeof c.maxScore === 'number' ? c.maxScore : 4,\n              weight: typeof c.weight === 'number' ? c.weight : (typeof c.poids === 'number' ? c.poids : null),\n              indicators: Array.isArray(c.indicators) ? c.indicators.map((ind: any) => ind.description || ind.name || ind).filter(Boolean) :\n                          Array.isArray(c.elements) ? c.elements.map((el: any) => typeof el === 'string' ? el : el.description || el.name || '').filter(Boolean) :\n                          c.description ? [c.description] : []\n            }));\n          }\n          if (raw.categories && Array.isArray(raw.categories)) {\n            return raw.categories.map((category: any, i: number) => {\n              const baseId = (category.id || category.name || `category_${i}`).toString().toLowerCase().replace(/\\s+/g, '_');\n              const indicators = Array.isArray(category.indicators)\n                ? category.indicators.map((ind: any) => ind.description || ind.name || '').filter(Boolean)\n                : [];\n\n              return {\n                id: baseId,\n                name: category.name || category.id || `Cat\u00E9gorie ${i + 1}`,\n                description: indicators.length ? indicators.join(' ; ') : (category.description || ''),\n                maxScore: typeof category.maxScore === 'number' ? category.maxScore : 4,\n                weight: typeof category.weight === 'number' ? category.weight : (typeof category.poids === 'number' ? category.poids : null),\n                indicators\n              };\n            });\n          }\n          if (raw.criteria && Array.isArray(raw.criteria)) {\n            return raw.criteria.map((c: any, i: number) => ({\n              id: (c.id || c.key || c.name || c.label || `crit_${i}`).toString().toLowerCase().replace(/\\s+/g,'_'),\n              name: c.name || c.label || c.id || `Crit\u00E8re ${i+1}`,\n              description: c.description || '',\n              maxScore: typeof c.maxScore === 'number' ? c.maxScore : 4,\n              weight: typeof c.weight === 'number' ? c.weight : (typeof c.poids === 'number' ? c.poids : null),\n              indicators: Array.isArray(c.indicators) ? c.indicators.map((ind: any) => ind.description || ind.name || ind).filter(Boolean) :\n                          Array.isArray(c.elements) ? c.elements.map((el: any) => typeof el === 'string' ? el : el.description || el.name || '').filter(Boolean) :\n                          c.description ? [c.description] : []\n            }));\n          }\n          if (typeof raw === 'object') {\n            return Object.keys(raw).map((k, i) => {\n              const value = raw[k];\n\n              // Support both French (elements/poids) and English (indicators/weight) property names\n              const indicators = Array.isArray(value?.indicators)\n                ? value.indicators.map((ind: any) => ind.description || ind.name || ind).filter(Boolean)\n                : Array.isArray(value?.elements)\n                ? value.elements.map((el: any) => typeof el === 'string' ? el : el.description || el.name || '').filter(Boolean)\n                : [];\n\n              const weight = typeof value?.weight === 'number'\n                ? value.weight\n                : typeof value?.poids === 'number'\n                ? value.poids\n                : null;\n\n              return {\n                id: k.toLowerCase().replace(/\\s+/g, '_'),\n                name: k.charAt(0).toUpperCase() + k.slice(1).replace(/_/g, ' '),\n                description: typeof value === 'string' ? value : (value?.description || ''),\n                maxScore: 4,\n                weight,\n                indicators\n              };\n            });\n          }\n          return [] as any[];\n        } catch {\n          return [] as any[];\n        }\n      };\n\n      // DIAGNOSTIC LOGGING - START\n      console.log('\uD83D\uDD0D [TRACE] dbCriteria type:', typeof dbCriteria);\n      console.log('\uD83D\uDD0D [TRACE] dbCriteria is null?', dbCriteria === null);\n      console.log('\uD83D\uDD0D [TRACE] dbCriteria is array?', Array.isArray(dbCriteria));\n      if (dbCriteria && typeof dbCriteria === 'object') {\n        console.log('\uD83D\uDD0D [TRACE] dbCriteria keys:', Object.keys(dbCriteria));\n        console.log('\uD83D\uDD0D [TRACE] dbCriteria sample:', JSON.stringify(dbCriteria).substring(0, 500));\n      } else {\n        console.log('\uD83D\uDD0D [TRACE] dbCriteria value:', dbCriteria);\n      }\n      // DIAGNOSTIC LOGGING - END\n\n      const criteriaList = normalizeCriteria(dbCriteria);\n\n      // DIAGNOSTIC LOGGING - START\n      console.log('\uD83D\uDD0D [TRACE] criteriaList length:', criteriaList.length);\n      if (criteriaList.length > 0) {\n        console.log('\uD83D\uDD0D [TRACE] First criterion:', JSON.stringify(criteriaList[0], null, 2));\n        console.log('\uD83D\uDD0D [TRACE] First criterion indicators:', criteriaList[0].indicators);\n      } else {\n        console.log('\uD83D\uDD0D [TRACE] criteriaList is EMPTY - will use fallback');\n      }\n      // DIAGNOSTIC LOGGING - END\n\n      const fallbackCriteria = [\n        { id: 'communication', name: 'Communication', maxScore: 4 },\n        { id: 'clinical_reasoning', name: 'Raisonnement Clinique', maxScore: 4 },\n        { id: 'empathy', name: 'Empathie', maxScore: 4 },\n        { id: 'professionalism', name: 'Professionnalisme', maxScore: 4 }\n      ];\n      const usedCriteria = criteriaList.length > 0 ? criteriaList : fallbackCriteria;\n\n      // DIAGNOSTIC LOGGING - START\n      console.log('\uD83D\uDD0D [TRACE] Using criteriaList or fallback?', criteriaList.length > 0 ? 'criteriaList' : 'FALLBACK');\n      console.log('\uD83D\uDD0D [TRACE] usedCriteria length:', usedCriteria.length);\n      console.log('\uD83D\uDD0D [TRACE] usedCriteria[0]:', JSON.stringify(usedCriteria[0], null, 2));\n      // DIAGNOSTIC LOGGING - END\n\n      // Build LLM prompt enforcing JSON output\n      const systemPrompt = `Tu es un examinateur ECOS. \u00C9value la performance de l'\u00E9tudiant en te basant UNIQUEMENT sur la transcription fournie.\n\nConsignes :\n- Pour CHAQUE crit\u00E8re, v\u00E9rifie si l'\u00E9tudiant a abord\u00E9 les indicateurs sp\u00E9cifiques list\u00E9s\n- Attribue une note enti\u00E8re de 0 \u00E0 4 bas\u00E9e sur la couverture des indicateurs :\n  * 0 = aucun indicateur trait\u00E9\n  * 1 = abord\u00E9 superficiellement (< 25% des indicateurs)\n  * 2 = partiellement trait\u00E9 (25-50% des indicateurs)\n  * 3 = bien trait\u00E9 (50-75% des indicateurs)\n  * 4 = ma\u00EEtris\u00E9 (> 75% des indicateurs avec qualit\u00E9)\n- Pour chaque crit\u00E8re, identifie 2-3 points forts, 2-3 points faibles, 2-3 actions d'am\u00E9lioration\n- Justifie chaque note en citant des exemples pr\u00E9cis de la transcription\n- Fournis une synth\u00E8se globale avec forces majeures, faiblesses prioritaires, recommandations actionnables\n\nIMPORTANT: Base-toi sur les indicateurs sp\u00E9cifiques fournis pour chaque crit\u00E8re. Ne te contente pas de notions g\u00E9n\u00E9riques.\n\nR\u00E9ponds UNIQUEMENT en JSON valide sans texte avant/apr\u00E8s.\n\nFormat JSON attendu :\n{\n  \"criteria\": [\n    {\n      \"id\": \"crit_id\",\n      \"name\": \"Nom du crit\u00E8re\",\n      \"score\": number,\n      \"maxScore\": 4,\n      \"strengths\": [\"point fort 1 avec r\u00E9f\u00E9rence \u00E0 la transcription\", \"point fort 2\", ...],\n      \"weaknesses\": [\"faiblesse 1 avec exemple\", \"faiblesse 2\", ...],\n      \"actions\": [\"recommandation 1 actionnable\", \"recommandation 2\", ...],\n      \"justification\": \"Justification d\u00E9taill\u00E9e citant des passages de la transcription\"\n    }\n  ],\n  \"overall\": {\n    \"strengths\": [\"force majeure 1\", \"force majeure 2\", ...],\n    \"weaknesses\": [\"faiblesse prioritaire 1\", \"faiblesse prioritaire 2\", ...],\n    \"recommendations\": [\"recommandation 1\", \"recommandation 2\", \"recommandation 3\"],\n    \"summary\": \"Synth\u00E8se en 2-3 phrases r\u00E9sumant la performance globale\"\n  },\n  \"overall_score_percent\": number\n}`;\n\n      const rubricText = usedCriteria.map(c => {\n        const indicatorsList = c.indicators && c.indicators.length > 0\n          ? `\\n  Indicateurs \u00E0 \u00E9valuer:\\n${c.indicators.map(ind => `  * ${ind}`).join('\\n')}`\n          : '';\n        const weight = c.weight ? ` (pond\u00E9ration: ${c.weight}%)` : '';\n        return `- ${c.name} (id: ${c.id})${weight} \u2014 max ${c.maxScore}${indicatorsList}`;\n      }).join('\\n\\n');\n      const userPrompt = `Sc\u00E9nario: ${scenario?.title || 'Inconnu'}\\n\\nCrit\u00E8res d'\u00E9valuation:\\n${rubricText}\\n\\nTranscription de la session:\\n${transcript}`;\n\n      let llmJson: any = null;\n      try {\n        const completion = await openaiService.createCompletion({\n          model: \"gpt-4o\",\n          messages: [\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: userPrompt }\n          ],\n          temperature: 0.3,\n          max_completion_tokens: 2000,\n          response_format: { type: \"json_object\" }\n        });\n        const content = completion.choices?.[0]?.message?.content || '{}';\n        // Strip markdown code blocks that OpenAI sometimes adds despite instructions\n        const cleanedContent = content.replace(/```json\\s*\\n?|```\\s*$/g, '').trim();\n        llmJson = JSON.parse(cleanedContent);\n      } catch (err) {\n        console.warn('\u26A0\uFE0F LLM evaluation parsing failed, using heuristic fallback. Error:', (err as Error).message);\n      }\n\n      // Map LLM output to evaluation structure\n      const evaluationId = `eval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const criteriaResults = (llmJson?.criteria && Array.isArray(llmJson.criteria))\n        ? llmJson.criteria\n        : [];\n\n      const clamp = (n: any) => Math.max(0, Math.min(4, Math.round(Number(n) || 0)));\n      const toArray = (value: any): string[] => {\n        if (!value) return [];\n        if (Array.isArray(value)) return value.map((entry: any) => (entry ?? '').toString()).filter((entry: string) => entry.trim().length > 0);\n        return [value.toString()].filter(Boolean);\n      };\n\n      // Extract representative message excerpts as evidence\n      const conversationExcerpts = extractRelevantExcerpts(messages, 3);\n\n      const weightValues = usedCriteria.map((criterion: any) => {\n        const weight = Number(criterion.weight);\n        return Number.isFinite(weight) && weight > 0 ? weight : 1;\n      });\n      const weightSum = weightValues.reduce((sum: number, w: number) => sum + w, 0) || usedCriteria.length;\n\n      const combinedCriteria = usedCriteria.map((criterion: any, index: number) => {\n        const criterionId = criterion.id;\n        const llmMatch = criteriaResults.find((entry: any) => {\n          const entryId = (entry.id || '').toString().toLowerCase();\n          const entryName = (entry.name || '').toString().toLowerCase();\n          return entryId === criterionId || entryName === criterion.name.toLowerCase();\n        }) || null;\n\n        const llmScore = clamp(llmMatch?.score ?? llmMatch?.note ?? 2);\n        const maxScore = typeof llmMatch?.maxScore === 'number' ? llmMatch.maxScore : 4;\n\n        // Use LLM score directly without heuristic limitation\n        const finalScore = llmScore;\n\n        return {\n          id: criterionId,\n          name: criterion.name,\n          description: criterion.description || '',\n          indicators: criterion.indicators || [],\n          weight: Math.round((weightValues[index] / weightSum) * 10000) / 100, // pourcentage arrondi \u00E0 2 d\u00E9cimales\n          rawWeight: weightValues[index],\n          maxScore,\n          score: finalScore,\n          rawScore: llmScore,\n          strengths: toArray(llmMatch?.strengths),\n          weaknesses: toArray(llmMatch?.weaknesses),\n          actions: toArray(llmMatch?.actions || llmMatch?.recommendations),\n          justification: (llmMatch?.justification || '').toString(),\n          // Add conversation excerpts as evidence instead of keyword matching\n          evidence: conversationExcerpts\n        };\n      });\n\n      const weightedTotal = combinedCriteria.reduce((sum: number, criterion: any) => {\n        return sum + ((criterion.score / criterion.maxScore) * (criterion.rawWeight || 1));\n      }, 0);\n      const weightedPercent = Math.round((weightedTotal / weightSum) * 100);\n\n      const llmOverallPercent = typeof llmJson?.overall_score_percent === 'number'\n        ? Math.round(llmJson.overall_score_percent)\n        : null;\n\n      // Use LLM score or calculated weighted score (no heuristic limitation)\n      const overallScorePercent = llmOverallPercent ?? weightedPercent;\n\n      const uniqueList = (list: string[], limit = 3) => {\n        const seen = new Set<string>();\n        const result: string[] = [];\n        for (const item of list) {\n          const trimmed = item.trim();\n          if (!trimmed || seen.has(trimmed)) continue;\n          seen.add(trimmed);\n          result.push(trimmed);\n          if (result.length >= limit) break;\n        }\n        return result;\n      };\n\n      const overallSection = llmJson?.overall || {};\n      const aggregatedStrengths = uniqueList([\n        ...toArray(overallSection.strengths || llmJson?.strengths),\n        ...combinedCriteria.flatMap((criterion: any) => criterion.strengths)\n      ]);\n      const aggregatedWeaknesses = uniqueList([\n        ...toArray(overallSection.weaknesses || llmJson?.weaknesses),\n        ...combinedCriteria.flatMap((criterion: any) => criterion.weaknesses)\n      ]);\n      const aggregatedRecommendations = uniqueList([\n        ...toArray(overallSection.recommendations || llmJson?.recommendations),\n        ...combinedCriteria.flatMap((criterion: any) => criterion.actions)\n      ]);\n      const summaryText = (overallSection.summary || overallSection.comment || llmJson?.summary || '').toString();\n\n      const evaluation = {\n        overall_score: overallScorePercent,\n        criteria_scores: combinedCriteria.reduce((acc: any, c: any) => { acc[c.id] = Math.round((c.score / c.maxScore) * 100); return acc; }, {}),\n        scores: combinedCriteria.reduce((acc: any, c: any) => { acc[c.id] = c.score; return acc; }, {}),\n        criteria: combinedCriteria,\n        feedback: aggregatedStrengths,\n        recommendations: aggregatedRecommendations,\n        weaknesses: aggregatedWeaknesses,\n        summary: summaryText,\n        llmScorePercent: llmOverallPercent ?? weightedPercent,\n        weightedScorePercent: weightedPercent\n      };\n\n      // Store evaluation in database\n      try {\n        await unifiedDb.createEvaluation({\n          sessionId,\n          scenarioId: scenarioId!,\n          studentEmail: email as string,\n          scores: evaluation.scores,\n          globalScore: overallScorePercent,\n          strengths: Array.isArray(evaluation.feedback) ? evaluation.feedback : [],\n          weaknesses: Array.isArray(evaluation.weaknesses) ? evaluation.weaknesses : [],\n          recommendations: Array.isArray(evaluation.recommendations) ? evaluation.recommendations : [],\n          feedback: `\u00C9valuation automatique - Score IA: ${overallScorePercent}%`,\n          llmScorePercent: evaluation.llmScorePercent,\n          criteriaDetails: evaluation.criteria\n        });\n        console.log(`\u2705 Stored evaluation for session ${sessionId} in database`);\n      } catch (dbError: any) {\n        console.error(`\u274C Failed to store evaluation in database:`, {\n          message: dbError?.message,\n          code: dbError?.code,\n          details: dbError?.details,\n          hint: dbError?.hint,\n          sessionId,\n          studentEmail: email\n        });\n\n        // Return error to frontend - evaluation computed but not persisted\n        return res.status(500).json({\n          error: 'Failed to store evaluation in database',\n          code: 'EVALUATION_STORAGE_FAILED',\n          details: process.env.NODE_ENV === 'development' ? dbError?.message : undefined,\n          evaluation: evaluation  // Still return the computed evaluation\n        });\n      }\n\n      res.status(200).json({\n        evaluationId,\n        sessionId,\n        evaluation,\n        message: 'Session evaluated and stored successfully'\n      });\n    } catch (error) {\n      console.error('Error evaluating ECOS session:', error);\n      res.status(500).json({\n        error: 'Failed to evaluate session',\n        code: 'EVALUATION_FAILED'\n      });\n    }\n  });\n\n  // Get evaluation report for ECOS session\n  app.get(\"/api/ecos/sessions/:sessionId/report\", async (req: Request, res: Response) => {\n    const { email } = req.query;\n\n    // Students can view their own evaluation reports - no admin restriction\n    if (!email) {\n      return res.status(400).json({ message: \"Email requis\" });\n    }\n\n    try {\n      const { sessionId } = req.params;\n\n      const evaluationRecord = await unifiedDb.getEvaluation(sessionId);\n      if (!evaluationRecord) {\n        return res.status(404).json({\n          error: 'Aucune \u00E9valuation enregistr\u00E9e pour cette session',\n          code: 'EVALUATION_NOT_FOUND'\n        });\n      }\n\n      const scenarioIdMatch = sessionId.match(/^session_(\\d+)_/);\n      const scenarioId = scenarioIdMatch ? parseInt(scenarioIdMatch[1]) : null;\n\n      let scenarioTitle = 'Sc\u00E9nario inconnu';\n      let evaluationCriteria: any = null;\n\n      if (scenarioId) {\n        try {\n          const scenarios = await unifiedDb.getScenarios();\n          const scenario = scenarios.find(s => s.id === scenarioId);\n          if (scenario) {\n            scenarioTitle = scenario.title;\n            evaluationCriteria = scenario.evaluation_criteria || null;\n          }\n        } catch (dbError) {\n          console.warn('\u26A0\uFE0F Could not load scenario for evaluation report:', (dbError as Error).message);\n        }\n      }\n\n      const messages = await unifiedDb.getSessionMessages(sessionId, 100);\n\n      const storedScores = evaluationRecord.scores || {};\n      const storedCriteriaDetails = Array.isArray(evaluationRecord.criteria_details) ? evaluationRecord.criteria_details : null;\n\n      const criteria = Object.keys(storedScores).map(key => {\n        const scoreValue = Number(storedScores[key] ?? 0);\n        const storedDetail = storedCriteriaDetails?.find((detail: any) => (detail.id || '').toString() === key);\n        const name = storedDetail?.name || key.replace(/_/g, ' ').replace(/\\b\\w/g, c => c.toUpperCase());\n        const weight = typeof storedDetail?.weight === 'number' ? storedDetail.weight : null;\n\n        // Use stored evidence (conversation excerpts) from evaluation\n        const evidence = storedDetail?.evidence || [];\n\n        return {\n          id: key,\n          name,\n          score: scoreValue,\n          percent: Math.round((scoreValue / (storedDetail?.maxScore || 4)) * 100),\n          maxScore: storedDetail?.maxScore || 4,\n          weight,\n          strengths: Array.isArray(storedDetail?.strengths) ? storedDetail.strengths : [],\n          weaknesses: Array.isArray(storedDetail?.weaknesses) ? storedDetail.weaknesses : [],\n          actions: Array.isArray(storedDetail?.actions) ? storedDetail.actions : [],\n          justification: storedDetail?.justification || '',\n          indicators: Array.isArray(storedDetail?.indicators) ? storedDetail.indicators : [],\n          evidence: evidence  // Conversation excerpts as justification\n        };\n      });\n\n      const overallScore = Number(evaluationRecord.global_score ?? 0);\n      const summary = evaluationRecord.summary || `\u00C9valuation du sc\u00E9nario \"${scenarioTitle}\" bas\u00E9e sur ${messages.length} \u00E9change${messages.length > 1 ? 's' : ''} patient/infirmier.`;\n\n      res.status(200).json({\n        report: {\n          sessionId,\n          scenarioTitle,\n          overallScore,\n          criteria,\n          strengths: evaluationRecord.strengths || [],\n          weaknesses: evaluationRecord.weaknesses || [],\n          recommendations: evaluationRecord.recommendations || [],\n          feedback: evaluationRecord.feedback || null,\n          transcriptMessageCount: messages.length,\n          summary,\n          generatedAt: evaluationRecord.evaluated_at || evaluationRecord.created_at || new Date().toISOString()\n        },\n        message: 'Evaluation report generated successfully'\n      });\n    } catch (error) {\n      console.error('Error generating ECOS session report:', error);\n      res.status(500).json({\n        error: 'Failed to generate evaluation report',\n        code: 'EVALUATION_REPORT_FAILED'\n      });\n    }\n  });\n\n  // Session ID parsing utility function\n  function extractScenarioIdFromSessionId(sessionId: string): number | null {\n    if (!sessionId || typeof sessionId !== 'string') return null;\n    const match = sessionId.match(/^session_(\\d+)_/);\n    if (match && match[1]) {\n      const parsed = parseInt(match[1], 10);\n      return Number.isNaN(parsed) || parsed <= 0 ? null : parsed;\n    }\n    return null;\n  }\n\n  // AI-powered virtual patient simulator with memory and role recognition\n  app.post(\"/api/ecos/patient-simulator\", apiRateLimit.middleware(), validateContentType(), validateRequestSize(), async (req: Request, res: Response) => {\n    try {\n      const { email, sessionId, query, scenarioId: providedScenarioId } = req.body;\n\n      // Try to resolve scenarioId with fallback to sessionId parsing\n      let resolvedScenarioId = providedScenarioId;\n\n      if (!resolvedScenarioId && sessionId) {\n        resolvedScenarioId = extractScenarioIdFromSessionId(sessionId);\n        if (resolvedScenarioId) {\n          console.log(`\uD83D\uDD04 [patient-simulator] Extracted scenarioId ${resolvedScenarioId} from sessionId: ${sessionId}`);\n        }\n      }\n\n      console.log('\uD83D\uDD04 [patient-simulator] Received request:', {\n        email,\n        sessionId,\n        providedScenarioId,\n        resolvedScenarioId,\n        hasQuery: !!query,\n        queryLength: query?.length || 0,\n        scenarioIdType: typeof resolvedScenarioId,\n        scenarioIdValue: resolvedScenarioId,\n        extractionUsed: !providedScenarioId && !!resolvedScenarioId\n      });\n\n      // Import services\n      const { virtualPatientService } = await import('./services/virtual-patient.service.js');\n\n      // Validate input using resolved scenarioId\n      const validation = virtualPatientService.validateInput({\n        sessionId,\n        email,\n        query,\n        scenarioId: resolvedScenarioId\n      });\n\n      if (!validation.valid) {\n        return res.status(400).json({\n          error: validation.error,\n          code: 'INVALID_INPUT'\n        });\n      }\n\n      console.log(`\uD83E\uDD16 AI Patient simulator query from ${email} in session ${sessionId}:`, {\n        query: query.substring(0, 100) + (query.length > 100 ? '...' : ''),\n        resolvedScenarioId,\n        extractionUsed: !providedScenarioId && !!resolvedScenarioId\n      });\n\n      // Validate scenario exists before processing\n      if (resolvedScenarioId) {\n        try {\n          const scenarios = await unifiedDb.getScenarios();\n          const scenario = scenarios.find(s => s.id === parseInt(resolvedScenarioId.toString(), 10));\n          if (!scenario) {\n            return res.status(404).json({\n              error: `Scenario ${resolvedScenarioId} not found`,\n              code: 'SCENARIO_NOT_FOUND'\n            });\n          }\n          console.log(`\u2705 Using scenario: \"${scenario.title}\" (ID: ${resolvedScenarioId}) ${!providedScenarioId ? '[EXTRACTED from sessionId]' : '[PROVIDED directly]'}`);\n        } catch (error) {\n          console.error('\u274C Error validating scenario:', error);\n          return res.status(500).json({\n            error: 'Failed to validate scenario',\n            code: 'SCENARIO_VALIDATION_FAILED'\n          });\n        }\n      }\n\n      // Warning if no scenarioId could be resolved\n      if (!resolvedScenarioId) {\n        console.warn('\u26A0\uFE0F [patient-simulator] No scenarioId provided or extractable - patient will use generic fallback prompt instead of scenario-specific prompt');\n        console.warn('\u26A0\uFE0F [patient-simulator] SessionId pattern for extraction:', sessionId);\n      }\n\n      // Generate AI-powered patient response with memory and role awareness\n      console.log(`\uD83D\uDE80 [patient-simulator] Calling virtualPatientService.generatePatientResponse with resolved scenarioId: ${resolvedScenarioId}`);\n      const patientResponse = await virtualPatientService.generatePatientResponse(\n        sessionId,\n        email,\n        query,\n        resolvedScenarioId\n      );\n\n      // Store conversation in database for analytics and memory persistence\n      try {\n        const memory = virtualPatientService.getConversationMemory?.(sessionId);\n        await unifiedDb.storeConversationExchange({\n          email,\n          question: query,\n          response: patientResponse.response,\n          sessionId,\n          scenarioId: resolvedScenarioId,\n          studentRole: patientResponse.addressing,\n          contextData: {\n            medicalContext: patientResponse.medicalContext,\n            timestamp: new Date().toISOString(),\n            responseMetadata: {\n              aiGenerated: true,\n              memoryUsed: !!memory,\n              conversationLength: memory?.conversationHistory?.length || 0\n            }\n          }\n        });\n\n        await unifiedDb.storeSessionMessage({\n          sessionId,\n          role: 'user',\n          question: query,\n          response: ''\n        });\n\n        await unifiedDb.storeSessionMessage({\n          sessionId,\n          role: 'assistant',\n          question: '',\n          response: patientResponse.response,\n          content: patientResponse.response\n        });\n      } catch (storageError) {\n        console.warn('\u26A0\uFE0F Failed to store conversation exchange:', storageError);\n        // Continue - storage failure shouldn't break patient simulator\n      }\n\n      res.status(200).json({\n        response: patientResponse.response,\n        sessionId,\n        timestamp: new Date(),\n        addressing: patientResponse.addressing,\n        medicalContext: patientResponse.medicalContext,\n        message: 'AI patient response generated with memory and role awareness'\n      });\n\n    } catch (error: any) {\n      console.error('\u274C Error in AI patient simulator:', error);\n      res.status(500).json({\n        error: 'Failed to generate AI patient response',\n        code: 'AI_PATIENT_SIMULATOR_FAILED',\n        details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  return httpServer;\n}\n", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n", "import { Pinecone } from '@pinecone-database/pinecone';\nimport { unifiedDb } from './unified-database.service.js';\n\ninterface PineconeMetadata {\n  title?: string;\n  description?: string;\n  patientPrompt?: string;\n  evaluationCriteria?: any;\n  imageUrl?: string;\n  createdBy?: string;\n}\n\nexport class ScenarioSyncService {\n  private pinecone: Pinecone | null;\n  private indexName: string;\n  private namespace: string;\n  // Remove dbService as we're using the unified database service\n  private pineconeEnabled: boolean;\n\n  constructor() {\n    \n    if (!process.env.PINECONE_API_KEY) {\n      console.warn('\u26A0\uFE0F  PINECONE_API_KEY not provided, Pinecone features will be disabled');\n      this.pinecone = null;\n      this.pineconeEnabled = false;\n      this.indexName = '';\n      this.namespace = '';\n      return;\n    }\n    \n    this.pineconeEnabled = true;\n    \n    this.pinecone = new Pinecone({\n      apiKey: process.env.PINECONE_API_KEY,\n    });\n    \n    this.indexName = process.env.PINECONE_INDEX_NAME || 'arthrologie-du-membre-superieur';\n    this.namespace = process.env.PINECONE_NAMESPACE || 'default';\n  }\n\n  async syncScenariosFromPinecone(): Promise<void> {\n    if (!this.pineconeEnabled || !this.pinecone) {\n      console.log('\u26A0\uFE0F Pinecone not enabled, skipping sync');\n      return;\n    }\n    \n    try {\n      \n      await unifiedDb.initialize(); // Ensure database is initialized\n      \n      const index = this.pinecone.index(this.indexName);\n      \n      // Query all vectors from Pinecone with metadata\n      const queryResponse = await index.namespace(this.namespace).query({\n        vector: new Array(1536).fill(0), // OpenAI embeddings dimension\n        topK: 100, // Get up to 100 scenarios\n        includeMetadata: true,\n        includeValues: false\n      });\n\n      if (!queryResponse.matches || queryResponse.matches.length === 0) {\n        console.log('\uD83D\uDCED No scenarios found in Pinecone');\n        return;\n      }\n\n      console.log(`\uD83D\uDCCB Found ${queryResponse.matches.length} scenarios in Pinecone`);\n\n      for (const match of queryResponse.matches) {\n        if (!match.metadata) continue;\n        \n        const metadata = match.metadata as PineconeMetadata;\n        \n        // Skip if essential fields are missing\n        if (!metadata.title || !metadata.description || !metadata.patientPrompt) {\n          console.log(`\u26A0\uFE0F Skipping scenario ${match.id} - missing essential fields`);\n          continue;\n        }\n\n        try {\n          // Create scenario using unified database service\n          await unifiedDb.initialize(); // Ensure database is initialized\n          await unifiedDb.createScenario({\n            title: metadata.title,\n            description: metadata.description,\n            patientPrompt: metadata.patientPrompt,\n            evaluationCriteria: metadata.evaluationCriteria || {},\n            imageUrl: metadata.imageUrl,\n            createdBy: metadata.createdBy || 'system'\n          });\n          \n          console.log(`\u2705 Created scenario: ${metadata.title}`);\n        } catch (error: any) {\n          if (error.message?.includes('duplicate')) {\n            console.log(`\u26A0\uFE0F Scenario already exists: ${metadata.title}`);\n          } else {\n            console.error(`\u274C Error creating scenario ${metadata.title}:`, error.message);\n          }\n        }\n      }\n\n      console.log('\u2705 Scenario synchronization completed');\n    } catch (error) {\n      console.error('\u274C Error syncing scenarios from Pinecone:', error);\n      throw error;\n    }\n  }\n\n  async getAvailableScenarios(): Promise<any[]> {\n    try {\n      await unifiedDb.initialize(); // Ensure database is initialized\n      return await unifiedDb.getScenarios();\n    } catch (error) {\n      console.error('\u274C Error fetching scenarios from Supabase:', error);\n      throw error;\n    }\n  }\n\n  async getScenarioById(id: string): Promise<any | null> {\n    try {\n      await unifiedDb.initialize(); // Ensure database is initialized\n      const scenarios = await unifiedDb.getScenarios();\n      return scenarios.find(s => s.id === id) || null;\n    } catch (error) {\n      console.error('\u274C Error fetching scenario by ID from Supabase:', error);\n      throw error;\n    }\n  }\n}\n\nexport const scenarioSyncService = new ScenarioSyncService();", "import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    email: string;\n    isAdmin: boolean;\n    iat?: number;\n    exp?: number;\n  };\n}\n\nexport interface JWTPayload {\n  email: string;\n  isAdmin: boolean;\n  iat?: number;\n  exp?: number;\n}\n\nclass AuthenticationService {\n  private readonly jwtSecret: string;\n  private readonly adminEmails: Set<string>;\n  \n  constructor() {\n    // Use environment variable for JWT secret, fallback to a development secret\n    this.jwtSecret = process.env.JWT_SECRET || 'development-secret-key-change-in-production';\n    \n    if (this.jwtSecret === 'development-secret-key-change-in-production' && process.env.NODE_ENV === 'production') {\n      console.error('\u274C SECURITY WARNING: JWT_SECRET not set in production! This is a security risk!');\n    }\n    \n    // Load admin emails from environment variable or use fallback\n    const adminEmailsEnv = process.env.ADMIN_EMAILS;\n    if (adminEmailsEnv) {\n      this.adminEmails = new Set(\n        adminEmailsEnv\n          .split(',')\n          .map(email => email.trim().toLowerCase())\n          .filter(email => this.isValidEmail(email))\n      );\n      console.log(`\u2705 Loaded ${this.adminEmails.size} admin emails from environment`);\n    } else {\n      // No fallback - require proper environment configuration\n      this.adminEmails = new Set();\n      console.error('\u274C No admin emails configured! Set ADMIN_EMAILS environment variable.');\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  public generateToken(email: string): string {\n    if (!this.isValidEmail(email)) {\n      throw new Error('Invalid email format');\n    }\n\n    const payload: JWTPayload = {\n      email: email.toLowerCase().trim(),\n      isAdmin: this.isAdmin(email)\n    };\n\n    return jwt.sign(payload, this.jwtSecret, {\n      expiresIn: '24h',\n      issuer: 'ecos-app',\n      audience: 'ecos-users'\n    });\n  }\n\n  public verifyToken(token: string): JWTPayload {\n    try {\n      const decoded = jwt.verify(token, this.jwtSecret, {\n        issuer: 'ecos-app',\n        audience: 'ecos-users'\n      }) as JWTPayload;\n      \n      return decoded;\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new Error('Token expired');\n      } else if (error instanceof jwt.JsonWebTokenError) {\n        throw new Error('Invalid token');\n      } else {\n        throw new Error('Token verification failed');\n      }\n    }\n  }\n\n  public isAdmin(email: string): boolean {\n    if (!email || typeof email !== 'string') {\n      return false;\n    }\n    return this.adminEmails.has(email.toLowerCase().trim());\n  }\n\n  public getAdminEmails(): string[] {\n    return Array.from(this.adminEmails);\n  }\n}\n\n// Singleton instance\nexport const authService = new AuthenticationService();\n\n// Middleware for JWT token verification\nexport const authenticateToken = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ \n      error: 'Access token required',\n      code: 'TOKEN_MISSING'\n    });\n  }\n\n  try {\n    const user = authService.verifyToken(token);\n    req.user = user;\n    next();\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'Unknown authentication error';\n    return res.status(403).json({ \n      error: errorMessage,\n      code: 'TOKEN_INVALID'\n    });\n  }\n};\n\n// Middleware for admin authorization\nexport const requireAdmin = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  if (!req.user) {\n    return res.status(401).json({ \n      error: 'Authentication required',\n      code: 'AUTH_REQUIRED'\n    });\n  }\n\n  if (!req.user.isAdmin) {\n    return res.status(403).json({ \n      error: 'Admin privileges required',\n      code: 'ADMIN_REQUIRED'\n    });\n  }\n\n  next();\n};\n\n// Enhanced email-based authorization with hardcoded fallback for production reliability\nexport const isAdminAuthorized = (email: string): boolean => {\n  if (!email || typeof email !== 'string') {\n    return false;\n  }\n  \n  const normalizedEmail = email.toLowerCase().trim();\n  \n  // Hardcoded admin emails for production reliability\n  const hardcodedAdmins = ['cherubindavid@gmail.com', 'colombemadoungou@gmail.com'];\n  \n  // Check hardcoded admins first (production fallback)\n  if (hardcodedAdmins.includes(normalizedEmail)) {\n    return true;\n  }\n  \n  // Then check environment-based admins (if configured)\n  return authService.isAdmin(email);\n};\n\n// Middleware for email-based authorization (legacy during transition)\nexport const authorizeByEmail = (req: Request, res: Response, next: NextFunction) => {\n  const email = req.query.email as string || req.body.email as string;\n  \n  if (!email) {\n    return res.status(400).json({ \n      error: 'Email parameter required',\n      code: 'EMAIL_REQUIRED'\n    });\n  }\n\n  if (!isAdminAuthorized(email)) {\n    return res.status(403).json({ \n      error: 'Unauthorized access',\n      code: 'EMAIL_UNAUTHORIZED'\n    });\n  }\n\n  next();\n};", "/**\n * Firebase Authentication Middleware\n *\n * Verifies Firebase ID tokens and manages user authentication/authorization\n */\n\nimport { Request, Response, NextFunction } from 'express';\nimport { firebaseAdminService } from '../services/firebase-admin.service.js';\nimport { unifiedDb } from '../services/unified-database.service.js';\nimport { authService } from './auth.middleware.js';\n\nexport interface FirebaseAuthRequest extends Request {\n  firebaseUser?: {\n    uid: string;\n    email: string;\n    role?: 'admin' | 'student';\n    emailVerified: boolean;\n  };\n  jwtToken?: string;\n}\n\n/**\n * Middleware to verify Firebase ID token and load/create user in Supabase\n */\nexport const verifyFirebaseToken = async (\n  req: FirebaseAuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    // Extract Firebase ID token from Authorization header\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        error: 'No Firebase ID token provided',\n        code: 'FIREBASE_TOKEN_MISSING'\n      });\n    }\n\n    const idToken = authHeader.split('Bearer ')[1];\n\n    // Verify token with Firebase Admin\n    const decodedToken = await firebaseAdminService.verifyIdToken(idToken);\n\n    if (!decodedToken.email) {\n      return res.status(400).json({\n        error: 'Firebase user has no email',\n        code: 'FIREBASE_EMAIL_MISSING'\n      });\n    }\n\n    // Load or create user in Supabase\n    const { user, role } = await getOrCreateSupabaseUser(\n      decodedToken.uid,\n      decodedToken.email\n    );\n\n    // Attach Firebase user info to request\n    req.firebaseUser = {\n      uid: decodedToken.uid,\n      email: decodedToken.email,\n      role: role as 'admin' | 'student',\n      emailVerified: decodedToken.email_verified || false\n    };\n\n    // Generate internal JWT for backward compatibility\n    const jwtToken = authService.generateToken(decodedToken.email);\n    req.jwtToken = jwtToken;\n\n    console.log('\u2705 Firebase user authenticated:', {\n      uid: decodedToken.uid,\n      email: decodedToken.email,\n      role\n    });\n\n    next();\n  } catch (error: any) {\n    console.error('\u274C Firebase token verification failed:', error.message);\n\n    return res.status(403).json({\n      error: error.message || 'Firebase authentication failed',\n      code: 'FIREBASE_AUTH_FAILED'\n    });\n  }\n};\n\n/**\n * Get or create user in Supabase from Firebase UID\n */\nasync function getOrCreateSupabaseUser(\n  firebaseUid: string,\n  email: string\n): Promise<{ user: any; role: string }> {\n  try {\n    // Check if user exists by firebase_uid\n    const existingUser = await unifiedDb.getUserByFirebaseUid(firebaseUid);\n\n    if (existingUser) {\n      const role = await unifiedDb.getUserRole(existingUser.id);\n      console.log('\u2705 Found existing Supabase user:', {\n        id: existingUser.id,\n        email: existingUser.email,\n        role\n      });\n      return { user: existingUser, role };\n    }\n\n    // Check if user exists by email (for migration cases)\n    const userByEmail = await unifiedDb.getUserByEmail(email);\n\n    if (userByEmail) {\n      // Update existing user with firebase_uid\n      await unifiedDb.updateUserFirebaseUid(userByEmail.id, firebaseUid);\n      const role = await unifiedDb.getUserRole(userByEmail.id);\n      console.log('\u2705 Linked existing Supabase user to Firebase:', {\n        id: userByEmail.id,\n        email: userByEmail.email,\n        firebaseUid,\n        role\n      });\n      return { user: userByEmail, role };\n    }\n\n    // Create new user in Supabase\n    const newUser = await unifiedDb.createUser({\n      email,\n      firebaseUid,\n      firstName: null,\n      lastName: null,\n      profileImageUrl: null\n    });\n\n    // Assign default role (student)\n    await unifiedDb.setUserRole(newUser.id, 'student');\n\n    console.log('\u2705 Created new Supabase user from Firebase:', {\n      id: newUser.id,\n      email: newUser.email,\n      firebaseUid,\n      role: 'student'\n    });\n\n    return { user: newUser, role: 'student' };\n  } catch (error) {\n    console.error('\u274C Error getting/creating Supabase user:', error);\n    throw new Error('Failed to sync user with database');\n  }\n}\n\n/**\n * Middleware to require admin role\n */\nexport const requireFirebaseAdmin = (\n  req: FirebaseAuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.firebaseUser) {\n    return res.status(401).json({\n      error: 'Authentication required',\n      code: 'AUTH_REQUIRED'\n    });\n  }\n\n  if (req.firebaseUser.role !== 'admin') {\n    return res.status(403).json({\n      error: 'Admin privileges required',\n      code: 'ADMIN_REQUIRED'\n    });\n  }\n\n  next();\n};\n\n/**\n * Middleware to require student role (or admin)\n */\nexport const requireFirebaseStudent = (\n  req: FirebaseAuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.firebaseUser) {\n    return res.status(401).json({\n      error: 'Authentication required',\n      code: 'AUTH_REQUIRED'\n    });\n  }\n\n  if (req.firebaseUser.role !== 'student' && req.firebaseUser.role !== 'admin') {\n    return res.status(403).json({\n      error: 'Student access required',\n      code: 'STUDENT_REQUIRED'\n    });\n  }\n\n  next();\n};\n\n/**\n * Optional Firebase authentication (doesn't fail if no token)\n */\nexport const optionalFirebaseAuth = async (\n  req: FirebaseAuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    // No token provided, continue without authentication\n    return next();\n  }\n\n  try {\n    const idToken = authHeader.split('Bearer ')[1];\n    const decodedToken = await firebaseAdminService.verifyIdToken(idToken);\n\n    if (decodedToken.email) {\n      const { user, role } = await getOrCreateSupabaseUser(\n        decodedToken.uid,\n        decodedToken.email\n      );\n\n      req.firebaseUser = {\n        uid: decodedToken.uid,\n        email: decodedToken.email,\n        role: role as 'admin' | 'student',\n        emailVerified: decodedToken.email_verified || false\n      };\n\n      const jwtToken = authService.generateToken(decodedToken.email);\n      req.jwtToken = jwtToken;\n    }\n  } catch (error) {\n    // Ignore authentication errors for optional auth\n    console.log('\u26A0\uFE0F Optional Firebase auth failed, continuing without auth');\n  }\n\n  next();\n};\n", "import { z } from 'zod';\nimport { Request, Response, NextFunction } from 'express';\n\nexport interface ValidatedRequest<T = any> extends Request {\n  validatedBody?: T;\n  validatedQuery?: any;\n  validatedParams?: any;\n}\n\nexport class ValidationError extends Error {\n  constructor(\n    message: string,\n    public errors: z.ZodError,\n    public statusCode: number = 400\n  ) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\n// Generic validation middleware factory\nexport const validateRequest = <T>(\n  schema: z.ZodSchema<T>,\n  target: 'body' | 'query' | 'params' = 'body'\n) => {\n  return (req: ValidatedRequest<T>, res: Response, next: NextFunction) => {\n    try {\n      let dataToValidate: any;\n      \n      switch (target) {\n        case 'body':\n          dataToValidate = req.body;\n          break;\n        case 'query':\n          dataToValidate = req.query;\n          break;\n        case 'params':\n          dataToValidate = req.params;\n          break;\n        default:\n          dataToValidate = req.body;\n      }\n\n      const validatedData = schema.parse(dataToValidate);\n      \n      // Attach validated data to request\n      if (target === 'body') {\n        req.validatedBody = validatedData;\n      } else if (target === 'query') {\n        req.validatedQuery = validatedData;\n      } else if (target === 'params') {\n        req.validatedParams = validatedData;\n      }\n      \n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          code: 'VALIDATION_ERROR',\n          details: error.errors.map(err => ({\n            path: err.path.join('.'),\n            message: err.message,\n            code: err.code\n          }))\n        });\n      }\n      \n      console.error('Unexpected validation error:', error);\n      return res.status(500).json({\n        error: 'Internal validation error',\n        code: 'VALIDATION_INTERNAL_ERROR'\n      });\n    }\n  };\n};\n\n// Common validation schemas\n\n// Email validation\nexport const emailSchema = z.object({\n  email: z.string()\n    .email('Invalid email format')\n    .min(5, 'Email must be at least 5 characters')\n    .max(255, 'Email must not exceed 255 characters')\n    .transform(email => email.toLowerCase().trim())\n});\n\n// Authentication schemas\nexport const loginSchema = z.object({\n  email: z.string()\n    .email('Invalid email format')\n    .min(5, 'Email must be at least 5 characters')\n    .transform(email => email.toLowerCase().trim()),\n  password: z.string()\n    .min(1, 'Password is required')\n    .optional() // Optional during transition period\n});\n\n// ECOS Session schemas\nexport const createEcosSessionSchema = z.object({\n  scenarioId: z.string()\n    .min(1, 'Scenario ID is required')\n    .max(255, 'Scenario ID too long'),\n  studentEmail: z.string()\n    .email('Invalid student email format')\n    .transform(email => email.toLowerCase().trim())\n    .optional()\n});\n\nexport const ecosMessageSchema = z.object({\n  message: z.string()\n    .min(1, 'Message content is required')\n    .max(10000, 'Message too long (max 10,000 characters)'),\n  role: z.enum(['user', 'assistant', 'system'])\n    .default('user'),\n  type: z.enum(['text', 'image', 'file'])\n    .default('text')\n});\n\nexport const ecosEvaluationSchema = z.object({\n  criteria: z.record(z.string(), z.number().min(0).max(100))\n    .optional()\n    .default({}),\n  responses: z.array(z.string())\n    .optional()\n    .default([]),\n  notes: z.string()\n    .max(5000, 'Notes too long (max 5,000 characters)')\n    .optional()\n});\n\n// Student creation schema\nexport const createStudentSchema = z.object({\n  email: z.string()\n    .email('Invalid email format')\n    .min(5, 'Email must be at least 5 characters')\n    .max(255, 'Email must not exceed 255 characters')\n    .transform(email => email.toLowerCase().trim()),\n  name: z.string()\n    .min(2, 'Name must be at least 2 characters')\n    .max(100, 'Name must not exceed 100 characters')\n    .optional(),\n  role: z.enum(['student', 'teacher'])\n    .default('student')\n});\n\n// Query parameter schemas\nexport const emailQuerySchema = z.object({\n  email: z.string()\n    .email('Invalid email format')\n    .transform(email => email.toLowerCase().trim())\n});\n\nexport const paginationQuerySchema = z.object({\n  page: z.string()\n    .regex(/^\\d+$/, 'Page must be a number')\n    .transform(val => parseInt(val, 10))\n    .refine(val => val > 0, 'Page must be greater than 0')\n    .default('1'),\n  limit: z.string()\n    .regex(/^\\d+$/, 'Limit must be a number')\n    .transform(val => parseInt(val, 10))\n    .refine(val => val > 0 && val <= 100, 'Limit must be between 1 and 100')\n    .default('20')\n});\n\n// URL parameter schemas\nexport const sessionIdParamSchema = z.object({\n  sessionId: z.string()\n    .min(1, 'Session ID is required')\n    .regex(/^session_\\d+_[a-z0-9]+$/, 'Invalid session ID format')\n});\n\nexport const userIdParamSchema = z.object({\n  userId: z.string()\n    .min(1, 'User ID is required')\n    .max(255, 'User ID too long')\n});\n\n// Scenario schemas\nexport const scenarioQuerySchema = z.object({\n  category: z.string()\n    .max(50, 'Category too long')\n    .optional(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced', 'expert'])\n    .optional(),\n  tags: z.string()\n    .transform(str => str.split(',').map(tag => tag.trim()).filter(Boolean))\n    .optional()\n});\n\n// Training session schemas\nexport const createTrainingSessionSchema = z.object({\n  email: z.string().email('Valid email is required'),\n  title: z.string()\n    .min(3, 'Title must be at least 3 characters')\n    .max(200, 'Title too long'),\n  description: z.string()\n    .max(1000, 'Description too long')\n    .optional(),\n  scenarioIds: z.array(z.union([z.string(), z.number()]))\n    .min(1, 'At least one scenario is required')\n    .max(10, 'Too many scenarios (max 10)')\n    .transform(ids => ids.map(id => typeof id === 'number' ? id : parseInt(id.toString()))),\n  studentEmails: z.array(z.string().email())\n    .optional()\n    .default([])\n    .refine(emails => emails.length >= 0, 'Student emails must be valid')\n});\n\n// Comprehensive validation middleware for common patterns\nexport const validateEmailQuery = validateRequest(emailQuerySchema, 'query');\nexport const validateEmailBody = validateRequest(emailSchema, 'body');\nexport const validateLogin = validateRequest(loginSchema, 'body');\nexport const validateCreateStudent = validateRequest(createStudentSchema, 'body');\nexport const validateCreateEcosSession = validateRequest(createEcosSessionSchema, 'body');\nexport const validateEcosMessage = validateRequest(ecosMessageSchema, 'body');\nexport const validateEcosEvaluation = validateRequest(ecosEvaluationSchema, 'body');\nexport const validateSessionIdParam = validateRequest(sessionIdParamSchema, 'params');\nexport const validatePaginationQuery = validateRequest(paginationQuerySchema, 'query');\nexport const validateScenarioQuery = validateRequest(scenarioQuerySchema, 'query');\nexport const validateCreateTrainingSession = validateRequest(createTrainingSessionSchema, 'body');\n\n// Sanitization helpers\nexport const sanitizeString = (str: string, maxLength: number = 1000): string => {\n  return str\n    .trim()\n    .substring(0, maxLength)\n    .replace(/[<>]/g, '') // Remove potential HTML tags\n    .replace(/\\s+/g, ' '); // Normalize whitespace\n};\n\nexport const sanitizeEmail = (email: string): string => {\n  return email.toLowerCase().trim();\n};\n\n// Request size validation middleware\nexport const validateRequestSize = (maxSizeBytes: number = 1024 * 1024) => { // 1MB default\n  return (req: Request, res: Response, next: NextFunction) => {\n    const contentLength = req.get('content-length');\n    \n    if (contentLength && parseInt(contentLength, 10) > maxSizeBytes) {\n      return res.status(413).json({\n        error: 'Request too large',\n        code: 'REQUEST_TOO_LARGE',\n        maxSize: `${Math.round(maxSizeBytes / 1024)}KB`\n      });\n    }\n    \n    next();\n  };\n};\n\n// Content type validation middleware\nexport const validateContentType = (allowedTypes: string[] = ['application/json']) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const contentType = req.get('content-type');\n    \n    if (req.method !== 'GET' && req.method !== 'DELETE' && !contentType) {\n      return res.status(400).json({\n        error: 'Content-Type header required',\n        code: 'CONTENT_TYPE_REQUIRED'\n      });\n    }\n    \n    if (contentType && !allowedTypes.some(type => contentType.includes(type))) {\n      return res.status(415).json({\n        error: 'Unsupported media type',\n        code: 'UNSUPPORTED_MEDIA_TYPE',\n        allowedTypes\n      });\n    }\n    \n    next();\n  };\n};", "import { Request, Response, NextFunction } from 'express';\n\nexport interface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  message?: string;\n  standardHeaders?: boolean;\n  legacyHeaders?: boolean;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n  keyGenerator?: (req: Request) => string;\n}\n\ninterface RateLimitInfo {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n}\n\nclass InMemoryRateLimiter {\n  private requests = new Map<string, RateLimitInfo>();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Clean up expired entries every 5 minutes\n    this.cleanupInterval = setInterval(() => this.cleanup(), 5 * 60 * 1000);\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    for (const [key, info] of this.requests) {\n      if (now > info.resetTime) {\n        this.requests.delete(key);\n      }\n    }\n  }\n\n  public hit(key: string, windowMs: number): { count: number; resetTime: number; exceeded: boolean } {\n    const now = Date.now();\n    const existing = this.requests.get(key);\n\n    if (!existing || now > existing.resetTime) {\n      // New window or expired window\n      const resetTime = now + windowMs;\n      this.requests.set(key, {\n        count: 1,\n        resetTime,\n        firstRequest: now\n      });\n      return { count: 1, resetTime, exceeded: false };\n    }\n\n    // Increment existing count\n    existing.count++;\n    this.requests.set(key, existing);\n    \n    return {\n      count: existing.count,\n      resetTime: existing.resetTime,\n      exceeded: false // Will be determined by the rate limiter\n    };\n  }\n\n  public reset(key: string): void {\n    this.requests.delete(key);\n  }\n\n  public getStats(): { totalKeys: number; memoryUsage: string } {\n    const memoryUsage = process.memoryUsage();\n    return {\n      totalKeys: this.requests.size,\n      memoryUsage: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`\n    };\n  }\n\n  public destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.requests.clear();\n  }\n}\n\n// Global rate limiter instance\nconst globalRateLimiter = new InMemoryRateLimiter();\n\nexport class RateLimiter {\n  private config: Required<RateLimitConfig>;\n\n  constructor(config: RateLimitConfig) {\n    this.config = {\n      windowMs: config.windowMs,\n      maxRequests: config.maxRequests,\n      message: config.message || 'Too many requests, please try again later',\n      standardHeaders: config.standardHeaders ?? true,\n      legacyHeaders: config.legacyHeaders ?? false,\n      skipSuccessfulRequests: config.skipSuccessfulRequests ?? false,\n      skipFailedRequests: config.skipFailedRequests ?? false,\n      keyGenerator: config.keyGenerator || this.defaultKeyGenerator\n    };\n  }\n\n  private defaultKeyGenerator(req: Request): string {\n    // Use IP address as default key, with forwarded IP support\n    const forwarded = req.headers['x-forwarded-for'] as string;\n    const ip = forwarded ? forwarded.split(',')[0].trim() : req.ip || req.connection.remoteAddress || 'unknown';\n    return `rate_limit:${ip}`;\n  }\n\n  public middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const key = this.config.keyGenerator(req);\n      const result = globalRateLimiter.hit(key, this.config.windowMs);\n      \n      const isExceeded = result.count > this.config.maxRequests;\n      const resetTimeSeconds = Math.ceil((result.resetTime - Date.now()) / 1000);\n\n      // Add rate limit headers\n      if (this.config.standardHeaders) {\n        res.set({\n          'RateLimit-Limit': this.config.maxRequests.toString(),\n          'RateLimit-Remaining': Math.max(0, this.config.maxRequests - result.count).toString(),\n          'RateLimit-Reset': new Date(result.resetTime).toISOString()\n        });\n      }\n\n      if (this.config.legacyHeaders) {\n        res.set({\n          'X-RateLimit-Limit': this.config.maxRequests.toString(),\n          'X-RateLimit-Remaining': Math.max(0, this.config.maxRequests - result.count).toString(),\n          'X-RateLimit-Reset': Math.ceil(result.resetTime / 1000).toString()\n        });\n      }\n\n      if (isExceeded) {\n        res.set('Retry-After', resetTimeSeconds.toString());\n        \n        return res.status(429).json({\n          error: this.config.message,\n          code: 'RATE_LIMIT_EXCEEDED',\n          retryAfter: resetTimeSeconds,\n          limit: this.config.maxRequests,\n          windowMs: this.config.windowMs,\n          resetTime: new Date(result.resetTime).toISOString()\n        });\n      }\n\n      next();\n    };\n  }\n\n  public reset(req: Request): void {\n    const key = this.config.keyGenerator(req);\n    globalRateLimiter.reset(key);\n  }\n}\n\n// Predefined rate limiters for common use cases\n\n// Strict rate limiter for authentication endpoints\nexport const authRateLimit = new RateLimiter({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  maxRequests: process.env.NODE_ENV === 'production' ? 5 : 50, // More lenient in development\n  message: 'Too many authentication attempts, please try again later',\n  skipSuccessfulRequests: true // Only count failed attempts\n});\n\n// Firebase authentication rate limiter (more lenient for token exchanges)\nexport const firebaseAuthRateLimit = new RateLimiter({\n  windowMs: 1 * 60 * 1000, // 1 minute (shorter window for development)\n  maxRequests: process.env.NODE_ENV === 'production' ? 20 : 1000, // Very lenient in development\n  message: 'Too many Firebase authentication requests, please try again later',\n  skipSuccessfulRequests: true // Only count failed attempts in development\n});\n\n// Moderate rate limiter for API endpoints\nexport const apiRateLimit = new RateLimiter({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  maxRequests: 60, // 60 requests per minute\n  message: 'API rate limit exceeded, please slow down'\n});\n\n// Lenient rate limiter for general endpoints\nexport const generalRateLimit = new RateLimiter({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  maxRequests: 100, // 100 requests per minute\n  message: 'Rate limit exceeded, please try again later'\n});\n\n// Strict rate limiter for expensive operations\nexport const strictRateLimit = new RateLimiter({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  maxRequests: 10, // 10 requests per minute\n  message: 'Rate limit exceeded for this operation'\n});\n\n// Dedicated limiter for ECOS evaluations; isolates quota per session\nexport const ecosEvaluationRateLimit = new RateLimiter({\n  windowMs: 1 * 60 * 1000, // 1 minute\n  maxRequests: 10, // 10 evaluations per minute per session/email combo\n  message: 'Rate limit exceeded for this evaluation',\n  keyGenerator: (req: Request) => {\n    const email = ((req.query.email as string) || '').toLowerCase() || 'unknown';\n    const sessionId = req.params?.sessionId || 'unknown';\n    return `ecos_eval:${email}:${sessionId}`;\n  }\n});\n\n// Email-based rate limiter for admin operations\nexport const emailBasedRateLimit = new RateLimiter({\n  windowMs: 5 * 60 * 1000, // 5 minutes\n  maxRequests: 30, // 30 requests per 5 minutes per email\n  message: 'Too many requests for this email address',\n  keyGenerator: (req: Request) => {\n    const email = (req.query.email as string) || (req.body?.email as string) || 'unknown';\n    return `email_rate_limit:${email.toLowerCase()}`;\n  }\n});\n\n// ECOS session rate limiter\nexport const ecosSessionRateLimit = new RateLimiter({\n  windowMs: 10 * 60 * 1000, // 10 minutes\n  maxRequests: 20, // 20 ECOS operations per 10 minutes\n  message: 'Too many ECOS operations, please wait before creating more sessions',\n  keyGenerator: (req: Request) => {\n    const email = (req.query.email as string) || (req.body?.email as string) || req.ip || 'unknown';\n    return `ecos_rate_limit:${email.toLowerCase()}`;\n  }\n});\n\n// Create custom rate limiter\nexport const createRateLimit = (config: RateLimitConfig) => {\n  return new RateLimiter(config);\n};\n\n// Rate limiter status endpoint middleware\nexport const rateLimitStatus = () => {\n  return (req: Request, res: Response) => {\n    const stats = globalRateLimiter.getStats();\n    res.status(200).json({\n      rateLimit: {\n        activeKeys: stats.totalKeys,\n        memoryUsage: stats.memoryUsage,\n        timestamp: new Date().toISOString()\n      }\n    });\n  };\n};\n\n// Graceful shutdown\nexport const shutdownRateLimiter = () => {\n  globalRateLimiter.destroy();\n};\n\n// Export for advanced usage\nexport { globalRateLimiter };\n\n// Helper function to check if request is rate limited without incrementing\nexport const checkRateLimit = (req: Request, config: RateLimitConfig): { \n  exceeded: boolean; \n  remaining: number; \n  resetTime: Date \n} => {\n  const keyGen = config.keyGenerator || ((r: Request) => `rate_limit:${r.ip}`);\n  const key = keyGen(req);\n  \n  // This is a simplified check - in a full implementation you'd want to peek without incrementing\n  const result = globalRateLimiter.hit(key, config.windowMs);\n  \n  return {\n    exceeded: result.count > config.maxRequests,\n    remaining: Math.max(0, config.maxRequests - result.count),\n    resetTime: new Date(result.resetTime)\n  };\n};\n", "import { logger } from \"../services/logger.service.js\";\n\nexport enum CircuitBreakerState {\n  CLOSED = 'CLOSED',\n  OPEN = 'OPEN',\n  HALF_OPEN = 'HALF_OPEN'\n}\n\nexport interface CircuitBreakerOptions {\n  failureThreshold: number;\n  recoveryTimeMs: number;\n  monitoringPeriodMs: number;\n  expectedFailureRate: number;\n}\n\nexport class CircuitBreakerError extends Error {\n  constructor(message: string, public state: CircuitBreakerState) {\n    super(message);\n    this.name = 'CircuitBreakerError';\n  }\n}\n\nexport class DatabaseCircuitBreaker {\n  private state: CircuitBreakerState = CircuitBreakerState.CLOSED;\n  private failureCount = 0;\n  private lastFailureTime = 0;\n  private lastSuccessTime = Date.now();\n  private requestCount = 0;\n  private options: CircuitBreakerOptions;\n\n  constructor(options: Partial<CircuitBreakerOptions> = {}) {\n    this.options = {\n      failureThreshold: 10, // Reasonable threshold - not too aggressive\n      recoveryTimeMs: 60000, // 1 minute recovery time for proper database recovery\n      monitoringPeriodMs: 300000, // 5 minutes monitoring window for stability\n      expectedFailureRate: 0.5, // 50% failure rate threshold - reasonable for database issues\n      ...options\n    };\n    \n    // Grace period during startup - disable circuit breaker for first 60 seconds\n    this.startupGracePeriod = 60000;\n    this.startupTime = Date.now();\n  }\n  \n  private startupGracePeriod: number;\n  private startupTime: number;\n\n  async execute<T>(operation: () => Promise<T>, fallback?: () => Promise<T>): Promise<T> {\n    // During startup grace period, allow all requests\n    if (Date.now() - this.startupTime < this.startupGracePeriod) {\n      try {\n        return await operation();\n      } catch (error) {\n        console.log('\u26A0\uFE0F Startup grace period - ignoring failure for circuit breaker');\n        throw error;\n      }\n    }\n    \n    if (this.state === CircuitBreakerState.OPEN) {\n      if (this.shouldAttemptReset()) {\n        this.state = CircuitBreakerState.HALF_OPEN;\n        console.log('Circuit breaker moved to HALF_OPEN state - attempting recovery');\n      } else {\n        if (fallback) {\n          console.log('Circuit breaker OPEN - using fallback');\n          return await fallback();\n        }\n        throw new CircuitBreakerError(\n          `Circuit breaker is OPEN. Service unavailable. Will retry after ${Math.ceil((this.lastFailureTime + this.options.recoveryTimeMs - Date.now()) / 1000)}s`,\n          this.state\n        );\n      }\n    }\n\n    this.requestCount++;\n    \n    try {\n      const result = await this.executeWithTimeout(operation, 10000); // 10 second timeout\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      \n      if (fallback && this.state === CircuitBreakerState.OPEN) {\n        console.log('Circuit breaker opened due to failure - using fallback');\n        return await fallback();\n      }\n      \n      throw error;\n    }\n  }\n\n  private async executeWithTimeout<T>(operation: () => Promise<T>, timeoutMs: number): Promise<T> {\n    const timeoutPromise = new Promise<never>((_, reject) => {\n      setTimeout(() => reject(new Error('Operation timeout')), timeoutMs);\n    });\n\n    return Promise.race([operation(), timeoutPromise]);\n  }\n\n  private onSuccess(): void {\n    this.failureCount = 0;\n    this.lastSuccessTime = Date.now();\n    \n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      console.log('Circuit breaker recovered - moving to CLOSED state');\n      this.state = CircuitBreakerState.CLOSED;\n    }\n  }\n\n  private onFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.state === CircuitBreakerState.HALF_OPEN) {\n      console.log('Circuit breaker failure during recovery - moving back to OPEN state');\n      this.state = CircuitBreakerState.OPEN;\n      return;\n    }\n\n    if (this.shouldOpenCircuit()) {\n      console.log(`Circuit breaker opening due to ${this.failureCount} failures`);\n      this.state = CircuitBreakerState.OPEN;\n    }\n  }\n\n  private shouldOpenCircuit(): boolean {\n    if (this.failureCount >= this.options.failureThreshold) {\n      return true;\n    }\n\n    // Also consider failure rate over time\n    const now = Date.now();\n    const timeSinceLastSuccess = now - this.lastSuccessTime;\n    \n    if (timeSinceLastSuccess > this.options.monitoringPeriodMs && this.requestCount > 10) {\n      const failureRate = this.failureCount / this.requestCount;\n      return failureRate > this.options.expectedFailureRate;\n    }\n\n    return false;\n  }\n\n  private shouldAttemptReset(): boolean {\n    const now = Date.now();\n    return now - this.lastFailureTime >= this.options.recoveryTimeMs;\n  }\n\n  public getStatus() {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      requestCount: this.requestCount,\n      lastFailureTime: this.lastFailureTime,\n      lastSuccessTime: this.lastSuccessTime,\n      nextRetryTime: this.state === CircuitBreakerState.OPEN \n        ? this.lastFailureTime + this.options.recoveryTimeMs \n        : null\n    };\n  }\n\n  public reset(): void {\n    this.state = CircuitBreakerState.CLOSED;\n    this.failureCount = 0;\n    this.requestCount = 0;\n    this.lastSuccessTime = Date.now();\n    console.log('Circuit breaker manually reset');\n  }\n}\n\n// Global circuit breaker instance for database operations\nexport const databaseCircuitBreaker = new DatabaseCircuitBreaker({\n  failureThreshold: 10, // Not too aggressive - allow some transient failures\n  recoveryTimeMs: 60000, // 1 minute recovery time for proper database recovery\n  monitoringPeriodMs: 300000, // 5 minutes monitoring window for better stability\n  expectedFailureRate: 0.5 // 50% failure rate before opening - reasonable for database issues\n});", "interface LogContext {\n  [key: string]: any;\n}\n\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  service?: string;\n  requestId?: string;\n}\n\nexport enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  DEBUG = 'debug',\n  TRACE = 'trace'\n}\n\nclass Logger {\n  private service: string;\n  private isDevelopment: boolean;\n\n  constructor(serviceName: string = 'app') {\n    this.service = serviceName;\n    this.isDevelopment = process.env.NODE_ENV !== 'production';\n  }\n\n  private formatLog(level: LogLevel, message: string, context?: LogContext): LogEntry {\n    return {\n      timestamp: new Date().toISOString(),\n      level,\n      message,\n      context,\n      service: this.service,\n      requestId: this.getCurrentRequestId()\n    };\n  }\n\n  private getCurrentRequestId(): string | undefined {\n    // This can be enhanced with async local storage or request context\n    return undefined;\n  }\n\n  private log(level: LogLevel, message: string, context?: LogContext): void {\n    const entry = this.formatLog(level, message, context);\n\n    if (this.isDevelopment) {\n      // Pretty print for development\n      const emoji = this.getLevelEmoji(level);\n      const coloredLevel = this.getColoredLevel(level);\n      \n      if (context && Object.keys(context).length > 0) {\n        console.log(`${emoji} ${coloredLevel} [${this.service}] ${message}`, context);\n      } else {\n        console.log(`${emoji} ${coloredLevel} [${this.service}] ${message}`);\n      }\n    } else {\n      // JSON format for production\n      console.log(JSON.stringify(entry));\n    }\n  }\n\n  private getLevelEmoji(level: LogLevel): string {\n    switch (level) {\n      case LogLevel.ERROR: return '\u274C';\n      case LogLevel.WARN: return '\u26A0\uFE0F';\n      case LogLevel.INFO: return '\u2705';\n      case LogLevel.DEBUG: return '\uD83D\uDD0D';\n      case LogLevel.TRACE: return '\uD83D\uDCDD';\n      default: return '\u2139\uFE0F';\n    }\n  }\n\n  private getColoredLevel(level: LogLevel): string {\n    // Return colored level for development (can be enhanced with actual colors)\n    return level.toUpperCase();\n  }\n\n  error(message: string, context?: LogContext): void {\n    this.log(LogLevel.ERROR, message, context);\n  }\n\n  warn(message: string, context?: LogContext): void {\n    this.log(LogLevel.WARN, message, context);\n  }\n\n  info(message: string, context?: LogContext): void {\n    this.log(LogLevel.INFO, message, context);\n  }\n\n  debug(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      this.log(LogLevel.DEBUG, message, context);\n    }\n  }\n\n  trace(message: string, context?: LogContext): void {\n    if (this.isDevelopment) {\n      this.log(LogLevel.TRACE, message, context);\n    }\n  }\n\n  // Database operation logging\n  database(operation: string, duration?: number, context?: LogContext): void {\n    const logContext = {\n      operation,\n      duration: duration ? `${duration}ms` : undefined,\n      ...context\n    };\n    this.info(`Database ${operation}`, logContext);\n  }\n\n  // HTTP request logging\n  request(method: string, path: string, statusCode?: number, duration?: number, context?: LogContext): void {\n    const logContext = {\n      method,\n      path,\n      statusCode,\n      duration: duration ? `${duration}ms` : undefined,\n      ...context\n    };\n\n    if (statusCode && statusCode >= 400) {\n      this.error(`HTTP ${method} ${path}`, logContext);\n    } else {\n      this.info(`HTTP ${method} ${path}`, logContext);\n    }\n  }\n\n  // Service initialization logging\n  service(serviceName: string, status: 'starting' | 'ready' | 'error', duration?: number, context?: LogContext): void {\n    const logContext = {\n      service: serviceName,\n      status,\n      duration: duration ? `${duration}ms` : undefined,\n      ...context\n    };\n\n    switch (status) {\n      case 'starting':\n        this.info(`Service ${serviceName} starting`, logContext);\n        break;\n      case 'ready':\n        this.info(`Service ${serviceName} ready`, logContext);\n        break;\n      case 'error':\n        this.error(`Service ${serviceName} failed`, logContext);\n        break;\n    }\n  }\n}\n\n// Create logger instances\nexport const logger = new Logger('ecos-app');\nexport const dbLogger = new Logger('database');\nexport const authLogger = new Logger('auth');\nexport const apiLogger = new Logger('api');\n\n// Legacy console replacement (for gradual migration)\nexport const createLogger = (serviceName: string) => new Logger(serviceName);", "import { Request, Response, NextFunction } from 'express';\nimport { z } from 'zod';\nimport { CircuitBreakerError } from './circuit-breaker.middleware.js';\nimport { logger } from '../services/logger.service.js';\n\nexport enum ErrorCode {\n  // General errors\n  INTERNAL_ERROR = 'INTERNAL_ERROR',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',\n  \n  // Authentication & Authorization\n  AUTH_REQUIRED = 'AUTH_REQUIRED',\n  AUTH_INVALID = 'AUTH_INVALID',\n  AUTH_EXPIRED = 'AUTH_EXPIRED',\n  PERMISSION_DENIED = 'PERMISSION_DENIED',\n  \n  // Rate limiting\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  \n  // Validation\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  INVALID_EMAIL = 'INVALID_EMAIL',\n  INVALID_INPUT = 'INVALID_INPUT',\n  \n  // Database\n  DATABASE_ERROR = 'DATABASE_ERROR',\n  DATABASE_UNAVAILABLE = 'DATABASE_UNAVAILABLE',\n  CIRCUIT_BREAKER_OPEN = 'CIRCUIT_BREAKER_OPEN',\n  \n  // ECOS specific\n  SESSION_NOT_FOUND = 'SESSION_NOT_FOUND',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  SCENARIO_NOT_FOUND = 'SCENARIO_NOT_FOUND',\n  EVALUATION_FAILED = 'EVALUATION_FAILED',\n  \n  // External services\n  EXTERNAL_SERVICE_ERROR = 'EXTERNAL_SERVICE_ERROR',\n  OPENAI_ERROR = 'OPENAI_ERROR',\n  PINECONE_ERROR = 'PINECONE_ERROR'\n}\n\nexport interface ErrorDetails {\n  field?: string;\n  value?: any;\n  constraint?: string;\n  message?: string;\n}\n\nexport class APIError extends Error {\n  public statusCode: number;\n  public code: ErrorCode;\n  public details?: ErrorDetails[];\n  public timestamp: Date;\n  public requestId?: string;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    code: ErrorCode = ErrorCode.INTERNAL_ERROR,\n    details?: ErrorDetails[]\n  ) {\n    super(message);\n    this.name = 'APIError';\n    this.statusCode = statusCode;\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date();\n  }\n\n  public toJSON() {\n    return {\n      error: this.message,\n      code: this.code,\n      statusCode: this.statusCode,\n      details: this.details,\n      timestamp: this.timestamp.toISOString(),\n      requestId: this.requestId\n    };\n  }\n\n  // Factory methods for common errors\n  static badRequest(message: string, details?: ErrorDetails[]): APIError {\n    return new APIError(message, 400, ErrorCode.INVALID_REQUEST, details);\n  }\n\n  static unauthorized(message: string = 'Authentication required'): APIError {\n    return new APIError(message, 401, ErrorCode.AUTH_REQUIRED);\n  }\n\n  static forbidden(message: string = 'Permission denied'): APIError {\n    return new APIError(message, 403, ErrorCode.PERMISSION_DENIED);\n  }\n\n  static notFound(message: string = 'Resource not found'): APIError {\n    return new APIError(message, 404, ErrorCode.RESOURCE_NOT_FOUND);\n  }\n\n  static validationError(message: string, details?: ErrorDetails[]): APIError {\n    return new APIError(message, 400, ErrorCode.VALIDATION_ERROR, details);\n  }\n\n  static databaseError(message: string): APIError {\n    return new APIError(message, 503, ErrorCode.DATABASE_ERROR);\n  }\n\n  static circuitBreakerOpen(message: string): APIError {\n    return new APIError(message, 503, ErrorCode.CIRCUIT_BREAKER_OPEN);\n  }\n\n  static rateLimitExceeded(message: string): APIError {\n    return new APIError(message, 429, ErrorCode.RATE_LIMIT_EXCEEDED);\n  }\n\n  static internal(message: string = 'Internal server error'): APIError {\n    return new APIError(message, 500, ErrorCode.INTERNAL_ERROR);\n  }\n\n  static sessionNotFound(message: string = 'Session not found'): APIError {\n    return new APIError(message, 404, ErrorCode.SESSION_NOT_FOUND);\n  }\n\n  static scenarioNotFound(message: string = 'Scenario not found'): APIError {\n    return new APIError(message, 404, ErrorCode.SCENARIO_NOT_FOUND);\n  }\n\n  static evaluationFailed(message: string = 'Evaluation failed'): APIError {\n    return new APIError(message, 422, ErrorCode.EVALUATION_FAILED);\n  }\n\n  static externalServiceError(message: string, details?: ErrorDetails[]): APIError {\n    return new APIError(message, 503, ErrorCode.EXTERNAL_SERVICE_ERROR, details);\n  }\n}\n\ninterface ErrorResponse {\n  error: string;\n  code: ErrorCode;\n  statusCode: number;\n  timestamp: string;\n  path: string;\n  method: string;\n  requestId?: string;\n  details?: ErrorDetails[];\n  stack?: string;\n}\n\nexport class ErrorHandler {\n  private isDevelopment: boolean;\n  private correlationIdHeader: string;\n\n  constructor() {\n    this.isDevelopment = process.env.NODE_ENV !== 'production';\n    this.correlationIdHeader = 'x-correlation-id';\n  }\n\n  // Request ID generation middleware\n  public addRequestId() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const requestId = req.headers[this.correlationIdHeader] as string || \n        `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      req.requestId = requestId;\n      res.setHeader(this.correlationIdHeader, requestId);\n      \n      next();\n    };\n  }\n\n  // Main error handler middleware\n  public handleError() {\n    return (error: any, req: Request, res: Response, next: NextFunction) => {\n      const requestId = req.requestId;\n      let apiError: APIError;\n\n      // Convert different error types to APIError\n      if (error instanceof APIError) {\n        apiError = error;\n      } else if (error instanceof z.ZodError) {\n        apiError = this.handleZodError(error);\n      } else if (error instanceof CircuitBreakerError) {\n        apiError = this.handleCircuitBreakerError(error);\n      } else if (error.name === 'ValidationError') {\n        apiError = APIError.validationError(error.message);\n      } else if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n        apiError = APIError.databaseError('Database connection failed');\n      } else if (error.statusCode || error.status) {\n        // HTTP-like errors\n        const statusCode = error.statusCode || error.status;\n        const code = this.mapStatusCodeToErrorCode(statusCode);\n        apiError = new APIError(error.message || 'Request failed', statusCode, code);\n      } else {\n        // Generic error\n        apiError = APIError.internal(\n          this.isDevelopment ? error.message : 'An unexpected error occurred'\n        );\n      }\n\n      apiError.requestId = requestId;\n\n      // Log error (in production, this should go to a proper logging service)\n      this.logError(error, req, apiError);\n\n      // Create response\n      const response: ErrorResponse = {\n        error: apiError.message,\n        code: apiError.code,\n        statusCode: apiError.statusCode,\n        timestamp: apiError.timestamp.toISOString(),\n        path: req.path,\n        method: req.method,\n        requestId: apiError.requestId,\n        details: apiError.details\n      };\n\n      // Add stack trace in development\n      if (this.isDevelopment && error.stack) {\n        response.stack = error.stack;\n      }\n\n      // Send response\n      res.status(apiError.statusCode).json(response);\n    };\n  }\n\n  // Handle unhandled promise rejections\n  public setupGlobalHandlers() {\n    process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\n      logger.error('Unhandled Promise Rejection', { reason, promise: promise.toString() });\n      \n      // In production, you might want to gracefully shutdown\n      if (process.env.NODE_ENV === 'production') {\n        logger.error('Shutting down due to unhandled promise rejection');\n        process.exit(1);\n      }\n    });\n\n    process.on('uncaughtException', (error: Error) => {\n      logger.error('Uncaught Exception', { error: error.message, stack: error.stack });\n      \n      // Always exit on uncaught exceptions\n      process.exit(1);\n    });\n  }\n\n  // Async wrapper to catch promise rejections\n  public asyncHandler(fn: Function) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      Promise.resolve(fn(req, res, next)).catch(next);\n    };\n  }\n\n  private handleZodError(error: z.ZodError): APIError {\n    const details: ErrorDetails[] = error.errors.map(err => ({\n      field: err.path.join('.'),\n      message: err.message,\n      value: err.path.length > 0 ? err.path.reduce((obj, key) => obj?.[key], error as any) : undefined,\n      constraint: err.code\n    }));\n\n    return APIError.validationError('Request validation failed', details);\n  }\n\n  private handleCircuitBreakerError(error: CircuitBreakerError): APIError {\n    return APIError.circuitBreakerOpen(error.message);\n  }\n\n  private mapStatusCodeToErrorCode(statusCode: number): ErrorCode {\n    switch (statusCode) {\n      case 400: return ErrorCode.INVALID_REQUEST;\n      case 401: return ErrorCode.AUTH_REQUIRED;\n      case 403: return ErrorCode.PERMISSION_DENIED;\n      case 404: return ErrorCode.RESOURCE_NOT_FOUND;\n      case 429: return ErrorCode.RATE_LIMIT_EXCEEDED;\n      case 503: return ErrorCode.DATABASE_UNAVAILABLE;\n      default: return ErrorCode.INTERNAL_ERROR;\n    }\n  }\n\n  private logError(originalError: any, req: Request, apiError: APIError) {\n    const logData = {\n      requestId: apiError.requestId,\n      method: req.method,\n      path: req.path,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      error: {\n        message: apiError.message,\n        code: apiError.code,\n        statusCode: apiError.statusCode,\n        stack: this.isDevelopment ? originalError.stack : undefined\n      },\n      query: req.query,\n      body: this.sanitizeBody(req.body)\n    };\n\n    if (apiError.statusCode >= 500) {\n      logger.error('API Error - Server', logData);\n    } else if (apiError.statusCode >= 400) {\n      logger.warn('API Error - Client', logData);\n    }\n  }\n\n  private sanitizeBody(body: any): any {\n    if (!body || typeof body !== 'object') return body;\n\n    const sanitized = { ...body };\n    const sensitiveFields = ['password', 'token', 'apiKey', 'secret', 'auth'];\n    \n    for (const field of sensitiveFields) {\n      if (sanitized[field]) {\n        sanitized[field] = '[REDACTED]';\n      }\n    }\n\n    return sanitized;\n  }\n\n  // 404 handler for undefined routes\n  public notFoundHandler() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const error = APIError.notFound(`Route ${req.method} ${req.path} not found`);\n      next(error);\n    };\n  }\n\n  // Health check for error handling system\n  public healthCheck() {\n    return (req: Request, res: Response) => {\n      res.status(200).json({\n        errorHandler: {\n          status: 'healthy',\n          environment: this.isDevelopment ? 'development' : 'production',\n          timestamp: new Date().toISOString()\n        }\n      });\n    };\n  }\n}\n\n// Create singleton instance\nexport const errorHandler = new ErrorHandler();\n\n// Convenience exports\nexport const asyncHandler = errorHandler.asyncHandler.bind(errorHandler);\nexport const addRequestId = errorHandler.addRequestId.bind(errorHandler);\nexport const handleError = errorHandler.handleError.bind(errorHandler);\nexport const notFoundHandler = errorHandler.notFoundHandler.bind(errorHandler);\n\n// Global error handling setup\nexport const setupGlobalErrorHandling = () => {\n  errorHandler.setupGlobalHandlers();\n};\n\n// Helper function for consistent error responses\nexport const sendErrorResponse = (res: Response, error: APIError) => {\n  const response: ErrorResponse = {\n    error: error.message,\n    code: error.code,\n    statusCode: error.statusCode,\n    timestamp: error.timestamp.toISOString(),\n    path: res.req?.path || '',\n    method: res.req?.method || '',\n    requestId: error.requestId,\n    details: error.details\n  };\n\n  res.status(error.statusCode).json(response);\n};\n\n// Declare module augmentation for Request\ndeclare global {\n  namespace Express {\n    interface Request {\n      requestId?: string;\n    }\n  }\n}", "\nimport { Request, Response } from \"express\";\nimport { authService } from \"./middleware/auth.middleware.js\";\n\nexport function addDiagnosticRoutes(app: any) {\n  // Auth debugging endpoint\n  app.get(\"/api/diagnostic/auth-check\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      const ADMIN_EMAILS = authService.getAdminEmails();\n      \n      const authInfo = {\n        receivedEmail: email,\n        emailType: typeof email,\n        emailString: String(email || ''),\n        emailLowerCase: String(email || '').toLowerCase(),\n        adminEmails: ADMIN_EMAILS,\n        isAuthorized: authService.isAdmin(String(email || '')),\n        includes: ADMIN_EMAILS.includes(String(email || '').toLowerCase()),\n        query: req.query,\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(authInfo);\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Simple auth test endpoint\n  app.get(\"/api/diagnostic/auth-test\", async (req: Request, res: Response) => {\n    try {\n      const { email } = req.query;\n      const ADMIN_EMAILS = authService.getAdminEmails();\n      \n      const result = {\n        inputEmail: email,\n        emailType: typeof email,\n        isString: typeof email === 'string',\n        normalizedEmail: typeof email === 'string' ? email.toLowerCase().trim() : null,\n        adminEmails: ADMIN_EMAILS,\n        normalizedAdminEmails: ADMIN_EMAILS.map(e => e.toLowerCase().trim()),\n        isAuthorized: authService.isAdmin(email as string),\n        timestamp: new Date().toISOString()\n      };\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  app.get(\"/api/diagnostic/health\", async (req: Request, res: Response) => {\n    try {\n      const health = {\n        timestamp: new Date().toISOString(),\n        status: \"healthy\",\n        checks: {\n          memory: process.memoryUsage(),\n          uptime: process.uptime(),\n          platform: process.platform,\n          nodeVersion: process.version,\n          env: {\n            NODE_ENV: process.env.NODE_ENV,\n            hasOpenAI: !!process.env.OPENAI_API_KEY,\n            hasPinecone: !!process.env.PINECONE_API_KEY\n          }\n        }\n      };\n      \n      res.json(health);\n    } catch (error) {\n      res.status(500).json({\n        status: \"unhealthy\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get(\"/api/diagnostic/routes\", async (req: Request, res: Response) => {\n    try {\n      // Get all registered routes\n      const routes: any[] = [];\n      \n      app._router.stack.forEach((middleware: any) => {\n        if (middleware.route) {\n          routes.push({\n            path: middleware.route.path,\n            methods: Object.keys(middleware.route.methods)\n          });\n        } else if (middleware.name === 'router') {\n          middleware.handle.stack.forEach((handler: any) => {\n            if (handler.route) {\n              routes.push({\n                path: handler.route.path,\n                methods: Object.keys(handler.route.methods)\n              });\n            }\n          });\n        }\n      });\n\n      res.json({ routes });\n    } catch (error) {\n      res.status(500).json({\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n}\n", "\nimport { apiLogger } from \"./services/logger.service.js\";\n\nexport function createDebugMiddleware() {\n  // Only enable debug middleware in development\n  if (process.env.NODE_ENV !== 'development') {\n    return (req: any, res: any, next: any) => next();\n  }\n\n  return (req: any, res: any, next: any) => {\n    // Log all requests in development only\n    apiLogger.request(req.method, req.path, undefined, undefined, {\n      query: req.query,\n      bodyKeys: req.body ? Object.keys(req.body) : undefined\n    });\n\n    // Catch async errors in development only\n    const originalSend = res.send;\n    res.send = function(data: any) {\n      if (res.statusCode >= 400) {\n        apiLogger.error(`Error response ${res.statusCode} for ${req.method} ${req.path}`, {\n          statusCode: res.statusCode,\n          method: req.method,\n          path: req.path,\n          responseData: typeof data === 'object' ? data : { message: data }\n        });\n      }\n      return originalSend.call(this, data);\n    };\n\n    next();\n  };\n}\n\nexport function createDatabaseErrorHandler() {\n  return (error: any, req: any, res: any, next: any) => {\n    if (error.code === 'CONNECTION_LOST' || error.code === 'PROTOCOL_CONNECTION_LOST') {\n      apiLogger.error('Database connection lost', { \n        errorCode: error.code, \n        message: error.message,\n        path: req.path,\n        method: req.method\n      });\n      return res.status(503).json({\n        error: 'Database connection lost',\n        message: 'The database connection was lost. Please try again.',\n        code: error.code\n      });\n    }\n\n    if (error.message && error.message.includes('WebSocket')) {\n      apiLogger.error('WebSocket database error', { \n        message: error.message,\n        path: req.path,\n        method: req.method\n      });\n      return res.status(503).json({\n        error: 'Database WebSocket error',\n        message: 'WebSocket connection to database failed. Please try again.',\n        details: error.message\n      });\n    }\n\n    next(error);\n  };\n}\n", "/**\n * Performance Monitoring and Observability Framework\n * \n * This system provides comprehensive monitoring for the ECOS serverless application:\n * - Request/response performance tracking\n * - Database query performance monitoring\n * - Error rate tracking and alerting\n * - Resource utilization monitoring\n * - Custom metrics collection\n * - Health status reporting\n */\n\ninterface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: 'ms' | 'count' | 'percent' | 'bytes' | 'rate';\n  timestamp: Date;\n  tags?: Record<string, string>;\n}\n\ninterface RequestMetrics {\n  method: string;\n  path: string;\n  statusCode: number;\n  duration: number;\n  timestamp: Date;\n  userAgent?: string;\n  responseSize?: number;\n  errorMessage?: string;\n}\n\ninterface DatabaseMetrics {\n  query: string;\n  duration: number;\n  rowsAffected?: number;\n  success: boolean;\n  timestamp: Date;\n  errorMessage?: string;\n}\n\ninterface SystemMetrics {\n  cpuUsage?: number;\n  memoryUsage: {\n    used: number;\n    total: number;\n    percent: number;\n  };\n  uptime: number;\n  timestamp: Date;\n}\n\ninterface AlertConfig {\n  metric: string;\n  threshold: number;\n  operator: 'gt' | 'lt' | 'eq';\n  enabled: boolean;\n  cooldown: number; // minutes\n}\n\ninterface MonitoringConfig {\n  enableRequestTracking: boolean;\n  enableDatabaseTracking: boolean;\n  enableSystemMetrics: boolean;\n  metricsRetentionHours: number;\n  alertConfigs: AlertConfig[];\n  enableConsoleLogging: boolean;\n  enableWebhooks: boolean;\n}\n\nclass PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private requestMetrics: RequestMetrics[] = [];\n  private databaseMetrics: DatabaseMetrics[] = [];\n  private systemMetrics: SystemMetrics[] = [];\n  private alertLastFired: Map<string, Date> = new Map();\n  private config: MonitoringConfig;\n  private metricsCleanupInterval: NodeJS.Timeout | null = null;\n  private systemMetricsInterval: NodeJS.Timeout | null = null;\n\n  constructor(config?: Partial<MonitoringConfig>) {\n    this.config = {\n      enableRequestTracking: true,\n      enableDatabaseTracking: true,\n      enableSystemMetrics: true,\n      metricsRetentionHours: 24,\n      enableConsoleLogging: process.env.NODE_ENV !== 'production',\n      enableWebhooks: false,\n      alertConfigs: [\n        {\n          metric: 'request_duration_p95',\n          threshold: 2000, // 2 seconds\n          operator: 'gt',\n          enabled: true,\n          cooldown: 10 // 10 minutes\n        },\n        {\n          metric: 'error_rate_5min',\n          threshold: 5, // 5%\n          operator: 'gt',\n          enabled: true,\n          cooldown: 5 // 5 minutes\n        },\n        {\n          metric: 'memory_usage_percent',\n          threshold: 85, // 85%\n          operator: 'gt',\n          enabled: true,\n          cooldown: 15 // 15 minutes\n        }\n      ],\n      ...config\n    };\n\n    this.startBackgroundTasks();\n  }\n\n  /**\n   * Start background monitoring tasks\n   */\n  private startBackgroundTasks(): void {\n    // Clean up old metrics periodically\n    this.metricsCleanupInterval = setInterval(() => {\n      this.cleanupOldMetrics();\n    }, 5 * 60 * 1000); // Every 5 minutes\n\n    // Collect system metrics\n    if (this.config.enableSystemMetrics) {\n      this.systemMetricsInterval = setInterval(() => {\n        this.collectSystemMetrics();\n      }, 30 * 1000); // Every 30 seconds\n    }\n  }\n\n  /**\n   * Record a custom performance metric\n   */\n  recordMetric(name: string, value: number, unit: PerformanceMetric['unit'], tags?: Record<string, string>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      tags\n    };\n\n    this.metrics.push(metric);\n\n    if (this.config.enableConsoleLogging) {\n      console.log(`\uD83D\uDCCA Metric: ${name} = ${value}${unit}`, tags ? `(${JSON.stringify(tags)})` : '');\n    }\n\n    this.checkAlerts();\n  }\n\n  /**\n   * Record request performance metrics\n   */\n  recordRequest(request: Omit<RequestMetrics, 'timestamp'>): void {\n    if (!this.config.enableRequestTracking) return;\n\n    const requestMetric: RequestMetrics = {\n      ...request,\n      timestamp: new Date()\n    };\n\n    this.requestMetrics.push(requestMetric);\n\n    // Record as performance metric\n    this.recordMetric('request_duration', request.duration, 'ms', {\n      method: request.method,\n      path: request.path,\n      status: request.statusCode.toString()\n    });\n\n    // Record error if status indicates failure\n    if (request.statusCode >= 400) {\n      this.recordMetric('request_error', 1, 'count', {\n        method: request.method,\n        path: request.path,\n        status: request.statusCode.toString()\n      });\n    }\n  }\n\n  /**\n   * Record database query performance\n   */\n  recordDatabaseQuery(query: Omit<DatabaseMetrics, 'timestamp'>): void {\n    if (!this.config.enableDatabaseTracking) return;\n\n    const dbMetric: DatabaseMetrics = {\n      ...query,\n      timestamp: new Date()\n    };\n\n    this.databaseMetrics.push(dbMetric);\n\n    // Record as performance metric\n    this.recordMetric('db_query_duration', query.duration, 'ms', {\n      success: query.success.toString(),\n      affected_rows: query.rowsAffected?.toString() || '0'\n    });\n\n    if (!query.success) {\n      this.recordMetric('db_query_error', 1, 'count');\n    }\n  }\n\n  /**\n   * Collect system performance metrics\n   */\n  private collectSystemMetrics(): void {\n    const memUsage = process.memoryUsage();\n    const used = Math.round(memUsage.heapUsed / 1024 / 1024);\n    const total = Math.round(memUsage.heapTotal / 1024 / 1024);\n    const percent = Math.round((used / total) * 100);\n\n    const systemMetric: SystemMetrics = {\n      memoryUsage: {\n        used,\n        total,\n        percent\n      },\n      uptime: process.uptime(),\n      timestamp: new Date()\n    };\n\n    this.systemMetrics.push(systemMetric);\n\n    // Record as performance metrics\n    this.recordMetric('memory_usage_mb', used, 'bytes');\n    this.recordMetric('memory_usage_percent', percent, 'percent');\n    this.recordMetric('uptime_seconds', systemMetric.uptime, 'count');\n  }\n\n  /**\n   * Calculate percentile from array of values\n   */\n  private calculatePercentile(values: number[], percentile: number): number {\n    if (values.length === 0) return 0;\n    \n    const sorted = [...values].sort((a, b) => a - b);\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n    return sorted[Math.max(0, index)];\n  }\n\n  /**\n   * Get request performance statistics\n   */\n  getRequestStats(minutes = 60): {\n    totalRequests: number;\n    errorRate: number;\n    averageResponseTime: number;\n    p50ResponseTime: number;\n    p95ResponseTime: number;\n    p99ResponseTime: number;\n    statusCodeDistribution: Record<string, number>;\n  } {\n    const cutoff = new Date(Date.now() - minutes * 60 * 1000);\n    const recentRequests = this.requestMetrics.filter(r => r.timestamp > cutoff);\n\n    if (recentRequests.length === 0) {\n      return {\n        totalRequests: 0,\n        errorRate: 0,\n        averageResponseTime: 0,\n        p50ResponseTime: 0,\n        p95ResponseTime: 0,\n        p99ResponseTime: 0,\n        statusCodeDistribution: {}\n      };\n    }\n\n    const durations = recentRequests.map(r => r.duration);\n    const errors = recentRequests.filter(r => r.statusCode >= 400).length;\n    \n    const statusCodes: Record<string, number> = {};\n    recentRequests.forEach(r => {\n      const status = r.statusCode.toString();\n      statusCodes[status] = (statusCodes[status] || 0) + 1;\n    });\n\n    return {\n      totalRequests: recentRequests.length,\n      errorRate: (errors / recentRequests.length) * 100,\n      averageResponseTime: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n      p50ResponseTime: this.calculatePercentile(durations, 50),\n      p95ResponseTime: this.calculatePercentile(durations, 95),\n      p99ResponseTime: this.calculatePercentile(durations, 99),\n      statusCodeDistribution: statusCodes\n    };\n  }\n\n  /**\n   * Get database performance statistics\n   */\n  getDatabaseStats(minutes = 60): {\n    totalQueries: number;\n    errorRate: number;\n    averageQueryTime: number;\n    p95QueryTime: number;\n    slowQueries: DatabaseMetrics[];\n  } {\n    const cutoff = new Date(Date.now() - minutes * 60 * 1000);\n    const recentQueries = this.databaseMetrics.filter(q => q.timestamp > cutoff);\n\n    if (recentQueries.length === 0) {\n      return {\n        totalQueries: 0,\n        errorRate: 0,\n        averageQueryTime: 0,\n        p95QueryTime: 0,\n        slowQueries: []\n      };\n    }\n\n    const durations = recentQueries.map(q => q.duration);\n    const errors = recentQueries.filter(q => !q.success).length;\n    const slowQueries = recentQueries\n      .filter(q => q.duration > 1000) // Queries slower than 1 second\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, 10);\n\n    return {\n      totalQueries: recentQueries.length,\n      errorRate: (errors / recentQueries.length) * 100,\n      averageQueryTime: durations.reduce((sum, d) => sum + d, 0) / durations.length,\n      p95QueryTime: this.calculatePercentile(durations, 95),\n      slowQueries\n    };\n  }\n\n  /**\n   * Get current system status\n   */\n  getSystemStatus(): {\n    healthy: boolean;\n    uptime: number;\n    memory: SystemMetrics['memoryUsage'];\n    requestStats: ReturnType<typeof this.getRequestStats>;\n    databaseStats: ReturnType<typeof this.getDatabaseStats>;\n    alertsTriggered: number;\n    timestamp: Date;\n  } {\n    const latest = this.systemMetrics[this.systemMetrics.length - 1];\n    const requestStats = this.getRequestStats(60);\n    const databaseStats = this.getDatabaseStats(60);\n\n    const healthy = \n      requestStats.errorRate < 10 && // Error rate under 10%\n      requestStats.p95ResponseTime < 5000 && // P95 under 5 seconds\n      databaseStats.errorRate < 5 && // DB error rate under 5%\n      (latest?.memoryUsage.percent || 0) < 90; // Memory under 90%\n\n    return {\n      healthy,\n      uptime: latest?.uptime || process.uptime(),\n      memory: latest?.memoryUsage || { used: 0, total: 0, percent: 0 },\n      requestStats,\n      databaseStats,\n      alertsTriggered: this.alertLastFired.size,\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Check if any alerts should be triggered\n   */\n  private checkAlerts(): void {\n    const now = new Date();\n    \n    for (const alertConfig of this.config.alertConfigs) {\n      if (!alertConfig.enabled) continue;\n      \n      const lastFired = this.alertLastFired.get(alertConfig.metric);\n      if (lastFired && now.getTime() - lastFired.getTime() < alertConfig.cooldown * 60 * 1000) {\n        continue; // Still in cooldown\n      }\n\n      let currentValue: number | null = null;\n\n      // Calculate current value based on metric name\n      switch (alertConfig.metric) {\n        case 'request_duration_p95':\n          currentValue = this.getRequestStats(5).p95ResponseTime;\n          break;\n        case 'error_rate_5min':\n          currentValue = this.getRequestStats(5).errorRate;\n          break;\n        case 'memory_usage_percent':\n          const latest = this.systemMetrics[this.systemMetrics.length - 1];\n          currentValue = latest?.memoryUsage.percent || 0;\n          break;\n      }\n\n      if (currentValue !== null && this.shouldTriggerAlert(currentValue, alertConfig)) {\n        this.triggerAlert(alertConfig.metric, currentValue, alertConfig.threshold);\n        this.alertLastFired.set(alertConfig.metric, now);\n      }\n    }\n  }\n\n  /**\n   * Check if alert should be triggered based on configuration\n   */\n  private shouldTriggerAlert(value: number, config: AlertConfig): boolean {\n    switch (config.operator) {\n      case 'gt': return value > config.threshold;\n      case 'lt': return value < config.threshold;\n      case 'eq': return value === config.threshold;\n      default: return false;\n    }\n  }\n\n  /**\n   * Trigger an alert\n   */\n  private triggerAlert(metric: string, currentValue: number, threshold: number): void {\n    const alertMessage = `\uD83D\uDEA8 ALERT: ${metric} = ${currentValue} (threshold: ${threshold})`;\n    \n    console.error(alertMessage);\n\n    // In production, you could send this to a monitoring service\n    // this.sendToMonitoringService(metric, currentValue, threshold);\n  }\n\n  /**\n   * Clean up old metrics to prevent memory leaks\n   */\n  private cleanupOldMetrics(): void {\n    const cutoff = new Date(Date.now() - this.config.metricsRetentionHours * 60 * 60 * 1000);\n    \n    const initialCounts = {\n      metrics: this.metrics.length,\n      requests: this.requestMetrics.length,\n      database: this.databaseMetrics.length,\n      system: this.systemMetrics.length\n    };\n\n    this.metrics = this.metrics.filter(m => m.timestamp > cutoff);\n    this.requestMetrics = this.requestMetrics.filter(r => r.timestamp > cutoff);\n    this.databaseMetrics = this.databaseMetrics.filter(d => d.timestamp > cutoff);\n    this.systemMetrics = this.systemMetrics.filter(s => s.timestamp > cutoff);\n\n    if (this.config.enableConsoleLogging) {\n      const cleaned = {\n        metrics: initialCounts.metrics - this.metrics.length,\n        requests: initialCounts.requests - this.requestMetrics.length,\n        database: initialCounts.database - this.databaseMetrics.length,\n        system: initialCounts.system - this.systemMetrics.length\n      };\n\n      console.log('\uD83E\uDDF9 Cleaned up old metrics:', cleaned);\n    }\n  }\n\n  /**\n   * Generate monitoring report\n   */\n  generateReport(): string {\n    const status = this.getSystemStatus();\n    \n    return `\n# ECOS Performance Monitoring Report\nGenerated: ${status.timestamp.toISOString()}\n\n## System Health: ${status.healthy ? '\u2705 HEALTHY' : '\u274C UNHEALTHY'}\n\n### System Metrics\n- Uptime: ${Math.round(status.uptime / 3600)}h ${Math.round((status.uptime % 3600) / 60)}m\n- Memory Usage: ${status.memory.used}MB / ${status.memory.total}MB (${status.memory.percent}%)\n\n### Request Performance (Last 60 minutes)\n- Total Requests: ${status.requestStats.totalRequests}\n- Error Rate: ${status.requestStats.errorRate.toFixed(2)}%\n- Average Response Time: ${status.requestStats.averageResponseTime.toFixed(0)}ms\n- P95 Response Time: ${status.requestStats.p95ResponseTime.toFixed(0)}ms\n- P99 Response Time: ${status.requestStats.p99ResponseTime.toFixed(0)}ms\n\n### Database Performance (Last 60 minutes)\n- Total Queries: ${status.databaseStats.totalQueries}\n- Error Rate: ${status.databaseStats.errorRate.toFixed(2)}%\n- Average Query Time: ${status.databaseStats.averageQueryTime.toFixed(0)}ms\n- P95 Query Time: ${status.databaseStats.p95QueryTime.toFixed(0)}ms\n- Slow Queries: ${status.databaseStats.slowQueries.length}\n\n### Alerts\n- Active Alerts: ${status.alertsTriggered}\n\n## Status Code Distribution\n${Object.entries(status.requestStats.statusCodeDistribution)\n  .map(([code, count]) => `- ${code}: ${count}`)\n  .join('\\n')}\n    `.trim();\n  }\n\n  /**\n   * Graceful shutdown\n   */\n  shutdown(): void {\n    if (this.metricsCleanupInterval) {\n      clearInterval(this.metricsCleanupInterval);\n    }\n    \n    if (this.systemMetricsInterval) {\n      clearInterval(this.systemMetricsInterval);\n    }\n\n    console.log('\uD83D\uDCCA Performance monitoring shutdown complete');\n  }\n}\n\n// Create singleton instance\nconst performanceMonitor = new PerformanceMonitor();\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', () => performanceMonitor.shutdown());\nprocess.on('SIGINT', () => performanceMonitor.shutdown());\n\nexport { performanceMonitor, PerformanceMonitor };\nexport type { PerformanceMetric, RequestMetrics, DatabaseMetrics, MonitoringConfig };", "import { Request, Response, NextFunction } from 'express';\nimport { performanceMonitor } from '../monitoring/performance-monitor.js';\n\n/**\n * Performance Monitoring Middleware\n * \n * This middleware automatically tracks request performance, errors,\n * and other metrics for every request processed by the Express server.\n */\n\ninterface MonitoringRequest extends Request {\n  startTime?: number;\n  requestId?: string;\n}\n\n/**\n * Generate a unique request ID for tracking\n */\nfunction generateRequestId(): string {\n  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Main monitoring middleware\n */\nexport function createMonitoringMiddleware() {\n  return (req: MonitoringRequest, res: Response, next: NextFunction): void => {\n    // Track request start time\n    req.startTime = Date.now();\n    req.requestId = generateRequestId();\n\n    // Add request ID to response headers for debugging\n    res.setHeader('X-Request-ID', req.requestId);\n\n    let responseSize = 0;\n    let capturedResponse: any = undefined;\n\n    // Hook into response to capture data\n    const originalSend = res.send;\n    const originalJson = res.json;\n\n    res.send = function (this: Response, body: any) {\n      if (body) {\n        responseSize = Buffer.byteLength(body, 'utf8');\n        capturedResponse = body;\n      }\n      return originalSend.call(this, body);\n    };\n\n    res.json = function (this: Response, obj: any) {\n      if (obj) {\n        const jsonString = JSON.stringify(obj);\n        responseSize = Buffer.byteLength(jsonString, 'utf8');\n        capturedResponse = obj;\n      }\n      return originalJson.call(this, obj);\n    };\n\n    // Listen for response finish to record metrics\n    res.on('finish', () => {\n      const duration = Date.now() - (req.startTime || Date.now());\n      \n      // Record request metrics\n      performanceMonitor.recordRequest({\n        method: req.method,\n        path: req.route?.path || req.path,\n        statusCode: res.statusCode,\n        duration,\n        userAgent: req.get('User-Agent'),\n        responseSize,\n        errorMessage: res.statusCode >= 400 ? \n          (capturedResponse?.error || capturedResponse?.message) : undefined\n      });\n\n      // Log slow requests\n      if (duration > 2000) { // Requests slower than 2 seconds\n        console.warn(`\uD83D\uDC0C Slow request detected: ${req.method} ${req.path} took ${duration}ms`);\n      }\n\n      // Log error requests\n      if (res.statusCode >= 400) {\n        console.error(`\u274C Error request: ${req.method} ${req.path} - ${res.statusCode} in ${duration}ms`);\n      }\n    });\n\n    // Handle request errors\n    res.on('error', (error) => {\n      const duration = Date.now() - (req.startTime || Date.now());\n      \n      performanceMonitor.recordRequest({\n        method: req.method,\n        path: req.route?.path || req.path,\n        statusCode: 500,\n        duration,\n        userAgent: req.get('User-Agent'),\n        errorMessage: error.message\n      });\n    });\n\n    next();\n  };\n}\n\n/**\n * Database query monitoring decorator\n */\nexport function monitorDatabaseQuery<T extends (...args: any[]) => Promise<any>>(\n  queryFn: T,\n  queryName: string\n): T {\n  return (async (...args: Parameters<T>) => {\n    const startTime = Date.now();\n    let success = false;\n    let errorMessage: string | undefined;\n    let rowsAffected: number | undefined;\n\n    try {\n      const result = await queryFn(...args);\n      success = true;\n      \n      // Try to extract rows affected from result\n      if (result && typeof result === 'object') {\n        if (Array.isArray(result)) {\n          rowsAffected = result.length;\n        } else if (typeof result.rowCount === 'number') {\n          rowsAffected = result.rowCount;\n        } else if (typeof result.changes === 'number') {\n          rowsAffected = result.changes;\n        }\n      }\n      \n      return result;\n    } catch (error) {\n      success = false;\n      errorMessage = error instanceof Error ? error.message : String(error);\n      throw error;\n    } finally {\n      const duration = Date.now() - startTime;\n      \n      performanceMonitor.recordDatabaseQuery({\n        query: queryName,\n        duration,\n        success,\n        rowsAffected,\n        errorMessage\n      });\n\n      // Log slow queries\n      if (duration > 1000) {\n        console.warn(`\uD83D\uDC0C Slow database query: ${queryName} took ${duration}ms`);\n      }\n    }\n  }) as T;\n}\n\n/**\n * Create monitoring endpoints for health checks and metrics\n */\nexport function createMonitoringRoutes() {\n  return {\n    // Health check endpoint with detailed metrics\n    healthCheck: async (req: Request, res: Response) => {\n      try {\n        const status = performanceMonitor.getSystemStatus();\n        \n        res.status(status.healthy ? 200 : 503).json({\n          status: status.healthy ? 'healthy' : 'unhealthy',\n          timestamp: status.timestamp,\n          uptime: status.uptime,\n          memory: status.memory,\n          requestStats: {\n            total: status.requestStats.totalRequests,\n            errorRate: parseFloat(status.requestStats.errorRate.toFixed(2)),\n            avgResponseTime: Math.round(status.requestStats.averageResponseTime),\n            p95ResponseTime: Math.round(status.requestStats.p95ResponseTime)\n          },\n          databaseStats: {\n            total: status.databaseStats.totalQueries,\n            errorRate: parseFloat(status.databaseStats.errorRate.toFixed(2)),\n            avgQueryTime: Math.round(status.databaseStats.averageQueryTime),\n            p95QueryTime: Math.round(status.databaseStats.p95QueryTime)\n          },\n          environment: process.env.NODE_ENV || 'unknown'\n        });\n      } catch (error) {\n        res.status(500).json({\n          status: 'error',\n          message: 'Health check failed',\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    },\n\n    // Detailed metrics endpoint\n    metrics: async (req: Request, res: Response) => {\n      try {\n        const minutes = parseInt(req.query.minutes as string) || 60;\n        \n        const requestStats = performanceMonitor.getRequestStats(minutes);\n        const databaseStats = performanceMonitor.getDatabaseStats(minutes);\n        const systemStatus = performanceMonitor.getSystemStatus();\n        \n        res.json({\n          timeframe: `${minutes} minutes`,\n          timestamp: new Date(),\n          requests: {\n            total: requestStats.totalRequests,\n            errorRate: parseFloat(requestStats.errorRate.toFixed(2)),\n            responseTime: {\n              average: Math.round(requestStats.averageResponseTime),\n              p50: Math.round(requestStats.p50ResponseTime),\n              p95: Math.round(requestStats.p95ResponseTime),\n              p99: Math.round(requestStats.p99ResponseTime)\n            },\n            statusCodes: requestStats.statusCodeDistribution\n          },\n          database: {\n            total: databaseStats.totalQueries,\n            errorRate: parseFloat(databaseStats.errorRate.toFixed(2)),\n            queryTime: {\n              average: Math.round(databaseStats.averageQueryTime),\n              p95: Math.round(databaseStats.p95QueryTime)\n            },\n            slowQueries: databaseStats.slowQueries.length\n          },\n          system: {\n            uptime: systemStatus.uptime,\n            memory: systemStatus.memory,\n            healthy: systemStatus.healthy\n          }\n        });\n      } catch (error) {\n        res.status(500).json({\n          error: 'Metrics collection failed',\n          message: error instanceof Error ? error.message : String(error)\n        });\n      }\n    },\n\n    // Performance report endpoint\n    report: async (req: Request, res: Response) => {\n      try {\n        const report = performanceMonitor.generateReport();\n        \n        res.setHeader('Content-Type', 'text/plain');\n        res.send(report);\n      } catch (error) {\n        res.status(500).json({\n          error: 'Report generation failed',\n          message: error instanceof Error ? error.message : String(error)\n        });\n      }\n    },\n\n    // Custom metric recording endpoint (for client-side metrics)\n    recordMetric: async (req: Request, res: Response) => {\n      try {\n        const { name, value, unit, tags } = req.body;\n        \n        if (!name || typeof value !== 'number' || !unit) {\n          return res.status(400).json({\n            error: 'Invalid metric data',\n            message: 'name, value, and unit are required'\n          });\n        }\n        \n        performanceMonitor.recordMetric(name, value, unit, tags);\n        \n        res.json({\n          success: true,\n          message: 'Metric recorded successfully'\n        });\n      } catch (error) {\n        res.status(500).json({\n          error: 'Failed to record metric',\n          message: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  };\n}\n\n/**\n * Error tracking middleware\n */\nexport function createErrorTrackingMiddleware() {\n  return (error: any, req: Request, res: Response, next: NextFunction): void => {\n    // Record error metric\n    performanceMonitor.recordMetric('application_error', 1, 'count', {\n      path: req.path,\n      method: req.method,\n      errorType: error.constructor.name,\n      statusCode: (error.status || error.statusCode || 500).toString()\n    });\n\n    // Log error details\n    console.error('\uD83D\uDEA8 Application Error:', {\n      message: error.message,\n      stack: error.stack,\n      url: req.url,\n      method: req.method,\n      userAgent: req.get('User-Agent'),\n      timestamp: new Date().toISOString()\n    });\n\n    // Continue with default error handling\n    next(error);\n  };\n}\n\nexport { performanceMonitor };"],
  "mappings": "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",
  "names": ["Pinecone", "OpenAI", "openai", "OpenAI", "openai", "util", "objectUtil", "errorUtil", "errorMap", "jwt", "ctx", "result", "issues", "elements", "processed", "r", "_a", "_b", "ZodFirstPartyTypeKind", "emailRegex", "emailRegex", "firebaseAdminService", "promptGenService", "pineconeService", "email", "virtualPatientService", "isValid"]
}
